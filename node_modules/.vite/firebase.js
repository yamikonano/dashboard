import {
  Component,
  ComponentContainer,
  Deferred,
  ErrorFactory,
  FirebaseError,
  LogLevel,
  Logger,
  Provider,
  Sha1,
  __assign,
  __awaiter,
  __extends,
  __generator,
  __read,
  __spreadArray,
  __values,
  areCookiesEnabled,
  assert,
  assertionError,
  base64,
  base64Encode,
  calculateBackoffMillis,
  contains,
  createMockUserToken,
  deepCopy,
  errorPrefix,
  getGlobal,
  getModularInstance,
  getUA,
  index_esm_default,
  isAdmin,
  isBrowserExtension,
  isElectron,
  isEmpty,
  isIE,
  isIndexedDBAvailable,
  isMobileCordova,
  isNodeSdk,
  isReactNative,
  isSafari,
  isUWP,
  isValidFormat,
  issuedAtTime,
  jsonEval,
  map,
  querystring,
  safeGet,
  stringLength,
  stringToByteArray,
  stringify,
  validateArgCount,
  validateCallback,
  validateContextObject,
  validateIndexedDBOpenable
} from "./chunk-MHAFJU2H.js";
import "./chunk-VXGLS6EP.js";

// node_modules/@firebase/database/dist/index.esm.js
var name = "@firebase/database";
var version = "0.11.0";
var SDK_VERSION = "";
function setSDKVersion(version10) {
  SDK_VERSION = version10;
}
var DOMStorageWrapper = function() {
  function DOMStorageWrapper2(domStorage_) {
    this.domStorage_ = domStorage_;
    this.prefix_ = "firebase:";
  }
  DOMStorageWrapper2.prototype.set = function(key, value) {
    if (value == null) {
      this.domStorage_.removeItem(this.prefixedName_(key));
    } else {
      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));
    }
  };
  DOMStorageWrapper2.prototype.get = function(key) {
    var storedVal = this.domStorage_.getItem(this.prefixedName_(key));
    if (storedVal == null) {
      return null;
    } else {
      return jsonEval(storedVal);
    }
  };
  DOMStorageWrapper2.prototype.remove = function(key) {
    this.domStorage_.removeItem(this.prefixedName_(key));
  };
  DOMStorageWrapper2.prototype.prefixedName_ = function(name10) {
    return this.prefix_ + name10;
  };
  DOMStorageWrapper2.prototype.toString = function() {
    return this.domStorage_.toString();
  };
  return DOMStorageWrapper2;
}();
var MemoryStorage = function() {
  function MemoryStorage2() {
    this.cache_ = {};
    this.isInMemoryStorage = true;
  }
  MemoryStorage2.prototype.set = function(key, value) {
    if (value == null) {
      delete this.cache_[key];
    } else {
      this.cache_[key] = value;
    }
  };
  MemoryStorage2.prototype.get = function(key) {
    if (contains(this.cache_, key)) {
      return this.cache_[key];
    }
    return null;
  };
  MemoryStorage2.prototype.remove = function(key) {
    delete this.cache_[key];
  };
  return MemoryStorage2;
}();
var createStoragefor = function(domStorageName) {
  try {
    if (typeof window !== "undefined" && typeof window[domStorageName] !== "undefined") {
      var domStorage = window[domStorageName];
      domStorage.setItem("firebase:sentinel", "cache");
      domStorage.removeItem("firebase:sentinel");
      return new DOMStorageWrapper(domStorage);
    }
  } catch (e) {
  }
  return new MemoryStorage();
};
var PersistentStorage = createStoragefor("localStorage");
var SessionStorage = createStoragefor("sessionStorage");
var logClient = new Logger("@firebase/database");
var LUIDGenerator = function() {
  var id2 = 1;
  return function() {
    return id2++;
  };
}();
var sha1 = function(str) {
  var utf8Bytes = stringToByteArray(str);
  var sha12 = new Sha1();
  sha12.update(utf8Bytes);
  var sha1Bytes = sha12.digest();
  return base64.encodeByteArray(sha1Bytes);
};
var buildLogMessage_ = function() {
  var varArgs = [];
  for (var _i2 = 0; _i2 < arguments.length; _i2++) {
    varArgs[_i2] = arguments[_i2];
  }
  var message = "";
  for (var i = 0; i < varArgs.length; i++) {
    var arg = varArgs[i];
    if (Array.isArray(arg) || arg && typeof arg === "object" && typeof arg.length === "number") {
      message += buildLogMessage_.apply(null, arg);
    } else if (typeof arg === "object") {
      message += stringify(arg);
    } else {
      message += arg;
    }
    message += " ";
  }
  return message;
};
var logger = null;
var firstLog_ = true;
var enableLogging = function(logger_, persistent) {
  assert(!persistent || logger_ === true || logger_ === false, "Can't turn on custom loggers persistently.");
  if (logger_ === true) {
    logClient.logLevel = LogLevel.VERBOSE;
    logger = logClient.log.bind(logClient);
    if (persistent) {
      SessionStorage.set("logging_enabled", true);
    }
  } else if (typeof logger_ === "function") {
    logger = logger_;
  } else {
    logger = null;
    SessionStorage.remove("logging_enabled");
  }
};
var log = function() {
  var varArgs = [];
  for (var _i2 = 0; _i2 < arguments.length; _i2++) {
    varArgs[_i2] = arguments[_i2];
  }
  if (firstLog_ === true) {
    firstLog_ = false;
    if (logger === null && SessionStorage.get("logging_enabled") === true) {
      enableLogging(true);
    }
  }
  if (logger) {
    var message = buildLogMessage_.apply(null, varArgs);
    logger(message);
  }
};
var logWrapper = function(prefix) {
  return function() {
    var varArgs = [];
    for (var _i2 = 0; _i2 < arguments.length; _i2++) {
      varArgs[_i2] = arguments[_i2];
    }
    log.apply(void 0, __spreadArray([prefix], __read(varArgs)));
  };
};
var error = function() {
  var varArgs = [];
  for (var _i2 = 0; _i2 < arguments.length; _i2++) {
    varArgs[_i2] = arguments[_i2];
  }
  var message = "FIREBASE INTERNAL ERROR: " + buildLogMessage_.apply(void 0, __spreadArray([], __read(varArgs)));
  logClient.error(message);
};
var fatal = function() {
  var varArgs = [];
  for (var _i2 = 0; _i2 < arguments.length; _i2++) {
    varArgs[_i2] = arguments[_i2];
  }
  var message = "FIREBASE FATAL ERROR: " + buildLogMessage_.apply(void 0, __spreadArray([], __read(varArgs)));
  logClient.error(message);
  throw new Error(message);
};
var warn = function() {
  var varArgs = [];
  for (var _i2 = 0; _i2 < arguments.length; _i2++) {
    varArgs[_i2] = arguments[_i2];
  }
  var message = "FIREBASE WARNING: " + buildLogMessage_.apply(void 0, __spreadArray([], __read(varArgs)));
  logClient.warn(message);
};
var warnIfPageIsSecure = function() {
  if (typeof window !== "undefined" && window.location && window.location.protocol && window.location.protocol.indexOf("https:") !== -1) {
    warn("Insecure Firebase access from a secure page. Please use https in calls to new Firebase().");
  }
};
var isInvalidJSONNumber = function(data) {
  return typeof data === "number" && (data !== data || data === Number.POSITIVE_INFINITY || data === Number.NEGATIVE_INFINITY);
};
var executeWhenDOMReady = function(fn2) {
  if (isNodeSdk() || document.readyState === "complete") {
    fn2();
  } else {
    var called_1 = false;
    var wrappedFn_1 = function() {
      if (!document.body) {
        setTimeout(wrappedFn_1, Math.floor(10));
        return;
      }
      if (!called_1) {
        called_1 = true;
        fn2();
      }
    };
    if (document.addEventListener) {
      document.addEventListener("DOMContentLoaded", wrappedFn_1, false);
      window.addEventListener("load", wrappedFn_1, false);
    } else if (document.attachEvent) {
      document.attachEvent("onreadystatechange", function() {
        if (document.readyState === "complete") {
          wrappedFn_1();
        }
      });
      window.attachEvent("onload", wrappedFn_1);
    }
  }
};
var MIN_NAME = "[MIN_NAME]";
var MAX_NAME = "[MAX_NAME]";
var nameCompare = function(a, b) {
  if (a === b) {
    return 0;
  } else if (a === MIN_NAME || b === MAX_NAME) {
    return -1;
  } else if (b === MIN_NAME || a === MAX_NAME) {
    return 1;
  } else {
    var aAsInt = tryParseInt(a), bAsInt = tryParseInt(b);
    if (aAsInt !== null) {
      if (bAsInt !== null) {
        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;
      } else {
        return -1;
      }
    } else if (bAsInt !== null) {
      return 1;
    } else {
      return a < b ? -1 : 1;
    }
  }
};
var stringCompare = function(a, b) {
  if (a === b) {
    return 0;
  } else if (a < b) {
    return -1;
  } else {
    return 1;
  }
};
var requireKey = function(key, obj) {
  if (obj && key in obj) {
    return obj[key];
  } else {
    throw new Error("Missing required key (" + key + ") in object: " + stringify(obj));
  }
};
var ObjectToUniqueKey = function(obj) {
  if (typeof obj !== "object" || obj === null) {
    return stringify(obj);
  }
  var keys = [];
  for (var k3 in obj) {
    keys.push(k3);
  }
  keys.sort();
  var key = "{";
  for (var i = 0; i < keys.length; i++) {
    if (i !== 0) {
      key += ",";
    }
    key += stringify(keys[i]);
    key += ":";
    key += ObjectToUniqueKey(obj[keys[i]]);
  }
  key += "}";
  return key;
};
var splitStringBySize = function(str, segsize) {
  var len = str.length;
  if (len <= segsize) {
    return [str];
  }
  var dataSegs = [];
  for (var c = 0; c < len; c += segsize) {
    if (c + segsize > len) {
      dataSegs.push(str.substring(c, len));
    } else {
      dataSegs.push(str.substring(c, c + segsize));
    }
  }
  return dataSegs;
};
function each(obj, fn2) {
  for (var key in obj) {
    if (obj.hasOwnProperty(key)) {
      fn2(key, obj[key]);
    }
  }
}
var doubleToIEEE754String = function(v2) {
  assert(!isInvalidJSONNumber(v2), "Invalid JSON number");
  var ebits = 11, fbits = 52;
  var bias = (1 << ebits - 1) - 1;
  var s, e, f, ln2, i;
  if (v2 === 0) {
    e = 0;
    f = 0;
    s = 1 / v2 === -Infinity ? 1 : 0;
  } else {
    s = v2 < 0;
    v2 = Math.abs(v2);
    if (v2 >= Math.pow(2, 1 - bias)) {
      ln2 = Math.min(Math.floor(Math.log(v2) / Math.LN2), bias);
      e = ln2 + bias;
      f = Math.round(v2 * Math.pow(2, fbits - ln2) - Math.pow(2, fbits));
    } else {
      e = 0;
      f = Math.round(v2 / Math.pow(2, 1 - bias - fbits));
    }
  }
  var bits = [];
  for (i = fbits; i; i -= 1) {
    bits.push(f % 2 ? 1 : 0);
    f = Math.floor(f / 2);
  }
  for (i = ebits; i; i -= 1) {
    bits.push(e % 2 ? 1 : 0);
    e = Math.floor(e / 2);
  }
  bits.push(s ? 1 : 0);
  bits.reverse();
  var str = bits.join("");
  var hexByteString = "";
  for (i = 0; i < 64; i += 8) {
    var hexByte = parseInt(str.substr(i, 8), 2).toString(16);
    if (hexByte.length === 1) {
      hexByte = "0" + hexByte;
    }
    hexByteString = hexByteString + hexByte;
  }
  return hexByteString.toLowerCase();
};
var isChromeExtensionContentScript = function() {
  return !!(typeof window === "object" && window["chrome"] && window["chrome"]["extension"] && !/^chrome/.test(window.location.href));
};
var isWindowsStoreApp = function() {
  return typeof Windows === "object" && typeof Windows.UI === "object";
};
function errorForServerCode(code, query2) {
  var reason = "Unknown Error";
  if (code === "too_big") {
    reason = "The data requested exceeds the maximum size that can be accessed with a single request.";
  } else if (code === "permission_denied") {
    reason = "Client doesn't have permission to access the desired data.";
  } else if (code === "unavailable") {
    reason = "The service is unavailable";
  }
  var error2 = new Error(code + " at " + query2._path.toString() + ": " + reason);
  error2.code = code.toUpperCase();
  return error2;
}
var INTEGER_REGEXP_ = new RegExp("^-?(0*)\\d{1,10}$");
var INTEGER_32_MIN = -2147483648;
var INTEGER_32_MAX = 2147483647;
var tryParseInt = function(str) {
  if (INTEGER_REGEXP_.test(str)) {
    var intVal = Number(str);
    if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {
      return intVal;
    }
  }
  return null;
};
var exceptionGuard = function(fn2) {
  try {
    fn2();
  } catch (e) {
    setTimeout(function() {
      var stack = e.stack || "";
      warn("Exception was thrown by user callback.", stack);
      throw e;
    }, Math.floor(0));
  }
};
var beingCrawled = function() {
  var userAgent = typeof window === "object" && window["navigator"] && window["navigator"]["userAgent"] || "";
  return userAgent.search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i) >= 0;
};
var setTimeoutNonBlocking = function(fn2, time) {
  var timeout = setTimeout(fn2, time);
  if (typeof timeout === "object" && timeout["unref"]) {
    timeout["unref"]();
  }
  return timeout;
};
var AppCheckTokenProvider = function() {
  function AppCheckTokenProvider2(appName_, appCheckProvider) {
    var _this = this;
    this.appName_ = appName_;
    this.appCheckProvider = appCheckProvider;
    this.appCheck = appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.getImmediate({ optional: true });
    if (!this.appCheck) {
      appCheckProvider === null || appCheckProvider === void 0 ? void 0 : appCheckProvider.get().then(function(appCheck) {
        return _this.appCheck = appCheck;
      });
    }
  }
  AppCheckTokenProvider2.prototype.getToken = function(forceRefresh) {
    var _this = this;
    if (!this.appCheck) {
      return new Promise(function(resolve, reject) {
        setTimeout(function() {
          if (_this.appCheck) {
            _this.getToken(forceRefresh).then(resolve, reject);
          } else {
            resolve(null);
          }
        }, 0);
      });
    }
    return this.appCheck.getToken(forceRefresh);
  };
  AppCheckTokenProvider2.prototype.addTokenChangeListener = function(listener) {
    var _a8;
    (_a8 = this.appCheckProvider) === null || _a8 === void 0 ? void 0 : _a8.get().then(function(appCheck) {
      return appCheck.addTokenListener(listener);
    });
  };
  AppCheckTokenProvider2.prototype.notifyForInvalidToken = function() {
    warn('Provided AppCheck credentials for the app named "' + this.appName_ + '" are invalid. This usually indicates your app was not initialized correctly.');
  };
  return AppCheckTokenProvider2;
}();
var FirebaseAuthTokenProvider = function() {
  function FirebaseAuthTokenProvider2(appName_, firebaseOptions_, authProvider_) {
    var _this = this;
    this.appName_ = appName_;
    this.firebaseOptions_ = firebaseOptions_;
    this.authProvider_ = authProvider_;
    this.auth_ = null;
    this.auth_ = authProvider_.getImmediate({ optional: true });
    if (!this.auth_) {
      authProvider_.onInit(function(auth) {
        return _this.auth_ = auth;
      });
    }
  }
  FirebaseAuthTokenProvider2.prototype.getToken = function(forceRefresh) {
    var _this = this;
    if (!this.auth_) {
      return new Promise(function(resolve, reject) {
        setTimeout(function() {
          if (_this.auth_) {
            _this.getToken(forceRefresh).then(resolve, reject);
          } else {
            resolve(null);
          }
        }, 0);
      });
    }
    return this.auth_.getToken(forceRefresh).catch(function(error2) {
      if (error2 && error2.code === "auth/token-not-initialized") {
        log("Got auth/token-not-initialized error.  Treating as null token.");
        return null;
      } else {
        return Promise.reject(error2);
      }
    });
  };
  FirebaseAuthTokenProvider2.prototype.addTokenChangeListener = function(listener) {
    if (this.auth_) {
      this.auth_.addAuthTokenListener(listener);
    } else {
      this.authProvider_.get().then(function(auth) {
        return auth.addAuthTokenListener(listener);
      });
    }
  };
  FirebaseAuthTokenProvider2.prototype.removeTokenChangeListener = function(listener) {
    this.authProvider_.get().then(function(auth) {
      return auth.removeAuthTokenListener(listener);
    });
  };
  FirebaseAuthTokenProvider2.prototype.notifyForInvalidToken = function() {
    var errorMessage = 'Provided authentication credentials for the app named "' + this.appName_ + '" are invalid. This usually indicates your app was not initialized correctly. ';
    if ("credential" in this.firebaseOptions_) {
      errorMessage += 'Make sure the "credential" property provided to initializeApp() is authorized to access the specified "databaseURL" and is from the correct project.';
    } else if ("serviceAccount" in this.firebaseOptions_) {
      errorMessage += 'Make sure the "serviceAccount" property provided to initializeApp() is authorized to access the specified "databaseURL" and is from the correct project.';
    } else {
      errorMessage += 'Make sure the "apiKey" and "databaseURL" properties provided to initializeApp() match the values provided for your app at https://console.firebase.google.com/.';
    }
    warn(errorMessage);
  };
  return FirebaseAuthTokenProvider2;
}();
var EmulatorTokenProvider = function() {
  function EmulatorTokenProvider2(accessToken) {
    this.accessToken = accessToken;
  }
  EmulatorTokenProvider2.prototype.getToken = function(forceRefresh) {
    return Promise.resolve({
      accessToken: this.accessToken
    });
  };
  EmulatorTokenProvider2.prototype.addTokenChangeListener = function(listener) {
    listener(this.accessToken);
  };
  EmulatorTokenProvider2.prototype.removeTokenChangeListener = function(listener) {
  };
  EmulatorTokenProvider2.prototype.notifyForInvalidToken = function() {
  };
  EmulatorTokenProvider2.OWNER = "owner";
  return EmulatorTokenProvider2;
}();
var PROTOCOL_VERSION = "5";
var VERSION_PARAM = "v";
var TRANSPORT_SESSION_PARAM = "s";
var REFERER_PARAM = "r";
var FORGE_REF = "f";
var FORGE_DOMAIN_RE = /(console\.firebase|firebase-console-\w+\.corp|firebase\.corp)\.google\.com/;
var LAST_SESSION_PARAM = "ls";
var APPLICATION_ID_PARAM = "p";
var APP_CHECK_TOKEN_PARAM = "ac";
var WEBSOCKET = "websocket";
var LONG_POLLING = "long_polling";
var RepoInfo = function() {
  function RepoInfo2(host, secure, namespace, webSocketOnly, nodeAdmin, persistenceKey, includeNamespaceInQueryParams) {
    if (nodeAdmin === void 0) {
      nodeAdmin = false;
    }
    if (persistenceKey === void 0) {
      persistenceKey = "";
    }
    if (includeNamespaceInQueryParams === void 0) {
      includeNamespaceInQueryParams = false;
    }
    this.secure = secure;
    this.namespace = namespace;
    this.webSocketOnly = webSocketOnly;
    this.nodeAdmin = nodeAdmin;
    this.persistenceKey = persistenceKey;
    this.includeNamespaceInQueryParams = includeNamespaceInQueryParams;
    this._host = host.toLowerCase();
    this._domain = this._host.substr(this._host.indexOf(".") + 1);
    this.internalHost = PersistentStorage.get("host:" + host) || this._host;
  }
  RepoInfo2.prototype.isCacheableHost = function() {
    return this.internalHost.substr(0, 2) === "s-";
  };
  RepoInfo2.prototype.isCustomHost = function() {
    return this._domain !== "firebaseio.com" && this._domain !== "firebaseio-demo.com";
  };
  Object.defineProperty(RepoInfo2.prototype, "host", {
    get: function() {
      return this._host;
    },
    set: function(newHost) {
      if (newHost !== this.internalHost) {
        this.internalHost = newHost;
        if (this.isCacheableHost()) {
          PersistentStorage.set("host:" + this._host, this.internalHost);
        }
      }
    },
    enumerable: false,
    configurable: true
  });
  RepoInfo2.prototype.toString = function() {
    var str = this.toURLString();
    if (this.persistenceKey) {
      str += "<" + this.persistenceKey + ">";
    }
    return str;
  };
  RepoInfo2.prototype.toURLString = function() {
    var protocol = this.secure ? "https://" : "http://";
    var query2 = this.includeNamespaceInQueryParams ? "?ns=" + this.namespace : "";
    return "" + protocol + this.host + "/" + query2;
  };
  return RepoInfo2;
}();
function repoInfoNeedsQueryParam(repoInfo) {
  return repoInfo.host !== repoInfo.internalHost || repoInfo.isCustomHost() || repoInfo.includeNamespaceInQueryParams;
}
function repoInfoConnectionURL(repoInfo, type, params) {
  assert(typeof type === "string", "typeof type must == string");
  assert(typeof params === "object", "typeof params must == object");
  var connURL;
  if (type === WEBSOCKET) {
    connURL = (repoInfo.secure ? "wss://" : "ws://") + repoInfo.internalHost + "/.ws?";
  } else if (type === LONG_POLLING) {
    connURL = (repoInfo.secure ? "https://" : "http://") + repoInfo.internalHost + "/.lp?";
  } else {
    throw new Error("Unknown connection type: " + type);
  }
  if (repoInfoNeedsQueryParam(repoInfo)) {
    params["ns"] = repoInfo.namespace;
  }
  var pairs = [];
  each(params, function(key, value) {
    pairs.push(key + "=" + value);
  });
  return connURL + pairs.join("&");
}
var StatsCollection = function() {
  function StatsCollection2() {
    this.counters_ = {};
  }
  StatsCollection2.prototype.incrementCounter = function(name10, amount) {
    if (amount === void 0) {
      amount = 1;
    }
    if (!contains(this.counters_, name10)) {
      this.counters_[name10] = 0;
    }
    this.counters_[name10] += amount;
  };
  StatsCollection2.prototype.get = function() {
    return deepCopy(this.counters_);
  };
  return StatsCollection2;
}();
var collections = {};
var reporters = {};
function statsManagerGetCollection(repoInfo) {
  var hashString = repoInfo.toString();
  if (!collections[hashString]) {
    collections[hashString] = new StatsCollection();
  }
  return collections[hashString];
}
function statsManagerGetOrCreateReporter(repoInfo, creatorFunction) {
  var hashString = repoInfo.toString();
  if (!reporters[hashString]) {
    reporters[hashString] = creatorFunction();
  }
  return reporters[hashString];
}
var PacketReceiver = function() {
  function PacketReceiver2(onMessage_) {
    this.onMessage_ = onMessage_;
    this.pendingResponses = [];
    this.currentResponseNum = 0;
    this.closeAfterResponse = -1;
    this.onClose = null;
  }
  PacketReceiver2.prototype.closeAfter = function(responseNum, callback) {
    this.closeAfterResponse = responseNum;
    this.onClose = callback;
    if (this.closeAfterResponse < this.currentResponseNum) {
      this.onClose();
      this.onClose = null;
    }
  };
  PacketReceiver2.prototype.handleResponse = function(requestNum, data) {
    var _this = this;
    this.pendingResponses[requestNum] = data;
    var _loop_1 = function() {
      var toProcess = this_1.pendingResponses[this_1.currentResponseNum];
      delete this_1.pendingResponses[this_1.currentResponseNum];
      var _loop_2 = function(i2) {
        if (toProcess[i2]) {
          exceptionGuard(function() {
            _this.onMessage_(toProcess[i2]);
          });
        }
      };
      for (var i = 0; i < toProcess.length; ++i) {
        _loop_2(i);
      }
      if (this_1.currentResponseNum === this_1.closeAfterResponse) {
        if (this_1.onClose) {
          this_1.onClose();
          this_1.onClose = null;
        }
        return "break";
      }
      this_1.currentResponseNum++;
    };
    var this_1 = this;
    while (this.pendingResponses[this.currentResponseNum]) {
      var state_1 = _loop_1();
      if (state_1 === "break")
        break;
    }
  };
  return PacketReceiver2;
}();
var FIREBASE_LONGPOLL_START_PARAM = "start";
var FIREBASE_LONGPOLL_CLOSE_COMMAND = "close";
var FIREBASE_LONGPOLL_COMMAND_CB_NAME = "pLPCommand";
var FIREBASE_LONGPOLL_DATA_CB_NAME = "pRTLPCB";
var FIREBASE_LONGPOLL_ID_PARAM = "id";
var FIREBASE_LONGPOLL_PW_PARAM = "pw";
var FIREBASE_LONGPOLL_SERIAL_PARAM = "ser";
var FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = "cb";
var FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = "seg";
var FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = "ts";
var FIREBASE_LONGPOLL_DATA_PARAM = "d";
var FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = "dframe";
var MAX_URL_DATA_SIZE = 1870;
var SEG_HEADER_SIZE = 30;
var MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;
var KEEPALIVE_REQUEST_INTERVAL = 25e3;
var LP_CONNECT_TIMEOUT = 3e4;
var BrowserPollConnection = function() {
  function BrowserPollConnection2(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {
    var _this = this;
    this.connId = connId;
    this.repoInfo = repoInfo;
    this.applicationId = applicationId;
    this.appCheckToken = appCheckToken;
    this.authToken = authToken;
    this.transportSessionId = transportSessionId;
    this.lastSessionId = lastSessionId;
    this.bytesSent = 0;
    this.bytesReceived = 0;
    this.everConnected_ = false;
    this.log_ = logWrapper(connId);
    this.stats_ = statsManagerGetCollection(repoInfo);
    this.urlFn = function(params) {
      if (_this.appCheckToken) {
        params[APP_CHECK_TOKEN_PARAM] = _this.appCheckToken;
      }
      return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);
    };
  }
  BrowserPollConnection2.prototype.open = function(onMessage, onDisconnect) {
    var _this = this;
    this.curSegmentNum = 0;
    this.onDisconnect_ = onDisconnect;
    this.myPacketOrderer = new PacketReceiver(onMessage);
    this.isClosed_ = false;
    this.connectTimeoutTimer_ = setTimeout(function() {
      _this.log_("Timed out trying to connect.");
      _this.onClosed_();
      _this.connectTimeoutTimer_ = null;
    }, Math.floor(LP_CONNECT_TIMEOUT));
    executeWhenDOMReady(function() {
      if (_this.isClosed_) {
        return;
      }
      _this.scriptTagHolder = new FirebaseIFrameScriptHolder(function() {
        var args = [];
        for (var _i2 = 0; _i2 < arguments.length; _i2++) {
          args[_i2] = arguments[_i2];
        }
        var _a8 = __read(args, 5), command = _a8[0], arg1 = _a8[1], arg2 = _a8[2];
        _a8[3];
        _a8[4];
        _this.incrementIncomingBytes_(args);
        if (!_this.scriptTagHolder) {
          return;
        }
        if (_this.connectTimeoutTimer_) {
          clearTimeout(_this.connectTimeoutTimer_);
          _this.connectTimeoutTimer_ = null;
        }
        _this.everConnected_ = true;
        if (command === FIREBASE_LONGPOLL_START_PARAM) {
          _this.id = arg1;
          _this.password = arg2;
        } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {
          if (arg1) {
            _this.scriptTagHolder.sendNewPolls = false;
            _this.myPacketOrderer.closeAfter(arg1, function() {
              _this.onClosed_();
            });
          } else {
            _this.onClosed_();
          }
        } else {
          throw new Error("Unrecognized command received: " + command);
        }
      }, function() {
        var args = [];
        for (var _i2 = 0; _i2 < arguments.length; _i2++) {
          args[_i2] = arguments[_i2];
        }
        var _a8 = __read(args, 2), pN = _a8[0], data = _a8[1];
        _this.incrementIncomingBytes_(args);
        _this.myPacketOrderer.handleResponse(pN, data);
      }, function() {
        _this.onClosed_();
      }, _this.urlFn);
      var urlParams = {};
      urlParams[FIREBASE_LONGPOLL_START_PARAM] = "t";
      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(Math.random() * 1e8);
      if (_this.scriptTagHolder.uniqueCallbackIdentifier) {
        urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] = _this.scriptTagHolder.uniqueCallbackIdentifier;
      }
      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;
      if (_this.transportSessionId) {
        urlParams[TRANSPORT_SESSION_PARAM] = _this.transportSessionId;
      }
      if (_this.lastSessionId) {
        urlParams[LAST_SESSION_PARAM] = _this.lastSessionId;
      }
      if (_this.applicationId) {
        urlParams[APPLICATION_ID_PARAM] = _this.applicationId;
      }
      if (_this.appCheckToken) {
        urlParams[APP_CHECK_TOKEN_PARAM] = _this.appCheckToken;
      }
      if (typeof location !== "undefined" && location.hostname && FORGE_DOMAIN_RE.test(location.hostname)) {
        urlParams[REFERER_PARAM] = FORGE_REF;
      }
      var connectURL = _this.urlFn(urlParams);
      _this.log_("Connecting via long-poll to " + connectURL);
      _this.scriptTagHolder.addTag(connectURL, function() {
      });
    });
  };
  BrowserPollConnection2.prototype.start = function() {
    this.scriptTagHolder.startLongPoll(this.id, this.password);
    this.addDisconnectPingFrame(this.id, this.password);
  };
  BrowserPollConnection2.forceAllow = function() {
    BrowserPollConnection2.forceAllow_ = true;
  };
  BrowserPollConnection2.forceDisallow = function() {
    BrowserPollConnection2.forceDisallow_ = true;
  };
  BrowserPollConnection2.isAvailable = function() {
    if (isNodeSdk()) {
      return false;
    } else if (BrowserPollConnection2.forceAllow_) {
      return true;
    } else {
      return !BrowserPollConnection2.forceDisallow_ && typeof document !== "undefined" && document.createElement != null && !isChromeExtensionContentScript() && !isWindowsStoreApp();
    }
  };
  BrowserPollConnection2.prototype.markConnectionHealthy = function() {
  };
  BrowserPollConnection2.prototype.shutdown_ = function() {
    this.isClosed_ = true;
    if (this.scriptTagHolder) {
      this.scriptTagHolder.close();
      this.scriptTagHolder = null;
    }
    if (this.myDisconnFrame) {
      document.body.removeChild(this.myDisconnFrame);
      this.myDisconnFrame = null;
    }
    if (this.connectTimeoutTimer_) {
      clearTimeout(this.connectTimeoutTimer_);
      this.connectTimeoutTimer_ = null;
    }
  };
  BrowserPollConnection2.prototype.onClosed_ = function() {
    if (!this.isClosed_) {
      this.log_("Longpoll is closing itself");
      this.shutdown_();
      if (this.onDisconnect_) {
        this.onDisconnect_(this.everConnected_);
        this.onDisconnect_ = null;
      }
    }
  };
  BrowserPollConnection2.prototype.close = function() {
    if (!this.isClosed_) {
      this.log_("Longpoll is being closed.");
      this.shutdown_();
    }
  };
  BrowserPollConnection2.prototype.send = function(data) {
    var dataStr = stringify(data);
    this.bytesSent += dataStr.length;
    this.stats_.incrementCounter("bytes_sent", dataStr.length);
    var base64data = base64Encode(dataStr);
    var dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);
    for (var i = 0; i < dataSegs.length; i++) {
      this.scriptTagHolder.enqueueSegment(this.curSegmentNum, dataSegs.length, dataSegs[i]);
      this.curSegmentNum++;
    }
  };
  BrowserPollConnection2.prototype.addDisconnectPingFrame = function(id2, pw) {
    if (isNodeSdk()) {
      return;
    }
    this.myDisconnFrame = document.createElement("iframe");
    var urlParams = {};
    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = "t";
    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id2;
    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;
    this.myDisconnFrame.src = this.urlFn(urlParams);
    this.myDisconnFrame.style.display = "none";
    document.body.appendChild(this.myDisconnFrame);
  };
  BrowserPollConnection2.prototype.incrementIncomingBytes_ = function(args) {
    var bytesReceived = stringify(args).length;
    this.bytesReceived += bytesReceived;
    this.stats_.incrementCounter("bytes_received", bytesReceived);
  };
  return BrowserPollConnection2;
}();
var FirebaseIFrameScriptHolder = function() {
  function FirebaseIFrameScriptHolder2(commandCB, onMessageCB, onDisconnect, urlFn) {
    this.onDisconnect = onDisconnect;
    this.urlFn = urlFn;
    this.outstandingRequests = new Set();
    this.pendingSegs = [];
    this.currentSerial = Math.floor(Math.random() * 1e8);
    this.sendNewPolls = true;
    if (!isNodeSdk()) {
      this.uniqueCallbackIdentifier = LUIDGenerator();
      window[FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier] = commandCB;
      window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] = onMessageCB;
      this.myIFrame = FirebaseIFrameScriptHolder2.createIFrame_();
      var script = "";
      if (this.myIFrame.src && this.myIFrame.src.substr(0, "javascript:".length) === "javascript:") {
        var currentDomain = document.domain;
        script = '<script>document.domain="' + currentDomain + '";<\/script>';
      }
      var iframeContents = "<html><body>" + script + "</body></html>";
      try {
        this.myIFrame.doc.open();
        this.myIFrame.doc.write(iframeContents);
        this.myIFrame.doc.close();
      } catch (e) {
        log("frame writing exception");
        if (e.stack) {
          log(e.stack);
        }
        log(e);
      }
    } else {
      this.commandCB = commandCB;
      this.onMessageCB = onMessageCB;
    }
  }
  FirebaseIFrameScriptHolder2.createIFrame_ = function() {
    var iframe = document.createElement("iframe");
    iframe.style.display = "none";
    if (document.body) {
      document.body.appendChild(iframe);
      try {
        var a = iframe.contentWindow.document;
        if (!a) {
          log("No IE domain setting required");
        }
      } catch (e) {
        var domain = document.domain;
        iframe.src = "javascript:void((function(){document.open();document.domain='" + domain + "';document.close();})())";
      }
    } else {
      throw "Document body has not initialized. Wait to initialize Firebase until after the document is ready.";
    }
    if (iframe.contentDocument) {
      iframe.doc = iframe.contentDocument;
    } else if (iframe.contentWindow) {
      iframe.doc = iframe.contentWindow.document;
    } else if (iframe.document) {
      iframe.doc = iframe.document;
    }
    return iframe;
  };
  FirebaseIFrameScriptHolder2.prototype.close = function() {
    var _this = this;
    this.alive = false;
    if (this.myIFrame) {
      this.myIFrame.doc.body.innerHTML = "";
      setTimeout(function() {
        if (_this.myIFrame !== null) {
          document.body.removeChild(_this.myIFrame);
          _this.myIFrame = null;
        }
      }, Math.floor(0));
    }
    var onDisconnect = this.onDisconnect;
    if (onDisconnect) {
      this.onDisconnect = null;
      onDisconnect();
    }
  };
  FirebaseIFrameScriptHolder2.prototype.startLongPoll = function(id2, pw) {
    this.myID = id2;
    this.myPW = pw;
    this.alive = true;
    while (this.newRequest_()) {
    }
  };
  FirebaseIFrameScriptHolder2.prototype.newRequest_ = function() {
    if (this.alive && this.sendNewPolls && this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)) {
      this.currentSerial++;
      var urlParams = {};
      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;
      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;
      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;
      var theURL = this.urlFn(urlParams);
      var curDataString = "";
      var i = 0;
      while (this.pendingSegs.length > 0) {
        var nextSeg = this.pendingSegs[0];
        if (nextSeg.d.length + SEG_HEADER_SIZE + curDataString.length <= MAX_URL_DATA_SIZE) {
          var theSeg = this.pendingSegs.shift();
          curDataString = curDataString + "&" + FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM + i + "=" + theSeg.seg + "&" + FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET + i + "=" + theSeg.ts + "&" + FIREBASE_LONGPOLL_DATA_PARAM + i + "=" + theSeg.d;
          i++;
        } else {
          break;
        }
      }
      theURL = theURL + curDataString;
      this.addLongPollTag_(theURL, this.currentSerial);
      return true;
    } else {
      return false;
    }
  };
  FirebaseIFrameScriptHolder2.prototype.enqueueSegment = function(segnum, totalsegs, data) {
    this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });
    if (this.alive) {
      this.newRequest_();
    }
  };
  FirebaseIFrameScriptHolder2.prototype.addLongPollTag_ = function(url, serial) {
    var _this = this;
    this.outstandingRequests.add(serial);
    var doNewRequest = function() {
      _this.outstandingRequests.delete(serial);
      _this.newRequest_();
    };
    var keepaliveTimeout = setTimeout(doNewRequest, Math.floor(KEEPALIVE_REQUEST_INTERVAL));
    var readyStateCB = function() {
      clearTimeout(keepaliveTimeout);
      doNewRequest();
    };
    this.addTag(url, readyStateCB);
  };
  FirebaseIFrameScriptHolder2.prototype.addTag = function(url, loadCB) {
    var _this = this;
    if (isNodeSdk()) {
      this.doNodeLongPoll(url, loadCB);
    } else {
      setTimeout(function() {
        try {
          if (!_this.sendNewPolls) {
            return;
          }
          var newScript_1 = _this.myIFrame.doc.createElement("script");
          newScript_1.type = "text/javascript";
          newScript_1.async = true;
          newScript_1.src = url;
          newScript_1.onload = newScript_1.onreadystatechange = function() {
            var rstate = newScript_1.readyState;
            if (!rstate || rstate === "loaded" || rstate === "complete") {
              newScript_1.onload = newScript_1.onreadystatechange = null;
              if (newScript_1.parentNode) {
                newScript_1.parentNode.removeChild(newScript_1);
              }
              loadCB();
            }
          };
          newScript_1.onerror = function() {
            log("Long-poll script failed to load: " + url);
            _this.sendNewPolls = false;
            _this.close();
          };
          _this.myIFrame.doc.body.appendChild(newScript_1);
        } catch (e) {
        }
      }, Math.floor(1));
    }
  };
  return FirebaseIFrameScriptHolder2;
}();
var WEBSOCKET_MAX_FRAME_SIZE = 16384;
var WEBSOCKET_KEEPALIVE_INTERVAL = 45e3;
var WebSocketImpl = null;
if (typeof MozWebSocket !== "undefined") {
  WebSocketImpl = MozWebSocket;
} else if (typeof WebSocket !== "undefined") {
  WebSocketImpl = WebSocket;
}
var WebSocketConnection = function() {
  function WebSocketConnection2(connId, repoInfo, applicationId, appCheckToken, authToken, transportSessionId, lastSessionId) {
    this.connId = connId;
    this.applicationId = applicationId;
    this.appCheckToken = appCheckToken;
    this.authToken = authToken;
    this.keepaliveTimer = null;
    this.frames = null;
    this.totalFrames = 0;
    this.bytesSent = 0;
    this.bytesReceived = 0;
    this.log_ = logWrapper(this.connId);
    this.stats_ = statsManagerGetCollection(repoInfo);
    this.connURL = WebSocketConnection2.connectionURL_(repoInfo, transportSessionId, lastSessionId, appCheckToken);
    this.nodeAdmin = repoInfo.nodeAdmin;
  }
  WebSocketConnection2.connectionURL_ = function(repoInfo, transportSessionId, lastSessionId, appCheckToken) {
    var urlParams = {};
    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;
    if (!isNodeSdk() && typeof location !== "undefined" && location.hostname && FORGE_DOMAIN_RE.test(location.hostname)) {
      urlParams[REFERER_PARAM] = FORGE_REF;
    }
    if (transportSessionId) {
      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;
    }
    if (lastSessionId) {
      urlParams[LAST_SESSION_PARAM] = lastSessionId;
    }
    if (appCheckToken) {
      urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;
    }
    return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);
  };
  WebSocketConnection2.prototype.open = function(onMessage, onDisconnect) {
    var _this = this;
    this.onDisconnect = onDisconnect;
    this.onMessage = onMessage;
    this.log_("Websocket connecting to " + this.connURL);
    this.everConnected_ = false;
    PersistentStorage.set("previous_websocket_failure", true);
    try {
      if (isNodeSdk()) {
        var device = this.nodeAdmin ? "AdminNode" : "Node";
        var options = {
          headers: {
            "User-Agent": "Firebase/" + PROTOCOL_VERSION + "/" + SDK_VERSION + "/" + process.platform + "/" + device,
            "X-Firebase-GMPID": this.applicationId || ""
          }
        };
        if (this.authToken) {
          options.headers["Authorization"] = "Bearer " + this.authToken;
        }
        if (this.appCheckToken) {
          options.headers["X-Firebase-AppCheck"] = this.appCheckToken;
        }
        var env = process["env"];
        var proxy = this.connURL.indexOf("wss://") === 0 ? env["HTTPS_PROXY"] || env["https_proxy"] : env["HTTP_PROXY"] || env["http_proxy"];
        if (proxy) {
          options["proxy"] = { origin: proxy };
        }
        this.mySock = new WebSocketImpl(this.connURL, [], options);
      } else {
        var options = {
          headers: {
            "X-Firebase-GMPID": this.applicationId || "",
            "X-Firebase-AppCheck": this.appCheckToken || ""
          }
        };
        this.mySock = new WebSocketImpl(this.connURL, [], options);
      }
    } catch (e) {
      this.log_("Error instantiating WebSocket.");
      var error2 = e.message || e.data;
      if (error2) {
        this.log_(error2);
      }
      this.onClosed_();
      return;
    }
    this.mySock.onopen = function() {
      _this.log_("Websocket connected.");
      _this.everConnected_ = true;
    };
    this.mySock.onclose = function() {
      _this.log_("Websocket connection was disconnected.");
      _this.mySock = null;
      _this.onClosed_();
    };
    this.mySock.onmessage = function(m) {
      _this.handleIncomingFrame(m);
    };
    this.mySock.onerror = function(e) {
      _this.log_("WebSocket error.  Closing connection.");
      var error3 = e.message || e.data;
      if (error3) {
        _this.log_(error3);
      }
      _this.onClosed_();
    };
  };
  WebSocketConnection2.prototype.start = function() {
  };
  WebSocketConnection2.forceDisallow = function() {
    WebSocketConnection2.forceDisallow_ = true;
  };
  WebSocketConnection2.isAvailable = function() {
    var isOldAndroid = false;
    if (typeof navigator !== "undefined" && navigator.userAgent) {
      var oldAndroidRegex = /Android ([0-9]{0,}\.[0-9]{0,})/;
      var oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);
      if (oldAndroidMatch && oldAndroidMatch.length > 1) {
        if (parseFloat(oldAndroidMatch[1]) < 4.4) {
          isOldAndroid = true;
        }
      }
    }
    return !isOldAndroid && WebSocketImpl !== null && !WebSocketConnection2.forceDisallow_;
  };
  WebSocketConnection2.previouslyFailed = function() {
    return PersistentStorage.isInMemoryStorage || PersistentStorage.get("previous_websocket_failure") === true;
  };
  WebSocketConnection2.prototype.markConnectionHealthy = function() {
    PersistentStorage.remove("previous_websocket_failure");
  };
  WebSocketConnection2.prototype.appendFrame_ = function(data) {
    this.frames.push(data);
    if (this.frames.length === this.totalFrames) {
      var fullMess = this.frames.join("");
      this.frames = null;
      var jsonMess = jsonEval(fullMess);
      this.onMessage(jsonMess);
    }
  };
  WebSocketConnection2.prototype.handleNewFrameCount_ = function(frameCount) {
    this.totalFrames = frameCount;
    this.frames = [];
  };
  WebSocketConnection2.prototype.extractFrameCount_ = function(data) {
    assert(this.frames === null, "We already have a frame buffer");
    if (data.length <= 6) {
      var frameCount = Number(data);
      if (!isNaN(frameCount)) {
        this.handleNewFrameCount_(frameCount);
        return null;
      }
    }
    this.handleNewFrameCount_(1);
    return data;
  };
  WebSocketConnection2.prototype.handleIncomingFrame = function(mess) {
    if (this.mySock === null) {
      return;
    }
    var data = mess["data"];
    this.bytesReceived += data.length;
    this.stats_.incrementCounter("bytes_received", data.length);
    this.resetKeepAlive();
    if (this.frames !== null) {
      this.appendFrame_(data);
    } else {
      var remainingData = this.extractFrameCount_(data);
      if (remainingData !== null) {
        this.appendFrame_(remainingData);
      }
    }
  };
  WebSocketConnection2.prototype.send = function(data) {
    this.resetKeepAlive();
    var dataStr = stringify(data);
    this.bytesSent += dataStr.length;
    this.stats_.incrementCounter("bytes_sent", dataStr.length);
    var dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);
    if (dataSegs.length > 1) {
      this.sendString_(String(dataSegs.length));
    }
    for (var i = 0; i < dataSegs.length; i++) {
      this.sendString_(dataSegs[i]);
    }
  };
  WebSocketConnection2.prototype.shutdown_ = function() {
    this.isClosed_ = true;
    if (this.keepaliveTimer) {
      clearInterval(this.keepaliveTimer);
      this.keepaliveTimer = null;
    }
    if (this.mySock) {
      this.mySock.close();
      this.mySock = null;
    }
  };
  WebSocketConnection2.prototype.onClosed_ = function() {
    if (!this.isClosed_) {
      this.log_("WebSocket is closing itself");
      this.shutdown_();
      if (this.onDisconnect) {
        this.onDisconnect(this.everConnected_);
        this.onDisconnect = null;
      }
    }
  };
  WebSocketConnection2.prototype.close = function() {
    if (!this.isClosed_) {
      this.log_("WebSocket is being closed");
      this.shutdown_();
    }
  };
  WebSocketConnection2.prototype.resetKeepAlive = function() {
    var _this = this;
    clearInterval(this.keepaliveTimer);
    this.keepaliveTimer = setInterval(function() {
      if (_this.mySock) {
        _this.sendString_("0");
      }
      _this.resetKeepAlive();
    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL));
  };
  WebSocketConnection2.prototype.sendString_ = function(str) {
    try {
      this.mySock.send(str);
    } catch (e) {
      this.log_("Exception thrown from WebSocket.send():", e.message || e.data, "Closing connection.");
      setTimeout(this.onClosed_.bind(this), 0);
    }
  };
  WebSocketConnection2.responsesRequiredToBeHealthy = 2;
  WebSocketConnection2.healthyTimeout = 3e4;
  return WebSocketConnection2;
}();
var TransportManager = function() {
  function TransportManager2(repoInfo) {
    this.initTransports_(repoInfo);
  }
  Object.defineProperty(TransportManager2, "ALL_TRANSPORTS", {
    get: function() {
      return [BrowserPollConnection, WebSocketConnection];
    },
    enumerable: false,
    configurable: true
  });
  TransportManager2.prototype.initTransports_ = function(repoInfo) {
    var e_1, _a8;
    var isWebSocketsAvailable2 = WebSocketConnection && WebSocketConnection["isAvailable"]();
    var isSkipPollConnection = isWebSocketsAvailable2 && !WebSocketConnection.previouslyFailed();
    if (repoInfo.webSocketOnly) {
      if (!isWebSocketsAvailable2) {
        warn("wss:// URL used, but browser isn't known to support websockets.  Trying anyway.");
      }
      isSkipPollConnection = true;
    }
    if (isSkipPollConnection) {
      this.transports_ = [WebSocketConnection];
    } else {
      var transports = this.transports_ = [];
      try {
        for (var _b = __values(TransportManager2.ALL_TRANSPORTS), _c2 = _b.next(); !_c2.done; _c2 = _b.next()) {
          var transport = _c2.value;
          if (transport && transport["isAvailable"]()) {
            transports.push(transport);
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c2 && !_c2.done && (_a8 = _b.return))
            _a8.call(_b);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
    }
  };
  TransportManager2.prototype.initialTransport = function() {
    if (this.transports_.length > 0) {
      return this.transports_[0];
    } else {
      throw new Error("No transports available");
    }
  };
  TransportManager2.prototype.upgradeTransport = function() {
    if (this.transports_.length > 1) {
      return this.transports_[1];
    } else {
      return null;
    }
  };
  return TransportManager2;
}();
var UPGRADE_TIMEOUT = 6e4;
var DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5e3;
var BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;
var BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;
var MESSAGE_TYPE = "t";
var MESSAGE_DATA = "d";
var CONTROL_SHUTDOWN = "s";
var CONTROL_RESET = "r";
var CONTROL_ERROR = "e";
var CONTROL_PONG = "o";
var SWITCH_ACK = "a";
var END_TRANSMISSION = "n";
var PING = "p";
var SERVER_HELLO = "h";
var Connection = function() {
  function Connection2(id2, repoInfo_, applicationId_, appCheckToken_, authToken_, onMessage_, onReady_, onDisconnect_, onKill_, lastSessionId) {
    this.id = id2;
    this.repoInfo_ = repoInfo_;
    this.applicationId_ = applicationId_;
    this.appCheckToken_ = appCheckToken_;
    this.authToken_ = authToken_;
    this.onMessage_ = onMessage_;
    this.onReady_ = onReady_;
    this.onDisconnect_ = onDisconnect_;
    this.onKill_ = onKill_;
    this.lastSessionId = lastSessionId;
    this.connectionCount = 0;
    this.pendingDataMessages = [];
    this.state_ = 0;
    this.log_ = logWrapper("c:" + this.id + ":");
    this.transportManager_ = new TransportManager(repoInfo_);
    this.log_("Connection created");
    this.start_();
  }
  Connection2.prototype.start_ = function() {
    var _this = this;
    var conn = this.transportManager_.initialTransport();
    this.conn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, null, this.lastSessionId);
    this.primaryResponsesRequired_ = conn["responsesRequiredToBeHealthy"] || 0;
    var onMessageReceived = this.connReceiver_(this.conn_);
    var onConnectionLost = this.disconnReceiver_(this.conn_);
    this.tx_ = this.conn_;
    this.rx_ = this.conn_;
    this.secondaryConn_ = null;
    this.isHealthy_ = false;
    setTimeout(function() {
      _this.conn_ && _this.conn_.open(onMessageReceived, onConnectionLost);
    }, Math.floor(0));
    var healthyTimeoutMS = conn["healthyTimeout"] || 0;
    if (healthyTimeoutMS > 0) {
      this.healthyTimeout_ = setTimeoutNonBlocking(function() {
        _this.healthyTimeout_ = null;
        if (!_this.isHealthy_) {
          if (_this.conn_ && _this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE) {
            _this.log_("Connection exceeded healthy timeout but has received " + _this.conn_.bytesReceived + " bytes.  Marking connection healthy.");
            _this.isHealthy_ = true;
            _this.conn_.markConnectionHealthy();
          } else if (_this.conn_ && _this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE) {
            _this.log_("Connection exceeded healthy timeout but has sent " + _this.conn_.bytesSent + " bytes.  Leaving connection alive.");
          } else {
            _this.log_("Closing unhealthy connection after timeout.");
            _this.close();
          }
        }
      }, Math.floor(healthyTimeoutMS));
    }
  };
  Connection2.prototype.nextTransportId_ = function() {
    return "c:" + this.id + ":" + this.connectionCount++;
  };
  Connection2.prototype.disconnReceiver_ = function(conn) {
    var _this = this;
    return function(everConnected) {
      if (conn === _this.conn_) {
        _this.onConnectionLost_(everConnected);
      } else if (conn === _this.secondaryConn_) {
        _this.log_("Secondary connection lost.");
        _this.onSecondaryConnectionLost_();
      } else {
        _this.log_("closing an old connection");
      }
    };
  };
  Connection2.prototype.connReceiver_ = function(conn) {
    var _this = this;
    return function(message) {
      if (_this.state_ !== 2) {
        if (conn === _this.rx_) {
          _this.onPrimaryMessageReceived_(message);
        } else if (conn === _this.secondaryConn_) {
          _this.onSecondaryMessageReceived_(message);
        } else {
          _this.log_("message on old connection");
        }
      }
    };
  };
  Connection2.prototype.sendRequest = function(dataMsg) {
    var msg = { t: "d", d: dataMsg };
    this.sendData_(msg);
  };
  Connection2.prototype.tryCleanupConnection = function() {
    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {
      this.log_("cleaning up and promoting a connection: " + this.secondaryConn_.connId);
      this.conn_ = this.secondaryConn_;
      this.secondaryConn_ = null;
    }
  };
  Connection2.prototype.onSecondaryControl_ = function(controlData) {
    if (MESSAGE_TYPE in controlData) {
      var cmd = controlData[MESSAGE_TYPE];
      if (cmd === SWITCH_ACK) {
        this.upgradeIfSecondaryHealthy_();
      } else if (cmd === CONTROL_RESET) {
        this.log_("Got a reset on secondary, closing it");
        this.secondaryConn_.close();
        if (this.tx_ === this.secondaryConn_ || this.rx_ === this.secondaryConn_) {
          this.close();
        }
      } else if (cmd === CONTROL_PONG) {
        this.log_("got pong on secondary.");
        this.secondaryResponsesRequired_--;
        this.upgradeIfSecondaryHealthy_();
      }
    }
  };
  Connection2.prototype.onSecondaryMessageReceived_ = function(parsedData) {
    var layer = requireKey("t", parsedData);
    var data = requireKey("d", parsedData);
    if (layer === "c") {
      this.onSecondaryControl_(data);
    } else if (layer === "d") {
      this.pendingDataMessages.push(data);
    } else {
      throw new Error("Unknown protocol layer: " + layer);
    }
  };
  Connection2.prototype.upgradeIfSecondaryHealthy_ = function() {
    if (this.secondaryResponsesRequired_ <= 0) {
      this.log_("Secondary connection is healthy.");
      this.isHealthy_ = true;
      this.secondaryConn_.markConnectionHealthy();
      this.proceedWithUpgrade_();
    } else {
      this.log_("sending ping on secondary.");
      this.secondaryConn_.send({ t: "c", d: { t: PING, d: {} } });
    }
  };
  Connection2.prototype.proceedWithUpgrade_ = function() {
    this.secondaryConn_.start();
    this.log_("sending client ack on secondary");
    this.secondaryConn_.send({ t: "c", d: { t: SWITCH_ACK, d: {} } });
    this.log_("Ending transmission on primary");
    this.conn_.send({ t: "c", d: { t: END_TRANSMISSION, d: {} } });
    this.tx_ = this.secondaryConn_;
    this.tryCleanupConnection();
  };
  Connection2.prototype.onPrimaryMessageReceived_ = function(parsedData) {
    var layer = requireKey("t", parsedData);
    var data = requireKey("d", parsedData);
    if (layer === "c") {
      this.onControl_(data);
    } else if (layer === "d") {
      this.onDataMessage_(data);
    }
  };
  Connection2.prototype.onDataMessage_ = function(message) {
    this.onPrimaryResponse_();
    this.onMessage_(message);
  };
  Connection2.prototype.onPrimaryResponse_ = function() {
    if (!this.isHealthy_) {
      this.primaryResponsesRequired_--;
      if (this.primaryResponsesRequired_ <= 0) {
        this.log_("Primary connection is healthy.");
        this.isHealthy_ = true;
        this.conn_.markConnectionHealthy();
      }
    }
  };
  Connection2.prototype.onControl_ = function(controlData) {
    var cmd = requireKey(MESSAGE_TYPE, controlData);
    if (MESSAGE_DATA in controlData) {
      var payload = controlData[MESSAGE_DATA];
      if (cmd === SERVER_HELLO) {
        this.onHandshake_(payload);
      } else if (cmd === END_TRANSMISSION) {
        this.log_("recvd end transmission on primary");
        this.rx_ = this.secondaryConn_;
        for (var i = 0; i < this.pendingDataMessages.length; ++i) {
          this.onDataMessage_(this.pendingDataMessages[i]);
        }
        this.pendingDataMessages = [];
        this.tryCleanupConnection();
      } else if (cmd === CONTROL_SHUTDOWN) {
        this.onConnectionShutdown_(payload);
      } else if (cmd === CONTROL_RESET) {
        this.onReset_(payload);
      } else if (cmd === CONTROL_ERROR) {
        error("Server Error: " + payload);
      } else if (cmd === CONTROL_PONG) {
        this.log_("got pong on primary.");
        this.onPrimaryResponse_();
        this.sendPingOnPrimaryIfNecessary_();
      } else {
        error("Unknown control packet command: " + cmd);
      }
    }
  };
  Connection2.prototype.onHandshake_ = function(handshake) {
    var timestamp = handshake.ts;
    var version10 = handshake.v;
    var host = handshake.h;
    this.sessionId = handshake.s;
    this.repoInfo_.host = host;
    if (this.state_ === 0) {
      this.conn_.start();
      this.onConnectionEstablished_(this.conn_, timestamp);
      if (PROTOCOL_VERSION !== version10) {
        warn("Protocol version mismatch detected");
      }
      this.tryStartUpgrade_();
    }
  };
  Connection2.prototype.tryStartUpgrade_ = function() {
    var conn = this.transportManager_.upgradeTransport();
    if (conn) {
      this.startUpgrade_(conn);
    }
  };
  Connection2.prototype.startUpgrade_ = function(conn) {
    var _this = this;
    this.secondaryConn_ = new conn(this.nextTransportId_(), this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, this.sessionId);
    this.secondaryResponsesRequired_ = conn["responsesRequiredToBeHealthy"] || 0;
    var onMessage = this.connReceiver_(this.secondaryConn_);
    var onDisconnect = this.disconnReceiver_(this.secondaryConn_);
    this.secondaryConn_.open(onMessage, onDisconnect);
    setTimeoutNonBlocking(function() {
      if (_this.secondaryConn_) {
        _this.log_("Timed out trying to upgrade.");
        _this.secondaryConn_.close();
      }
    }, Math.floor(UPGRADE_TIMEOUT));
  };
  Connection2.prototype.onReset_ = function(host) {
    this.log_("Reset packet received.  New host: " + host);
    this.repoInfo_.host = host;
    if (this.state_ === 1) {
      this.close();
    } else {
      this.closeConnections_();
      this.start_();
    }
  };
  Connection2.prototype.onConnectionEstablished_ = function(conn, timestamp) {
    var _this = this;
    this.log_("Realtime connection established.");
    this.conn_ = conn;
    this.state_ = 1;
    if (this.onReady_) {
      this.onReady_(timestamp, this.sessionId);
      this.onReady_ = null;
    }
    if (this.primaryResponsesRequired_ === 0) {
      this.log_("Primary connection is healthy.");
      this.isHealthy_ = true;
    } else {
      setTimeoutNonBlocking(function() {
        _this.sendPingOnPrimaryIfNecessary_();
      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));
    }
  };
  Connection2.prototype.sendPingOnPrimaryIfNecessary_ = function() {
    if (!this.isHealthy_ && this.state_ === 1) {
      this.log_("sending ping on primary.");
      this.sendData_({ t: "c", d: { t: PING, d: {} } });
    }
  };
  Connection2.prototype.onSecondaryConnectionLost_ = function() {
    var conn = this.secondaryConn_;
    this.secondaryConn_ = null;
    if (this.tx_ === conn || this.rx_ === conn) {
      this.close();
    }
  };
  Connection2.prototype.onConnectionLost_ = function(everConnected) {
    this.conn_ = null;
    if (!everConnected && this.state_ === 0) {
      this.log_("Realtime connection failed.");
      if (this.repoInfo_.isCacheableHost()) {
        PersistentStorage.remove("host:" + this.repoInfo_.host);
        this.repoInfo_.internalHost = this.repoInfo_.host;
      }
    } else if (this.state_ === 1) {
      this.log_("Realtime connection lost.");
    }
    this.close();
  };
  Connection2.prototype.onConnectionShutdown_ = function(reason) {
    this.log_("Connection shutdown command received. Shutting down...");
    if (this.onKill_) {
      this.onKill_(reason);
      this.onKill_ = null;
    }
    this.onDisconnect_ = null;
    this.close();
  };
  Connection2.prototype.sendData_ = function(data) {
    if (this.state_ !== 1) {
      throw "Connection is not connected";
    } else {
      this.tx_.send(data);
    }
  };
  Connection2.prototype.close = function() {
    if (this.state_ !== 2) {
      this.log_("Closing realtime connection.");
      this.state_ = 2;
      this.closeConnections_();
      if (this.onDisconnect_) {
        this.onDisconnect_();
        this.onDisconnect_ = null;
      }
    }
  };
  Connection2.prototype.closeConnections_ = function() {
    this.log_("Shutting down all connections");
    if (this.conn_) {
      this.conn_.close();
      this.conn_ = null;
    }
    if (this.secondaryConn_) {
      this.secondaryConn_.close();
      this.secondaryConn_ = null;
    }
    if (this.healthyTimeout_) {
      clearTimeout(this.healthyTimeout_);
      this.healthyTimeout_ = null;
    }
  };
  return Connection2;
}();
var ServerActions = function() {
  function ServerActions2() {
  }
  ServerActions2.prototype.put = function(pathString, data, onComplete, hash) {
  };
  ServerActions2.prototype.merge = function(pathString, data, onComplete, hash) {
  };
  ServerActions2.prototype.refreshAuthToken = function(token) {
  };
  ServerActions2.prototype.refreshAppCheckToken = function(token) {
  };
  ServerActions2.prototype.onDisconnectPut = function(pathString, data, onComplete) {
  };
  ServerActions2.prototype.onDisconnectMerge = function(pathString, data, onComplete) {
  };
  ServerActions2.prototype.onDisconnectCancel = function(pathString, onComplete) {
  };
  ServerActions2.prototype.reportStats = function(stats2) {
  };
  return ServerActions2;
}();
var EventEmitter = function() {
  function EventEmitter2(allowedEvents_) {
    this.allowedEvents_ = allowedEvents_;
    this.listeners_ = {};
    assert(Array.isArray(allowedEvents_) && allowedEvents_.length > 0, "Requires a non-empty array");
  }
  EventEmitter2.prototype.trigger = function(eventType) {
    var varArgs = [];
    for (var _i2 = 1; _i2 < arguments.length; _i2++) {
      varArgs[_i2 - 1] = arguments[_i2];
    }
    if (Array.isArray(this.listeners_[eventType])) {
      var listeners = __spreadArray([], __read(this.listeners_[eventType]));
      for (var i = 0; i < listeners.length; i++) {
        listeners[i].callback.apply(listeners[i].context, varArgs);
      }
    }
  };
  EventEmitter2.prototype.on = function(eventType, callback, context) {
    this.validateEventType_(eventType);
    this.listeners_[eventType] = this.listeners_[eventType] || [];
    this.listeners_[eventType].push({ callback, context });
    var eventData = this.getInitialEvent(eventType);
    if (eventData) {
      callback.apply(context, eventData);
    }
  };
  EventEmitter2.prototype.off = function(eventType, callback, context) {
    this.validateEventType_(eventType);
    var listeners = this.listeners_[eventType] || [];
    for (var i = 0; i < listeners.length; i++) {
      if (listeners[i].callback === callback && (!context || context === listeners[i].context)) {
        listeners.splice(i, 1);
        return;
      }
    }
  };
  EventEmitter2.prototype.validateEventType_ = function(eventType) {
    assert(this.allowedEvents_.find(function(et2) {
      return et2 === eventType;
    }), "Unknown event: " + eventType);
  };
  return EventEmitter2;
}();
var OnlineMonitor = function(_super) {
  __extends(OnlineMonitor2, _super);
  function OnlineMonitor2() {
    var _this = _super.call(this, ["online"]) || this;
    _this.online_ = true;
    if (typeof window !== "undefined" && typeof window.addEventListener !== "undefined" && !isMobileCordova()) {
      window.addEventListener("online", function() {
        if (!_this.online_) {
          _this.online_ = true;
          _this.trigger("online", true);
        }
      }, false);
      window.addEventListener("offline", function() {
        if (_this.online_) {
          _this.online_ = false;
          _this.trigger("online", false);
        }
      }, false);
    }
    return _this;
  }
  OnlineMonitor2.getInstance = function() {
    return new OnlineMonitor2();
  };
  OnlineMonitor2.prototype.getInitialEvent = function(eventType) {
    assert(eventType === "online", "Unknown event type: " + eventType);
    return [this.online_];
  };
  OnlineMonitor2.prototype.currentlyOnline = function() {
    return this.online_;
  };
  return OnlineMonitor2;
}(EventEmitter);
var MAX_PATH_DEPTH = 32;
var MAX_PATH_LENGTH_BYTES = 768;
var Path = function() {
  function Path2(pathOrString, pieceNum) {
    if (pieceNum === void 0) {
      this.pieces_ = pathOrString.split("/");
      var copyTo = 0;
      for (var i = 0; i < this.pieces_.length; i++) {
        if (this.pieces_[i].length > 0) {
          this.pieces_[copyTo] = this.pieces_[i];
          copyTo++;
        }
      }
      this.pieces_.length = copyTo;
      this.pieceNum_ = 0;
    } else {
      this.pieces_ = pathOrString;
      this.pieceNum_ = pieceNum;
    }
  }
  Path2.prototype.toString = function() {
    var pathString = "";
    for (var i = this.pieceNum_; i < this.pieces_.length; i++) {
      if (this.pieces_[i] !== "") {
        pathString += "/" + this.pieces_[i];
      }
    }
    return pathString || "/";
  };
  return Path2;
}();
function newEmptyPath() {
  return new Path("");
}
function pathGetFront(path) {
  if (path.pieceNum_ >= path.pieces_.length) {
    return null;
  }
  return path.pieces_[path.pieceNum_];
}
function pathGetLength(path) {
  return path.pieces_.length - path.pieceNum_;
}
function pathPopFront(path) {
  var pieceNum = path.pieceNum_;
  if (pieceNum < path.pieces_.length) {
    pieceNum++;
  }
  return new Path(path.pieces_, pieceNum);
}
function pathGetBack(path) {
  if (path.pieceNum_ < path.pieces_.length) {
    return path.pieces_[path.pieces_.length - 1];
  }
  return null;
}
function pathToUrlEncodedString(path) {
  var pathString = "";
  for (var i = path.pieceNum_; i < path.pieces_.length; i++) {
    if (path.pieces_[i] !== "") {
      pathString += "/" + encodeURIComponent(String(path.pieces_[i]));
    }
  }
  return pathString || "/";
}
function pathSlice(path, begin) {
  if (begin === void 0) {
    begin = 0;
  }
  return path.pieces_.slice(path.pieceNum_ + begin);
}
function pathParent(path) {
  if (path.pieceNum_ >= path.pieces_.length) {
    return null;
  }
  var pieces = [];
  for (var i = path.pieceNum_; i < path.pieces_.length - 1; i++) {
    pieces.push(path.pieces_[i]);
  }
  return new Path(pieces, 0);
}
function pathChild(path, childPathObj) {
  var pieces = [];
  for (var i = path.pieceNum_; i < path.pieces_.length; i++) {
    pieces.push(path.pieces_[i]);
  }
  if (childPathObj instanceof Path) {
    for (var i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {
      pieces.push(childPathObj.pieces_[i]);
    }
  } else {
    var childPieces = childPathObj.split("/");
    for (var i = 0; i < childPieces.length; i++) {
      if (childPieces[i].length > 0) {
        pieces.push(childPieces[i]);
      }
    }
  }
  return new Path(pieces, 0);
}
function pathIsEmpty(path) {
  return path.pieceNum_ >= path.pieces_.length;
}
function newRelativePath(outerPath, innerPath) {
  var outer = pathGetFront(outerPath), inner = pathGetFront(innerPath);
  if (outer === null) {
    return innerPath;
  } else if (outer === inner) {
    return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));
  } else {
    throw new Error("INTERNAL ERROR: innerPath (" + innerPath + ") is not within outerPath (" + outerPath + ")");
  }
}
function pathCompare(left, right) {
  var leftKeys = pathSlice(left, 0);
  var rightKeys = pathSlice(right, 0);
  for (var i = 0; i < leftKeys.length && i < rightKeys.length; i++) {
    var cmp = nameCompare(leftKeys[i], rightKeys[i]);
    if (cmp !== 0) {
      return cmp;
    }
  }
  if (leftKeys.length === rightKeys.length) {
    return 0;
  }
  return leftKeys.length < rightKeys.length ? -1 : 1;
}
function pathEquals(path, other) {
  if (pathGetLength(path) !== pathGetLength(other)) {
    return false;
  }
  for (var i = path.pieceNum_, j2 = other.pieceNum_; i <= path.pieces_.length; i++, j2++) {
    if (path.pieces_[i] !== other.pieces_[j2]) {
      return false;
    }
  }
  return true;
}
function pathContains(path, other) {
  var i = path.pieceNum_;
  var j2 = other.pieceNum_;
  if (pathGetLength(path) > pathGetLength(other)) {
    return false;
  }
  while (i < path.pieces_.length) {
    if (path.pieces_[i] !== other.pieces_[j2]) {
      return false;
    }
    ++i;
    ++j2;
  }
  return true;
}
var ValidationPath = function() {
  function ValidationPath2(path, errorPrefix_) {
    this.errorPrefix_ = errorPrefix_;
    this.parts_ = pathSlice(path, 0);
    this.byteLength_ = Math.max(1, this.parts_.length);
    for (var i = 0; i < this.parts_.length; i++) {
      this.byteLength_ += stringLength(this.parts_[i]);
    }
    validationPathCheckValid(this);
  }
  return ValidationPath2;
}();
function validationPathPush(validationPath, child3) {
  if (validationPath.parts_.length > 0) {
    validationPath.byteLength_ += 1;
  }
  validationPath.parts_.push(child3);
  validationPath.byteLength_ += stringLength(child3);
  validationPathCheckValid(validationPath);
}
function validationPathPop(validationPath) {
  var last = validationPath.parts_.pop();
  validationPath.byteLength_ -= stringLength(last);
  if (validationPath.parts_.length > 0) {
    validationPath.byteLength_ -= 1;
  }
}
function validationPathCheckValid(validationPath) {
  if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {
    throw new Error(validationPath.errorPrefix_ + "has a key path longer than " + MAX_PATH_LENGTH_BYTES + " bytes (" + validationPath.byteLength_ + ").");
  }
  if (validationPath.parts_.length > MAX_PATH_DEPTH) {
    throw new Error(validationPath.errorPrefix_ + "path specified exceeds the maximum depth that can be written (" + MAX_PATH_DEPTH + ") or object contains a cycle " + validationPathToErrorString(validationPath));
  }
}
function validationPathToErrorString(validationPath) {
  if (validationPath.parts_.length === 0) {
    return "";
  }
  return "in property '" + validationPath.parts_.join(".") + "'";
}
var VisibilityMonitor = function(_super) {
  __extends(VisibilityMonitor2, _super);
  function VisibilityMonitor2() {
    var _this = _super.call(this, ["visible"]) || this;
    var hidden;
    var visibilityChange;
    if (typeof document !== "undefined" && typeof document.addEventListener !== "undefined") {
      if (typeof document["hidden"] !== "undefined") {
        visibilityChange = "visibilitychange";
        hidden = "hidden";
      } else if (typeof document["mozHidden"] !== "undefined") {
        visibilityChange = "mozvisibilitychange";
        hidden = "mozHidden";
      } else if (typeof document["msHidden"] !== "undefined") {
        visibilityChange = "msvisibilitychange";
        hidden = "msHidden";
      } else if (typeof document["webkitHidden"] !== "undefined") {
        visibilityChange = "webkitvisibilitychange";
        hidden = "webkitHidden";
      }
    }
    _this.visible_ = true;
    if (visibilityChange) {
      document.addEventListener(visibilityChange, function() {
        var visible = !document[hidden];
        if (visible !== _this.visible_) {
          _this.visible_ = visible;
          _this.trigger("visible", visible);
        }
      }, false);
    }
    return _this;
  }
  VisibilityMonitor2.getInstance = function() {
    return new VisibilityMonitor2();
  };
  VisibilityMonitor2.prototype.getInitialEvent = function(eventType) {
    assert(eventType === "visible", "Unknown event type: " + eventType);
    return [this.visible_];
  };
  return VisibilityMonitor2;
}(EventEmitter);
var RECONNECT_MIN_DELAY = 1e3;
var RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1e3;
var GET_CONNECT_TIMEOUT = 3 * 1e3;
var RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1e3;
var RECONNECT_DELAY_MULTIPLIER = 1.3;
var RECONNECT_DELAY_RESET_TIMEOUT = 3e4;
var SERVER_KILL_INTERRUPT_REASON = "server_kill";
var INVALID_TOKEN_THRESHOLD = 3;
var PersistentConnection = function(_super) {
  __extends(PersistentConnection2, _super);
  function PersistentConnection2(repoInfo_, applicationId_, onDataUpdate_, onConnectStatus_, onServerInfoUpdate_, authTokenProvider_, appCheckTokenProvider_, authOverride_) {
    var _this = _super.call(this) || this;
    _this.repoInfo_ = repoInfo_;
    _this.applicationId_ = applicationId_;
    _this.onDataUpdate_ = onDataUpdate_;
    _this.onConnectStatus_ = onConnectStatus_;
    _this.onServerInfoUpdate_ = onServerInfoUpdate_;
    _this.authTokenProvider_ = authTokenProvider_;
    _this.appCheckTokenProvider_ = appCheckTokenProvider_;
    _this.authOverride_ = authOverride_;
    _this.id = PersistentConnection2.nextPersistentConnectionId_++;
    _this.log_ = logWrapper("p:" + _this.id + ":");
    _this.interruptReasons_ = {};
    _this.listens = new Map();
    _this.outstandingPuts_ = [];
    _this.outstandingGets_ = [];
    _this.outstandingPutCount_ = 0;
    _this.outstandingGetCount_ = 0;
    _this.onDisconnectRequestQueue_ = [];
    _this.connected_ = false;
    _this.reconnectDelay_ = RECONNECT_MIN_DELAY;
    _this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;
    _this.securityDebugCallback_ = null;
    _this.lastSessionId = null;
    _this.establishConnectionTimer_ = null;
    _this.visible_ = false;
    _this.requestCBHash_ = {};
    _this.requestNumber_ = 0;
    _this.realtime_ = null;
    _this.authToken_ = null;
    _this.appCheckToken_ = null;
    _this.forceTokenRefresh_ = false;
    _this.invalidAuthTokenCount_ = 0;
    _this.invalidAppCheckTokenCount_ = 0;
    _this.firstConnection_ = true;
    _this.lastConnectionAttemptTime_ = null;
    _this.lastConnectionEstablishedTime_ = null;
    if (authOverride_ && !isNodeSdk()) {
      throw new Error("Auth override specified in options, but not supported on non Node.js platforms");
    }
    VisibilityMonitor.getInstance().on("visible", _this.onVisible_, _this);
    if (repoInfo_.host.indexOf("fblocal") === -1) {
      OnlineMonitor.getInstance().on("online", _this.onOnline_, _this);
    }
    return _this;
  }
  PersistentConnection2.prototype.sendRequest = function(action, body, onResponse) {
    var curReqNum = ++this.requestNumber_;
    var msg = { r: curReqNum, a: action, b: body };
    this.log_(stringify(msg));
    assert(this.connected_, "sendRequest call when we're not connected not allowed.");
    this.realtime_.sendRequest(msg);
    if (onResponse) {
      this.requestCBHash_[curReqNum] = onResponse;
    }
  };
  PersistentConnection2.prototype.get = function(query2) {
    var _this = this;
    this.initConnection_();
    var deferred = new Deferred();
    var request = {
      p: query2._path.toString(),
      q: query2._queryObject
    };
    var outstandingGet = {
      action: "g",
      request,
      onComplete: function(message) {
        var payload = message["d"];
        if (message["s"] === "ok") {
          _this.onDataUpdate_(request["p"], payload, false, null);
          deferred.resolve(payload);
        } else {
          deferred.reject(payload);
        }
      }
    };
    this.outstandingGets_.push(outstandingGet);
    this.outstandingGetCount_++;
    var index = this.outstandingGets_.length - 1;
    if (!this.connected_) {
      setTimeout(function() {
        var get2 = _this.outstandingGets_[index];
        if (get2 === void 0 || outstandingGet !== get2) {
          return;
        }
        delete _this.outstandingGets_[index];
        _this.outstandingGetCount_--;
        if (_this.outstandingGetCount_ === 0) {
          _this.outstandingGets_ = [];
        }
        _this.log_("get " + index + " timed out on connection");
        deferred.reject(new Error("Client is offline."));
      }, GET_CONNECT_TIMEOUT);
    }
    if (this.connected_) {
      this.sendGet_(index);
    }
    return deferred.promise;
  };
  PersistentConnection2.prototype.listen = function(query2, currentHashFn, tag, onComplete) {
    this.initConnection_();
    var queryId = query2._queryIdentifier;
    var pathString = query2._path.toString();
    this.log_("Listen called for " + pathString + " " + queryId);
    if (!this.listens.has(pathString)) {
      this.listens.set(pathString, new Map());
    }
    assert(query2._queryParams.isDefault() || !query2._queryParams.loadsAllData(), "listen() called for non-default but complete query");
    assert(!this.listens.get(pathString).has(queryId), "listen() called twice for same path/queryId.");
    var listenSpec = {
      onComplete,
      hashFn: currentHashFn,
      query: query2,
      tag
    };
    this.listens.get(pathString).set(queryId, listenSpec);
    if (this.connected_) {
      this.sendListen_(listenSpec);
    }
  };
  PersistentConnection2.prototype.sendGet_ = function(index) {
    var _this = this;
    var get2 = this.outstandingGets_[index];
    this.sendRequest("g", get2.request, function(message) {
      delete _this.outstandingGets_[index];
      _this.outstandingGetCount_--;
      if (_this.outstandingGetCount_ === 0) {
        _this.outstandingGets_ = [];
      }
      if (get2.onComplete) {
        get2.onComplete(message);
      }
    });
  };
  PersistentConnection2.prototype.sendListen_ = function(listenSpec) {
    var _this = this;
    var query2 = listenSpec.query;
    var pathString = query2._path.toString();
    var queryId = query2._queryIdentifier;
    this.log_("Listen on " + pathString + " for " + queryId);
    var req = { p: pathString };
    var action = "q";
    if (listenSpec.tag) {
      req["q"] = query2._queryObject;
      req["t"] = listenSpec.tag;
    }
    req["h"] = listenSpec.hashFn();
    this.sendRequest(action, req, function(message) {
      var payload = message["d"];
      var status = message["s"];
      PersistentConnection2.warnOnListenWarnings_(payload, query2);
      var currentListenSpec = _this.listens.get(pathString) && _this.listens.get(pathString).get(queryId);
      if (currentListenSpec === listenSpec) {
        _this.log_("listen response", message);
        if (status !== "ok") {
          _this.removeListen_(pathString, queryId);
        }
        if (listenSpec.onComplete) {
          listenSpec.onComplete(status, payload);
        }
      }
    });
  };
  PersistentConnection2.warnOnListenWarnings_ = function(payload, query2) {
    if (payload && typeof payload === "object" && contains(payload, "w")) {
      var warnings = safeGet(payload, "w");
      if (Array.isArray(warnings) && ~warnings.indexOf("no_index")) {
        var indexSpec = '".indexOn": "' + query2._queryParams.getIndex().toString() + '"';
        var indexPath = query2._path.toString();
        warn("Using an unspecified index. Your data will be downloaded and " + ("filtered on the client. Consider adding " + indexSpec + " at ") + (indexPath + " to your security rules for better performance."));
      }
    }
  };
  PersistentConnection2.prototype.refreshAuthToken = function(token) {
    this.authToken_ = token;
    this.log_("Auth token refreshed");
    if (this.authToken_) {
      this.tryAuth();
    } else {
      if (this.connected_) {
        this.sendRequest("unauth", {}, function() {
        });
      }
    }
    this.reduceReconnectDelayIfAdminCredential_(token);
  };
  PersistentConnection2.prototype.reduceReconnectDelayIfAdminCredential_ = function(credential) {
    var isFirebaseSecret = credential && credential.length === 40;
    if (isFirebaseSecret || isAdmin(credential)) {
      this.log_("Admin auth credential detected.  Reducing max reconnect time.");
      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;
    }
  };
  PersistentConnection2.prototype.refreshAppCheckToken = function(token) {
    this.appCheckToken_ = token;
    this.log_("App check token refreshed");
    if (this.appCheckToken_) {
      this.tryAppCheck();
    } else {
      if (this.connected_) {
        this.sendRequest("unappeck", {}, function() {
        });
      }
    }
  };
  PersistentConnection2.prototype.tryAuth = function() {
    var _this = this;
    if (this.connected_ && this.authToken_) {
      var token_1 = this.authToken_;
      var authMethod = isValidFormat(token_1) ? "auth" : "gauth";
      var requestData = { cred: token_1 };
      if (this.authOverride_ === null) {
        requestData["noauth"] = true;
      } else if (typeof this.authOverride_ === "object") {
        requestData["authvar"] = this.authOverride_;
      }
      this.sendRequest(authMethod, requestData, function(res) {
        var status = res["s"];
        var data = res["d"] || "error";
        if (_this.authToken_ === token_1) {
          if (status === "ok") {
            _this.invalidAuthTokenCount_ = 0;
          } else {
            _this.onAuthRevoked_(status, data);
          }
        }
      });
    }
  };
  PersistentConnection2.prototype.tryAppCheck = function() {
    var _this = this;
    if (this.connected_ && this.appCheckToken_) {
      this.sendRequest("appcheck", { "token": this.appCheckToken_ }, function(res) {
        var status = res["s"];
        var data = res["d"] || "error";
        if (status === "ok") {
          _this.invalidAppCheckTokenCount_ = 0;
        } else {
          _this.onAppCheckRevoked_(status, data);
        }
      });
    }
  };
  PersistentConnection2.prototype.unlisten = function(query2, tag) {
    var pathString = query2._path.toString();
    var queryId = query2._queryIdentifier;
    this.log_("Unlisten called for " + pathString + " " + queryId);
    assert(query2._queryParams.isDefault() || !query2._queryParams.loadsAllData(), "unlisten() called for non-default but complete query");
    var listen = this.removeListen_(pathString, queryId);
    if (listen && this.connected_) {
      this.sendUnlisten_(pathString, queryId, query2._queryObject, tag);
    }
  };
  PersistentConnection2.prototype.sendUnlisten_ = function(pathString, queryId, queryObj, tag) {
    this.log_("Unlisten on " + pathString + " for " + queryId);
    var req = { p: pathString };
    var action = "n";
    if (tag) {
      req["q"] = queryObj;
      req["t"] = tag;
    }
    this.sendRequest(action, req);
  };
  PersistentConnection2.prototype.onDisconnectPut = function(pathString, data, onComplete) {
    this.initConnection_();
    if (this.connected_) {
      this.sendOnDisconnect_("o", pathString, data, onComplete);
    } else {
      this.onDisconnectRequestQueue_.push({
        pathString,
        action: "o",
        data,
        onComplete
      });
    }
  };
  PersistentConnection2.prototype.onDisconnectMerge = function(pathString, data, onComplete) {
    this.initConnection_();
    if (this.connected_) {
      this.sendOnDisconnect_("om", pathString, data, onComplete);
    } else {
      this.onDisconnectRequestQueue_.push({
        pathString,
        action: "om",
        data,
        onComplete
      });
    }
  };
  PersistentConnection2.prototype.onDisconnectCancel = function(pathString, onComplete) {
    this.initConnection_();
    if (this.connected_) {
      this.sendOnDisconnect_("oc", pathString, null, onComplete);
    } else {
      this.onDisconnectRequestQueue_.push({
        pathString,
        action: "oc",
        data: null,
        onComplete
      });
    }
  };
  PersistentConnection2.prototype.sendOnDisconnect_ = function(action, pathString, data, onComplete) {
    var request = { p: pathString, d: data };
    this.log_("onDisconnect " + action, request);
    this.sendRequest(action, request, function(response) {
      if (onComplete) {
        setTimeout(function() {
          onComplete(response["s"], response["d"]);
        }, Math.floor(0));
      }
    });
  };
  PersistentConnection2.prototype.put = function(pathString, data, onComplete, hash) {
    this.putInternal("p", pathString, data, onComplete, hash);
  };
  PersistentConnection2.prototype.merge = function(pathString, data, onComplete, hash) {
    this.putInternal("m", pathString, data, onComplete, hash);
  };
  PersistentConnection2.prototype.putInternal = function(action, pathString, data, onComplete, hash) {
    this.initConnection_();
    var request = {
      p: pathString,
      d: data
    };
    if (hash !== void 0) {
      request["h"] = hash;
    }
    this.outstandingPuts_.push({
      action,
      request,
      onComplete
    });
    this.outstandingPutCount_++;
    var index = this.outstandingPuts_.length - 1;
    if (this.connected_) {
      this.sendPut_(index);
    } else {
      this.log_("Buffering put: " + pathString);
    }
  };
  PersistentConnection2.prototype.sendPut_ = function(index) {
    var _this = this;
    var action = this.outstandingPuts_[index].action;
    var request = this.outstandingPuts_[index].request;
    var onComplete = this.outstandingPuts_[index].onComplete;
    this.outstandingPuts_[index].queued = this.connected_;
    this.sendRequest(action, request, function(message) {
      _this.log_(action + " response", message);
      delete _this.outstandingPuts_[index];
      _this.outstandingPutCount_--;
      if (_this.outstandingPutCount_ === 0) {
        _this.outstandingPuts_ = [];
      }
      if (onComplete) {
        onComplete(message["s"], message["d"]);
      }
    });
  };
  PersistentConnection2.prototype.reportStats = function(stats2) {
    var _this = this;
    if (this.connected_) {
      var request = { c: stats2 };
      this.log_("reportStats", request);
      this.sendRequest("s", request, function(result) {
        var status = result["s"];
        if (status !== "ok") {
          var errorReason = result["d"];
          _this.log_("reportStats", "Error sending stats: " + errorReason);
        }
      });
    }
  };
  PersistentConnection2.prototype.onDataMessage_ = function(message) {
    if ("r" in message) {
      this.log_("from server: " + stringify(message));
      var reqNum = message["r"];
      var onResponse = this.requestCBHash_[reqNum];
      if (onResponse) {
        delete this.requestCBHash_[reqNum];
        onResponse(message["b"]);
      }
    } else if ("error" in message) {
      throw "A server-side error has occurred: " + message["error"];
    } else if ("a" in message) {
      this.onDataPush_(message["a"], message["b"]);
    }
  };
  PersistentConnection2.prototype.onDataPush_ = function(action, body) {
    this.log_("handleServerMessage", action, body);
    if (action === "d") {
      this.onDataUpdate_(body["p"], body["d"], false, body["t"]);
    } else if (action === "m") {
      this.onDataUpdate_(body["p"], body["d"], true, body["t"]);
    } else if (action === "c") {
      this.onListenRevoked_(body["p"], body["q"]);
    } else if (action === "ac") {
      this.onAuthRevoked_(body["s"], body["d"]);
    } else if (action === "apc") {
      this.onAppCheckRevoked_(body["s"], body["d"]);
    } else if (action === "sd") {
      this.onSecurityDebugPacket_(body);
    } else {
      error("Unrecognized action received from server: " + stringify(action) + "\nAre you using the latest client?");
    }
  };
  PersistentConnection2.prototype.onReady_ = function(timestamp, sessionId) {
    this.log_("connection ready");
    this.connected_ = true;
    this.lastConnectionEstablishedTime_ = new Date().getTime();
    this.handleTimestamp_(timestamp);
    this.lastSessionId = sessionId;
    if (this.firstConnection_) {
      this.sendConnectStats_();
    }
    this.restoreState_();
    this.firstConnection_ = false;
    this.onConnectStatus_(true);
  };
  PersistentConnection2.prototype.scheduleConnect_ = function(timeout) {
    var _this = this;
    assert(!this.realtime_, "Scheduling a connect when we're already connected/ing?");
    if (this.establishConnectionTimer_) {
      clearTimeout(this.establishConnectionTimer_);
    }
    this.establishConnectionTimer_ = setTimeout(function() {
      _this.establishConnectionTimer_ = null;
      _this.establishConnection_();
    }, Math.floor(timeout));
  };
  PersistentConnection2.prototype.initConnection_ = function() {
    if (!this.realtime_ && this.firstConnection_) {
      this.scheduleConnect_(0);
    }
  };
  PersistentConnection2.prototype.onVisible_ = function(visible) {
    if (visible && !this.visible_ && this.reconnectDelay_ === this.maxReconnectDelay_) {
      this.log_("Window became visible.  Reducing delay.");
      this.reconnectDelay_ = RECONNECT_MIN_DELAY;
      if (!this.realtime_) {
        this.scheduleConnect_(0);
      }
    }
    this.visible_ = visible;
  };
  PersistentConnection2.prototype.onOnline_ = function(online) {
    if (online) {
      this.log_("Browser went online.");
      this.reconnectDelay_ = RECONNECT_MIN_DELAY;
      if (!this.realtime_) {
        this.scheduleConnect_(0);
      }
    } else {
      this.log_("Browser went offline.  Killing connection.");
      if (this.realtime_) {
        this.realtime_.close();
      }
    }
  };
  PersistentConnection2.prototype.onRealtimeDisconnect_ = function() {
    this.log_("data client disconnected");
    this.connected_ = false;
    this.realtime_ = null;
    this.cancelSentTransactions_();
    this.requestCBHash_ = {};
    if (this.shouldReconnect_()) {
      if (!this.visible_) {
        this.log_("Window isn't visible.  Delaying reconnect.");
        this.reconnectDelay_ = this.maxReconnectDelay_;
        this.lastConnectionAttemptTime_ = new Date().getTime();
      } else if (this.lastConnectionEstablishedTime_) {
        var timeSinceLastConnectSucceeded = new Date().getTime() - this.lastConnectionEstablishedTime_;
        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {
          this.reconnectDelay_ = RECONNECT_MIN_DELAY;
        }
        this.lastConnectionEstablishedTime_ = null;
      }
      var timeSinceLastConnectAttempt = new Date().getTime() - this.lastConnectionAttemptTime_;
      var reconnectDelay = Math.max(0, this.reconnectDelay_ - timeSinceLastConnectAttempt);
      reconnectDelay = Math.random() * reconnectDelay;
      this.log_("Trying to reconnect in " + reconnectDelay + "ms");
      this.scheduleConnect_(reconnectDelay);
      this.reconnectDelay_ = Math.min(this.maxReconnectDelay_, this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER);
    }
    this.onConnectStatus_(false);
  };
  PersistentConnection2.prototype.establishConnection_ = function() {
    return __awaiter(this, void 0, void 0, function() {
      var onDataMessage, onReady, onDisconnect_1, connId, lastSessionId, canceled_1, connection_1, closeFn, sendRequestFn, forceRefresh, _a8, authToken, appCheckToken, error_1;
      var _this = this;
      return __generator(this, function(_b) {
        switch (_b.label) {
          case 0:
            if (!this.shouldReconnect_())
              return [3, 4];
            this.log_("Making a connection attempt");
            this.lastConnectionAttemptTime_ = new Date().getTime();
            this.lastConnectionEstablishedTime_ = null;
            onDataMessage = this.onDataMessage_.bind(this);
            onReady = this.onReady_.bind(this);
            onDisconnect_1 = this.onRealtimeDisconnect_.bind(this);
            connId = this.id + ":" + PersistentConnection2.nextConnectionId_++;
            lastSessionId = this.lastSessionId;
            canceled_1 = false;
            connection_1 = null;
            closeFn = function() {
              if (connection_1) {
                connection_1.close();
              } else {
                canceled_1 = true;
                onDisconnect_1();
              }
            };
            sendRequestFn = function(msg) {
              assert(connection_1, "sendRequest call when we're not connected not allowed.");
              connection_1.sendRequest(msg);
            };
            this.realtime_ = {
              close: closeFn,
              sendRequest: sendRequestFn
            };
            forceRefresh = this.forceTokenRefresh_;
            this.forceTokenRefresh_ = false;
            _b.label = 1;
          case 1:
            _b.trys.push([1, 3, , 4]);
            return [4, Promise.all([
              this.authTokenProvider_.getToken(forceRefresh),
              this.appCheckTokenProvider_.getToken(forceRefresh)
            ])];
          case 2:
            _a8 = __read.apply(void 0, [_b.sent(), 2]), authToken = _a8[0], appCheckToken = _a8[1];
            if (!canceled_1) {
              log("getToken() completed. Creating connection.");
              this.authToken_ = authToken && authToken.accessToken;
              this.appCheckToken_ = appCheckToken && appCheckToken.token;
              connection_1 = new Connection(connId, this.repoInfo_, this.applicationId_, this.appCheckToken_, this.authToken_, onDataMessage, onReady, onDisconnect_1, function(reason) {
                warn(reason + " (" + _this.repoInfo_.toString() + ")");
                _this.interrupt(SERVER_KILL_INTERRUPT_REASON);
              }, lastSessionId);
            } else {
              log("getToken() completed but was canceled");
            }
            return [3, 4];
          case 3:
            error_1 = _b.sent();
            this.log_("Failed to get token: " + error_1);
            if (!canceled_1) {
              if (this.repoInfo_.nodeAdmin) {
                warn(error_1);
              }
              closeFn();
            }
            return [3, 4];
          case 4:
            return [2];
        }
      });
    });
  };
  PersistentConnection2.prototype.interrupt = function(reason) {
    log("Interrupting connection for reason: " + reason);
    this.interruptReasons_[reason] = true;
    if (this.realtime_) {
      this.realtime_.close();
    } else {
      if (this.establishConnectionTimer_) {
        clearTimeout(this.establishConnectionTimer_);
        this.establishConnectionTimer_ = null;
      }
      if (this.connected_) {
        this.onRealtimeDisconnect_();
      }
    }
  };
  PersistentConnection2.prototype.resume = function(reason) {
    log("Resuming connection for reason: " + reason);
    delete this.interruptReasons_[reason];
    if (isEmpty(this.interruptReasons_)) {
      this.reconnectDelay_ = RECONNECT_MIN_DELAY;
      if (!this.realtime_) {
        this.scheduleConnect_(0);
      }
    }
  };
  PersistentConnection2.prototype.handleTimestamp_ = function(timestamp) {
    var delta = timestamp - new Date().getTime();
    this.onServerInfoUpdate_({ serverTimeOffset: delta });
  };
  PersistentConnection2.prototype.cancelSentTransactions_ = function() {
    for (var i = 0; i < this.outstandingPuts_.length; i++) {
      var put = this.outstandingPuts_[i];
      if (put && "h" in put.request && put.queued) {
        if (put.onComplete) {
          put.onComplete("disconnect");
        }
        delete this.outstandingPuts_[i];
        this.outstandingPutCount_--;
      }
    }
    if (this.outstandingPutCount_ === 0) {
      this.outstandingPuts_ = [];
    }
  };
  PersistentConnection2.prototype.onListenRevoked_ = function(pathString, query2) {
    var queryId;
    if (!query2) {
      queryId = "default";
    } else {
      queryId = query2.map(function(q3) {
        return ObjectToUniqueKey(q3);
      }).join("$");
    }
    var listen = this.removeListen_(pathString, queryId);
    if (listen && listen.onComplete) {
      listen.onComplete("permission_denied");
    }
  };
  PersistentConnection2.prototype.removeListen_ = function(pathString, queryId) {
    var normalizedPathString = new Path(pathString).toString();
    var listen;
    if (this.listens.has(normalizedPathString)) {
      var map2 = this.listens.get(normalizedPathString);
      listen = map2.get(queryId);
      map2.delete(queryId);
      if (map2.size === 0) {
        this.listens.delete(normalizedPathString);
      }
    } else {
      listen = void 0;
    }
    return listen;
  };
  PersistentConnection2.prototype.onAuthRevoked_ = function(statusCode, explanation) {
    log("Auth token revoked: " + statusCode + "/" + explanation);
    this.authToken_ = null;
    this.forceTokenRefresh_ = true;
    this.realtime_.close();
    if (statusCode === "invalid_token" || statusCode === "permission_denied") {
      this.invalidAuthTokenCount_++;
      if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {
        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;
        this.authTokenProvider_.notifyForInvalidToken();
      }
    }
  };
  PersistentConnection2.prototype.onAppCheckRevoked_ = function(statusCode, explanation) {
    log("App check token revoked: " + statusCode + "/" + explanation);
    this.appCheckToken_ = null;
    this.forceTokenRefresh_ = true;
    if (statusCode === "invalid_token" || statusCode === "permission_denied") {
      this.invalidAppCheckTokenCount_++;
      if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {
        this.appCheckTokenProvider_.notifyForInvalidToken();
      }
    }
  };
  PersistentConnection2.prototype.onSecurityDebugPacket_ = function(body) {
    if (this.securityDebugCallback_) {
      this.securityDebugCallback_(body);
    } else {
      if ("msg" in body) {
        console.log("FIREBASE: " + body["msg"].replace("\n", "\nFIREBASE: "));
      }
    }
  };
  PersistentConnection2.prototype.restoreState_ = function() {
    var e_1, _a8, e_2, _b;
    this.tryAuth();
    this.tryAppCheck();
    try {
      for (var _c2 = __values(this.listens.values()), _d = _c2.next(); !_d.done; _d = _c2.next()) {
        var queries = _d.value;
        try {
          for (var _e2 = (e_2 = void 0, __values(queries.values())), _f = _e2.next(); !_f.done; _f = _e2.next()) {
            var listenSpec = _f.value;
            this.sendListen_(listenSpec);
          }
        } catch (e_2_1) {
          e_2 = { error: e_2_1 };
        } finally {
          try {
            if (_f && !_f.done && (_b = _e2.return))
              _b.call(_e2);
          } finally {
            if (e_2)
              throw e_2.error;
          }
        }
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (_d && !_d.done && (_a8 = _c2.return))
          _a8.call(_c2);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
    for (var i = 0; i < this.outstandingPuts_.length; i++) {
      if (this.outstandingPuts_[i]) {
        this.sendPut_(i);
      }
    }
    while (this.onDisconnectRequestQueue_.length) {
      var request = this.onDisconnectRequestQueue_.shift();
      this.sendOnDisconnect_(request.action, request.pathString, request.data, request.onComplete);
    }
    for (var i = 0; i < this.outstandingGets_.length; i++) {
      if (this.outstandingGets_[i]) {
        this.sendGet_(i);
      }
    }
  };
  PersistentConnection2.prototype.sendConnectStats_ = function() {
    var stats2 = {};
    var clientName = "js";
    if (isNodeSdk()) {
      if (this.repoInfo_.nodeAdmin) {
        clientName = "admin_node";
      } else {
        clientName = "node";
      }
    }
    stats2["sdk." + clientName + "." + SDK_VERSION.replace(/\./g, "-")] = 1;
    if (isMobileCordova()) {
      stats2["framework.cordova"] = 1;
    } else if (isReactNative()) {
      stats2["framework.reactnative"] = 1;
    }
    this.reportStats(stats2);
  };
  PersistentConnection2.prototype.shouldReconnect_ = function() {
    var online = OnlineMonitor.getInstance().currentlyOnline();
    return isEmpty(this.interruptReasons_) && online;
  };
  PersistentConnection2.nextPersistentConnectionId_ = 0;
  PersistentConnection2.nextConnectionId_ = 0;
  return PersistentConnection2;
}(ServerActions);
var NamedNode = function() {
  function NamedNode2(name10, node) {
    this.name = name10;
    this.node = node;
  }
  NamedNode2.Wrap = function(name10, node) {
    return new NamedNode2(name10, node);
  };
  return NamedNode2;
}();
var Index = function() {
  function Index3() {
  }
  Index3.prototype.getCompare = function() {
    return this.compare.bind(this);
  };
  Index3.prototype.indexedValueChanged = function(oldNode, newNode) {
    var oldWrapped = new NamedNode(MIN_NAME, oldNode);
    var newWrapped = new NamedNode(MIN_NAME, newNode);
    return this.compare(oldWrapped, newWrapped) !== 0;
  };
  Index3.prototype.minPost = function() {
    return NamedNode.MIN;
  };
  return Index3;
}();
var __EMPTY_NODE;
var KeyIndex = function(_super) {
  __extends(KeyIndex2, _super);
  function KeyIndex2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  Object.defineProperty(KeyIndex2, "__EMPTY_NODE", {
    get: function() {
      return __EMPTY_NODE;
    },
    set: function(val) {
      __EMPTY_NODE = val;
    },
    enumerable: false,
    configurable: true
  });
  KeyIndex2.prototype.compare = function(a, b) {
    return nameCompare(a.name, b.name);
  };
  KeyIndex2.prototype.isDefinedOn = function(node) {
    throw assertionError("KeyIndex.isDefinedOn not expected to be called.");
  };
  KeyIndex2.prototype.indexedValueChanged = function(oldNode, newNode) {
    return false;
  };
  KeyIndex2.prototype.minPost = function() {
    return NamedNode.MIN;
  };
  KeyIndex2.prototype.maxPost = function() {
    return new NamedNode(MAX_NAME, __EMPTY_NODE);
  };
  KeyIndex2.prototype.makePost = function(indexValue, name10) {
    assert(typeof indexValue === "string", "KeyIndex indexValue must always be a string.");
    return new NamedNode(indexValue, __EMPTY_NODE);
  };
  KeyIndex2.prototype.toString = function() {
    return ".key";
  };
  return KeyIndex2;
}(Index);
var KEY_INDEX = new KeyIndex();
var SortedMapIterator = function() {
  function SortedMapIterator2(node, startKey, comparator, isReverse_, resultGenerator_) {
    if (resultGenerator_ === void 0) {
      resultGenerator_ = null;
    }
    this.isReverse_ = isReverse_;
    this.resultGenerator_ = resultGenerator_;
    this.nodeStack_ = [];
    var cmp = 1;
    while (!node.isEmpty()) {
      node = node;
      cmp = startKey ? comparator(node.key, startKey) : 1;
      if (isReverse_) {
        cmp *= -1;
      }
      if (cmp < 0) {
        if (this.isReverse_) {
          node = node.left;
        } else {
          node = node.right;
        }
      } else if (cmp === 0) {
        this.nodeStack_.push(node);
        break;
      } else {
        this.nodeStack_.push(node);
        if (this.isReverse_) {
          node = node.right;
        } else {
          node = node.left;
        }
      }
    }
  }
  SortedMapIterator2.prototype.getNext = function() {
    if (this.nodeStack_.length === 0) {
      return null;
    }
    var node = this.nodeStack_.pop();
    var result;
    if (this.resultGenerator_) {
      result = this.resultGenerator_(node.key, node.value);
    } else {
      result = { key: node.key, value: node.value };
    }
    if (this.isReverse_) {
      node = node.left;
      while (!node.isEmpty()) {
        this.nodeStack_.push(node);
        node = node.right;
      }
    } else {
      node = node.right;
      while (!node.isEmpty()) {
        this.nodeStack_.push(node);
        node = node.left;
      }
    }
    return result;
  };
  SortedMapIterator2.prototype.hasNext = function() {
    return this.nodeStack_.length > 0;
  };
  SortedMapIterator2.prototype.peek = function() {
    if (this.nodeStack_.length === 0) {
      return null;
    }
    var node = this.nodeStack_[this.nodeStack_.length - 1];
    if (this.resultGenerator_) {
      return this.resultGenerator_(node.key, node.value);
    } else {
      return { key: node.key, value: node.value };
    }
  };
  return SortedMapIterator2;
}();
var LLRBNode = function() {
  function LLRBNode2(key, value, color, left, right) {
    this.key = key;
    this.value = value;
    this.color = color != null ? color : LLRBNode2.RED;
    this.left = left != null ? left : SortedMap.EMPTY_NODE;
    this.right = right != null ? right : SortedMap.EMPTY_NODE;
  }
  LLRBNode2.prototype.copy = function(key, value, color, left, right) {
    return new LLRBNode2(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);
  };
  LLRBNode2.prototype.count = function() {
    return this.left.count() + 1 + this.right.count();
  };
  LLRBNode2.prototype.isEmpty = function() {
    return false;
  };
  LLRBNode2.prototype.inorderTraversal = function(action) {
    return this.left.inorderTraversal(action) || !!action(this.key, this.value) || this.right.inorderTraversal(action);
  };
  LLRBNode2.prototype.reverseTraversal = function(action) {
    return this.right.reverseTraversal(action) || action(this.key, this.value) || this.left.reverseTraversal(action);
  };
  LLRBNode2.prototype.min_ = function() {
    if (this.left.isEmpty()) {
      return this;
    } else {
      return this.left.min_();
    }
  };
  LLRBNode2.prototype.minKey = function() {
    return this.min_().key;
  };
  LLRBNode2.prototype.maxKey = function() {
    if (this.right.isEmpty()) {
      return this.key;
    } else {
      return this.right.maxKey();
    }
  };
  LLRBNode2.prototype.insert = function(key, value, comparator) {
    var n = this;
    var cmp = comparator(key, n.key);
    if (cmp < 0) {
      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);
    } else if (cmp === 0) {
      n = n.copy(null, value, null, null, null);
    } else {
      n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));
    }
    return n.fixUp_();
  };
  LLRBNode2.prototype.removeMin_ = function() {
    if (this.left.isEmpty()) {
      return SortedMap.EMPTY_NODE;
    }
    var n = this;
    if (!n.left.isRed_() && !n.left.left.isRed_()) {
      n = n.moveRedLeft_();
    }
    n = n.copy(null, null, null, n.left.removeMin_(), null);
    return n.fixUp_();
  };
  LLRBNode2.prototype.remove = function(key, comparator) {
    var n, smallest;
    n = this;
    if (comparator(key, n.key) < 0) {
      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {
        n = n.moveRedLeft_();
      }
      n = n.copy(null, null, null, n.left.remove(key, comparator), null);
    } else {
      if (n.left.isRed_()) {
        n = n.rotateRight_();
      }
      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {
        n = n.moveRedRight_();
      }
      if (comparator(key, n.key) === 0) {
        if (n.right.isEmpty()) {
          return SortedMap.EMPTY_NODE;
        } else {
          smallest = n.right.min_();
          n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin_());
        }
      }
      n = n.copy(null, null, null, null, n.right.remove(key, comparator));
    }
    return n.fixUp_();
  };
  LLRBNode2.prototype.isRed_ = function() {
    return this.color;
  };
  LLRBNode2.prototype.fixUp_ = function() {
    var n = this;
    if (n.right.isRed_() && !n.left.isRed_()) {
      n = n.rotateLeft_();
    }
    if (n.left.isRed_() && n.left.left.isRed_()) {
      n = n.rotateRight_();
    }
    if (n.left.isRed_() && n.right.isRed_()) {
      n = n.colorFlip_();
    }
    return n;
  };
  LLRBNode2.prototype.moveRedLeft_ = function() {
    var n = this.colorFlip_();
    if (n.right.left.isRed_()) {
      n = n.copy(null, null, null, null, n.right.rotateRight_());
      n = n.rotateLeft_();
      n = n.colorFlip_();
    }
    return n;
  };
  LLRBNode2.prototype.moveRedRight_ = function() {
    var n = this.colorFlip_();
    if (n.left.left.isRed_()) {
      n = n.rotateRight_();
      n = n.colorFlip_();
    }
    return n;
  };
  LLRBNode2.prototype.rotateLeft_ = function() {
    var nl = this.copy(null, null, LLRBNode2.RED, null, this.right.left);
    return this.right.copy(null, null, this.color, nl, null);
  };
  LLRBNode2.prototype.rotateRight_ = function() {
    var nr2 = this.copy(null, null, LLRBNode2.RED, this.left.right, null);
    return this.left.copy(null, null, this.color, null, nr2);
  };
  LLRBNode2.prototype.colorFlip_ = function() {
    var left = this.left.copy(null, null, !this.left.color, null, null);
    var right = this.right.copy(null, null, !this.right.color, null, null);
    return this.copy(null, null, !this.color, left, right);
  };
  LLRBNode2.prototype.checkMaxDepth_ = function() {
    var blackDepth = this.check_();
    return Math.pow(2, blackDepth) <= this.count() + 1;
  };
  LLRBNode2.prototype.check_ = function() {
    if (this.isRed_() && this.left.isRed_()) {
      throw new Error("Red node has red child(" + this.key + "," + this.value + ")");
    }
    if (this.right.isRed_()) {
      throw new Error("Right child of (" + this.key + "," + this.value + ") is red");
    }
    var blackDepth = this.left.check_();
    if (blackDepth !== this.right.check_()) {
      throw new Error("Black depths differ");
    } else {
      return blackDepth + (this.isRed_() ? 0 : 1);
    }
  };
  LLRBNode2.RED = true;
  LLRBNode2.BLACK = false;
  return LLRBNode2;
}();
var LLRBEmptyNode = function() {
  function LLRBEmptyNode2() {
  }
  LLRBEmptyNode2.prototype.copy = function(key, value, color, left, right) {
    return this;
  };
  LLRBEmptyNode2.prototype.insert = function(key, value, comparator) {
    return new LLRBNode(key, value, null);
  };
  LLRBEmptyNode2.prototype.remove = function(key, comparator) {
    return this;
  };
  LLRBEmptyNode2.prototype.count = function() {
    return 0;
  };
  LLRBEmptyNode2.prototype.isEmpty = function() {
    return true;
  };
  LLRBEmptyNode2.prototype.inorderTraversal = function(action) {
    return false;
  };
  LLRBEmptyNode2.prototype.reverseTraversal = function(action) {
    return false;
  };
  LLRBEmptyNode2.prototype.minKey = function() {
    return null;
  };
  LLRBEmptyNode2.prototype.maxKey = function() {
    return null;
  };
  LLRBEmptyNode2.prototype.check_ = function() {
    return 0;
  };
  LLRBEmptyNode2.prototype.isRed_ = function() {
    return false;
  };
  return LLRBEmptyNode2;
}();
var SortedMap = function() {
  function SortedMap2(comparator_, root_) {
    if (root_ === void 0) {
      root_ = SortedMap2.EMPTY_NODE;
    }
    this.comparator_ = comparator_;
    this.root_ = root_;
  }
  SortedMap2.prototype.insert = function(key, value) {
    return new SortedMap2(this.comparator_, this.root_.insert(key, value, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));
  };
  SortedMap2.prototype.remove = function(key) {
    return new SortedMap2(this.comparator_, this.root_.remove(key, this.comparator_).copy(null, null, LLRBNode.BLACK, null, null));
  };
  SortedMap2.prototype.get = function(key) {
    var cmp;
    var node = this.root_;
    while (!node.isEmpty()) {
      cmp = this.comparator_(key, node.key);
      if (cmp === 0) {
        return node.value;
      } else if (cmp < 0) {
        node = node.left;
      } else if (cmp > 0) {
        node = node.right;
      }
    }
    return null;
  };
  SortedMap2.prototype.getPredecessorKey = function(key) {
    var cmp, node = this.root_, rightParent = null;
    while (!node.isEmpty()) {
      cmp = this.comparator_(key, node.key);
      if (cmp === 0) {
        if (!node.left.isEmpty()) {
          node = node.left;
          while (!node.right.isEmpty()) {
            node = node.right;
          }
          return node.key;
        } else if (rightParent) {
          return rightParent.key;
        } else {
          return null;
        }
      } else if (cmp < 0) {
        node = node.left;
      } else if (cmp > 0) {
        rightParent = node;
        node = node.right;
      }
    }
    throw new Error("Attempted to find predecessor key for a nonexistent key.  What gives?");
  };
  SortedMap2.prototype.isEmpty = function() {
    return this.root_.isEmpty();
  };
  SortedMap2.prototype.count = function() {
    return this.root_.count();
  };
  SortedMap2.prototype.minKey = function() {
    return this.root_.minKey();
  };
  SortedMap2.prototype.maxKey = function() {
    return this.root_.maxKey();
  };
  SortedMap2.prototype.inorderTraversal = function(action) {
    return this.root_.inorderTraversal(action);
  };
  SortedMap2.prototype.reverseTraversal = function(action) {
    return this.root_.reverseTraversal(action);
  };
  SortedMap2.prototype.getIterator = function(resultGenerator) {
    return new SortedMapIterator(this.root_, null, this.comparator_, false, resultGenerator);
  };
  SortedMap2.prototype.getIteratorFrom = function(key, resultGenerator) {
    return new SortedMapIterator(this.root_, key, this.comparator_, false, resultGenerator);
  };
  SortedMap2.prototype.getReverseIteratorFrom = function(key, resultGenerator) {
    return new SortedMapIterator(this.root_, key, this.comparator_, true, resultGenerator);
  };
  SortedMap2.prototype.getReverseIterator = function(resultGenerator) {
    return new SortedMapIterator(this.root_, null, this.comparator_, true, resultGenerator);
  };
  SortedMap2.EMPTY_NODE = new LLRBEmptyNode();
  return SortedMap2;
}();
function NAME_ONLY_COMPARATOR(left, right) {
  return nameCompare(left.name, right.name);
}
function NAME_COMPARATOR(left, right) {
  return nameCompare(left, right);
}
var MAX_NODE$2;
function setMaxNode$1(val) {
  MAX_NODE$2 = val;
}
var priorityHashText = function(priority) {
  if (typeof priority === "number") {
    return "number:" + doubleToIEEE754String(priority);
  } else {
    return "string:" + priority;
  }
};
var validatePriorityNode = function(priorityNode) {
  if (priorityNode.isLeafNode()) {
    var val = priorityNode.val();
    assert(typeof val === "string" || typeof val === "number" || typeof val === "object" && contains(val, ".sv"), "Priority must be a string or number.");
  } else {
    assert(priorityNode === MAX_NODE$2 || priorityNode.isEmpty(), "priority of unexpected type.");
  }
  assert(priorityNode === MAX_NODE$2 || priorityNode.getPriority().isEmpty(), "Priority nodes can't have a priority of their own.");
};
var __childrenNodeConstructor;
var LeafNode = function() {
  function LeafNode2(value_, priorityNode_) {
    if (priorityNode_ === void 0) {
      priorityNode_ = LeafNode2.__childrenNodeConstructor.EMPTY_NODE;
    }
    this.value_ = value_;
    this.priorityNode_ = priorityNode_;
    this.lazyHash_ = null;
    assert(this.value_ !== void 0 && this.value_ !== null, "LeafNode shouldn't be created with null/undefined value.");
    validatePriorityNode(this.priorityNode_);
  }
  Object.defineProperty(LeafNode2, "__childrenNodeConstructor", {
    get: function() {
      return __childrenNodeConstructor;
    },
    set: function(val) {
      __childrenNodeConstructor = val;
    },
    enumerable: false,
    configurable: true
  });
  LeafNode2.prototype.isLeafNode = function() {
    return true;
  };
  LeafNode2.prototype.getPriority = function() {
    return this.priorityNode_;
  };
  LeafNode2.prototype.updatePriority = function(newPriorityNode) {
    return new LeafNode2(this.value_, newPriorityNode);
  };
  LeafNode2.prototype.getImmediateChild = function(childName) {
    if (childName === ".priority") {
      return this.priorityNode_;
    } else {
      return LeafNode2.__childrenNodeConstructor.EMPTY_NODE;
    }
  };
  LeafNode2.prototype.getChild = function(path) {
    if (pathIsEmpty(path)) {
      return this;
    } else if (pathGetFront(path) === ".priority") {
      return this.priorityNode_;
    } else {
      return LeafNode2.__childrenNodeConstructor.EMPTY_NODE;
    }
  };
  LeafNode2.prototype.hasChild = function() {
    return false;
  };
  LeafNode2.prototype.getPredecessorChildName = function(childName, childNode) {
    return null;
  };
  LeafNode2.prototype.updateImmediateChild = function(childName, newChildNode) {
    if (childName === ".priority") {
      return this.updatePriority(newChildNode);
    } else if (newChildNode.isEmpty() && childName !== ".priority") {
      return this;
    } else {
      return LeafNode2.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(childName, newChildNode).updatePriority(this.priorityNode_);
    }
  };
  LeafNode2.prototype.updateChild = function(path, newChildNode) {
    var front = pathGetFront(path);
    if (front === null) {
      return newChildNode;
    } else if (newChildNode.isEmpty() && front !== ".priority") {
      return this;
    } else {
      assert(front !== ".priority" || pathGetLength(path) === 1, ".priority must be the last token in a path");
      return this.updateImmediateChild(front, LeafNode2.__childrenNodeConstructor.EMPTY_NODE.updateChild(pathPopFront(path), newChildNode));
    }
  };
  LeafNode2.prototype.isEmpty = function() {
    return false;
  };
  LeafNode2.prototype.numChildren = function() {
    return 0;
  };
  LeafNode2.prototype.forEachChild = function(index, action) {
    return false;
  };
  LeafNode2.prototype.val = function(exportFormat) {
    if (exportFormat && !this.getPriority().isEmpty()) {
      return {
        ".value": this.getValue(),
        ".priority": this.getPriority().val()
      };
    } else {
      return this.getValue();
    }
  };
  LeafNode2.prototype.hash = function() {
    if (this.lazyHash_ === null) {
      var toHash = "";
      if (!this.priorityNode_.isEmpty()) {
        toHash += "priority:" + priorityHashText(this.priorityNode_.val()) + ":";
      }
      var type = typeof this.value_;
      toHash += type + ":";
      if (type === "number") {
        toHash += doubleToIEEE754String(this.value_);
      } else {
        toHash += this.value_;
      }
      this.lazyHash_ = sha1(toHash);
    }
    return this.lazyHash_;
  };
  LeafNode2.prototype.getValue = function() {
    return this.value_;
  };
  LeafNode2.prototype.compareTo = function(other) {
    if (other === LeafNode2.__childrenNodeConstructor.EMPTY_NODE) {
      return 1;
    } else if (other instanceof LeafNode2.__childrenNodeConstructor) {
      return -1;
    } else {
      assert(other.isLeafNode(), "Unknown node type");
      return this.compareToLeafNode_(other);
    }
  };
  LeafNode2.prototype.compareToLeafNode_ = function(otherLeaf) {
    var otherLeafType = typeof otherLeaf.value_;
    var thisLeafType = typeof this.value_;
    var otherIndex = LeafNode2.VALUE_TYPE_ORDER.indexOf(otherLeafType);
    var thisIndex = LeafNode2.VALUE_TYPE_ORDER.indexOf(thisLeafType);
    assert(otherIndex >= 0, "Unknown leaf type: " + otherLeafType);
    assert(thisIndex >= 0, "Unknown leaf type: " + thisLeafType);
    if (otherIndex === thisIndex) {
      if (thisLeafType === "object") {
        return 0;
      } else {
        if (this.value_ < otherLeaf.value_) {
          return -1;
        } else if (this.value_ === otherLeaf.value_) {
          return 0;
        } else {
          return 1;
        }
      }
    } else {
      return thisIndex - otherIndex;
    }
  };
  LeafNode2.prototype.withIndex = function() {
    return this;
  };
  LeafNode2.prototype.isIndexed = function() {
    return true;
  };
  LeafNode2.prototype.equals = function(other) {
    if (other === this) {
      return true;
    } else if (other.isLeafNode()) {
      var otherLeaf = other;
      return this.value_ === otherLeaf.value_ && this.priorityNode_.equals(otherLeaf.priorityNode_);
    } else {
      return false;
    }
  };
  LeafNode2.VALUE_TYPE_ORDER = ["object", "boolean", "number", "string"];
  return LeafNode2;
}();
var nodeFromJSON$1;
var MAX_NODE$1;
function setNodeFromJSON(val) {
  nodeFromJSON$1 = val;
}
function setMaxNode(val) {
  MAX_NODE$1 = val;
}
var PriorityIndex = function(_super) {
  __extends(PriorityIndex2, _super);
  function PriorityIndex2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  PriorityIndex2.prototype.compare = function(a, b) {
    var aPriority = a.node.getPriority();
    var bPriority = b.node.getPriority();
    var indexCmp = aPriority.compareTo(bPriority);
    if (indexCmp === 0) {
      return nameCompare(a.name, b.name);
    } else {
      return indexCmp;
    }
  };
  PriorityIndex2.prototype.isDefinedOn = function(node) {
    return !node.getPriority().isEmpty();
  };
  PriorityIndex2.prototype.indexedValueChanged = function(oldNode, newNode) {
    return !oldNode.getPriority().equals(newNode.getPriority());
  };
  PriorityIndex2.prototype.minPost = function() {
    return NamedNode.MIN;
  };
  PriorityIndex2.prototype.maxPost = function() {
    return new NamedNode(MAX_NAME, new LeafNode("[PRIORITY-POST]", MAX_NODE$1));
  };
  PriorityIndex2.prototype.makePost = function(indexValue, name10) {
    var priorityNode = nodeFromJSON$1(indexValue);
    return new NamedNode(name10, new LeafNode("[PRIORITY-POST]", priorityNode));
  };
  PriorityIndex2.prototype.toString = function() {
    return ".priority";
  };
  return PriorityIndex2;
}(Index);
var PRIORITY_INDEX = new PriorityIndex();
var LOG_2 = Math.log(2);
var Base12Num = function() {
  function Base12Num2(length) {
    var logBase2 = function(num) {
      return parseInt(Math.log(num) / LOG_2, 10);
    };
    var bitMask = function(bits) {
      return parseInt(Array(bits + 1).join("1"), 2);
    };
    this.count = logBase2(length + 1);
    this.current_ = this.count - 1;
    var mask = bitMask(this.count);
    this.bits_ = length + 1 & mask;
  }
  Base12Num2.prototype.nextBitIsOne = function() {
    var result = !(this.bits_ & 1 << this.current_);
    this.current_--;
    return result;
  };
  return Base12Num2;
}();
var buildChildSet = function(childList, cmp, keyFn, mapSortFn) {
  childList.sort(cmp);
  var buildBalancedTree = function(low, high) {
    var length = high - low;
    var namedNode;
    var key;
    if (length === 0) {
      return null;
    } else if (length === 1) {
      namedNode = childList[low];
      key = keyFn ? keyFn(namedNode) : namedNode;
      return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, null, null);
    } else {
      var middle = parseInt(length / 2, 10) + low;
      var left = buildBalancedTree(low, middle);
      var right = buildBalancedTree(middle + 1, high);
      namedNode = childList[middle];
      key = keyFn ? keyFn(namedNode) : namedNode;
      return new LLRBNode(key, namedNode.node, LLRBNode.BLACK, left, right);
    }
  };
  var buildFrom12Array = function(base122) {
    var node = null;
    var root2 = null;
    var index = childList.length;
    var buildPennant = function(chunkSize2, color) {
      var low = index - chunkSize2;
      var high = index;
      index -= chunkSize2;
      var childTree = buildBalancedTree(low + 1, high);
      var namedNode = childList[low];
      var key = keyFn ? keyFn(namedNode) : namedNode;
      attachPennant(new LLRBNode(key, namedNode.node, color, null, childTree));
    };
    var attachPennant = function(pennant) {
      if (node) {
        node.left = pennant;
        node = pennant;
      } else {
        root2 = pennant;
        node = pennant;
      }
    };
    for (var i = 0; i < base122.count; ++i) {
      var isOne = base122.nextBitIsOne();
      var chunkSize = Math.pow(2, base122.count - (i + 1));
      if (isOne) {
        buildPennant(chunkSize, LLRBNode.BLACK);
      } else {
        buildPennant(chunkSize, LLRBNode.BLACK);
        buildPennant(chunkSize, LLRBNode.RED);
      }
    }
    return root2;
  };
  var base12 = new Base12Num(childList.length);
  var root = buildFrom12Array(base12);
  return new SortedMap(mapSortFn || cmp, root);
};
var _defaultIndexMap;
var fallbackObject = {};
var IndexMap = function() {
  function IndexMap2(indexes_, indexSet_) {
    this.indexes_ = indexes_;
    this.indexSet_ = indexSet_;
  }
  Object.defineProperty(IndexMap2, "Default", {
    get: function() {
      assert(fallbackObject && PRIORITY_INDEX, "ChildrenNode.ts has not been loaded");
      _defaultIndexMap = _defaultIndexMap || new IndexMap2({ ".priority": fallbackObject }, { ".priority": PRIORITY_INDEX });
      return _defaultIndexMap;
    },
    enumerable: false,
    configurable: true
  });
  IndexMap2.prototype.get = function(indexKey) {
    var sortedMap = safeGet(this.indexes_, indexKey);
    if (!sortedMap) {
      throw new Error("No index defined for " + indexKey);
    }
    if (sortedMap instanceof SortedMap) {
      return sortedMap;
    } else {
      return null;
    }
  };
  IndexMap2.prototype.hasIndex = function(indexDefinition) {
    return contains(this.indexSet_, indexDefinition.toString());
  };
  IndexMap2.prototype.addIndex = function(indexDefinition, existingChildren) {
    assert(indexDefinition !== KEY_INDEX, "KeyIndex always exists and isn't meant to be added to the IndexMap.");
    var childList = [];
    var sawIndexedValue = false;
    var iter = existingChildren.getIterator(NamedNode.Wrap);
    var next = iter.getNext();
    while (next) {
      sawIndexedValue = sawIndexedValue || indexDefinition.isDefinedOn(next.node);
      childList.push(next);
      next = iter.getNext();
    }
    var newIndex;
    if (sawIndexedValue) {
      newIndex = buildChildSet(childList, indexDefinition.getCompare());
    } else {
      newIndex = fallbackObject;
    }
    var indexName = indexDefinition.toString();
    var newIndexSet = __assign({}, this.indexSet_);
    newIndexSet[indexName] = indexDefinition;
    var newIndexes = __assign({}, this.indexes_);
    newIndexes[indexName] = newIndex;
    return new IndexMap2(newIndexes, newIndexSet);
  };
  IndexMap2.prototype.addToIndexes = function(namedNode, existingChildren) {
    var _this = this;
    var newIndexes = map(this.indexes_, function(indexedChildren, indexName) {
      var index = safeGet(_this.indexSet_, indexName);
      assert(index, "Missing index implementation for " + indexName);
      if (indexedChildren === fallbackObject) {
        if (index.isDefinedOn(namedNode.node)) {
          var childList = [];
          var iter = existingChildren.getIterator(NamedNode.Wrap);
          var next = iter.getNext();
          while (next) {
            if (next.name !== namedNode.name) {
              childList.push(next);
            }
            next = iter.getNext();
          }
          childList.push(namedNode);
          return buildChildSet(childList, index.getCompare());
        } else {
          return fallbackObject;
        }
      } else {
        var existingSnap = existingChildren.get(namedNode.name);
        var newChildren = indexedChildren;
        if (existingSnap) {
          newChildren = newChildren.remove(new NamedNode(namedNode.name, existingSnap));
        }
        return newChildren.insert(namedNode, namedNode.node);
      }
    });
    return new IndexMap2(newIndexes, this.indexSet_);
  };
  IndexMap2.prototype.removeFromIndexes = function(namedNode, existingChildren) {
    var newIndexes = map(this.indexes_, function(indexedChildren) {
      if (indexedChildren === fallbackObject) {
        return indexedChildren;
      } else {
        var existingSnap = existingChildren.get(namedNode.name);
        if (existingSnap) {
          return indexedChildren.remove(new NamedNode(namedNode.name, existingSnap));
        } else {
          return indexedChildren;
        }
      }
    });
    return new IndexMap2(newIndexes, this.indexSet_);
  };
  return IndexMap2;
}();
var EMPTY_NODE;
var ChildrenNode = function() {
  function ChildrenNode2(children_, priorityNode_, indexMap_) {
    this.children_ = children_;
    this.priorityNode_ = priorityNode_;
    this.indexMap_ = indexMap_;
    this.lazyHash_ = null;
    if (this.priorityNode_) {
      validatePriorityNode(this.priorityNode_);
    }
    if (this.children_.isEmpty()) {
      assert(!this.priorityNode_ || this.priorityNode_.isEmpty(), "An empty node cannot have a priority");
    }
  }
  Object.defineProperty(ChildrenNode2, "EMPTY_NODE", {
    get: function() {
      return EMPTY_NODE || (EMPTY_NODE = new ChildrenNode2(new SortedMap(NAME_COMPARATOR), null, IndexMap.Default));
    },
    enumerable: false,
    configurable: true
  });
  ChildrenNode2.prototype.isLeafNode = function() {
    return false;
  };
  ChildrenNode2.prototype.getPriority = function() {
    return this.priorityNode_ || EMPTY_NODE;
  };
  ChildrenNode2.prototype.updatePriority = function(newPriorityNode) {
    if (this.children_.isEmpty()) {
      return this;
    } else {
      return new ChildrenNode2(this.children_, newPriorityNode, this.indexMap_);
    }
  };
  ChildrenNode2.prototype.getImmediateChild = function(childName) {
    if (childName === ".priority") {
      return this.getPriority();
    } else {
      var child3 = this.children_.get(childName);
      return child3 === null ? EMPTY_NODE : child3;
    }
  };
  ChildrenNode2.prototype.getChild = function(path) {
    var front = pathGetFront(path);
    if (front === null) {
      return this;
    }
    return this.getImmediateChild(front).getChild(pathPopFront(path));
  };
  ChildrenNode2.prototype.hasChild = function(childName) {
    return this.children_.get(childName) !== null;
  };
  ChildrenNode2.prototype.updateImmediateChild = function(childName, newChildNode) {
    assert(newChildNode, "We should always be passing snapshot nodes");
    if (childName === ".priority") {
      return this.updatePriority(newChildNode);
    } else {
      var namedNode = new NamedNode(childName, newChildNode);
      var newChildren = void 0, newIndexMap = void 0;
      if (newChildNode.isEmpty()) {
        newChildren = this.children_.remove(childName);
        newIndexMap = this.indexMap_.removeFromIndexes(namedNode, this.children_);
      } else {
        newChildren = this.children_.insert(childName, newChildNode);
        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);
      }
      var newPriority = newChildren.isEmpty() ? EMPTY_NODE : this.priorityNode_;
      return new ChildrenNode2(newChildren, newPriority, newIndexMap);
    }
  };
  ChildrenNode2.prototype.updateChild = function(path, newChildNode) {
    var front = pathGetFront(path);
    if (front === null) {
      return newChildNode;
    } else {
      assert(pathGetFront(path) !== ".priority" || pathGetLength(path) === 1, ".priority must be the last token in a path");
      var newImmediateChild = this.getImmediateChild(front).updateChild(pathPopFront(path), newChildNode);
      return this.updateImmediateChild(front, newImmediateChild);
    }
  };
  ChildrenNode2.prototype.isEmpty = function() {
    return this.children_.isEmpty();
  };
  ChildrenNode2.prototype.numChildren = function() {
    return this.children_.count();
  };
  ChildrenNode2.prototype.val = function(exportFormat) {
    if (this.isEmpty()) {
      return null;
    }
    var obj = {};
    var numKeys = 0, maxKey = 0, allIntegerKeys = true;
    this.forEachChild(PRIORITY_INDEX, function(key2, childNode) {
      obj[key2] = childNode.val(exportFormat);
      numKeys++;
      if (allIntegerKeys && ChildrenNode2.INTEGER_REGEXP_.test(key2)) {
        maxKey = Math.max(maxKey, Number(key2));
      } else {
        allIntegerKeys = false;
      }
    });
    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {
      var array = [];
      for (var key in obj) {
        array[key] = obj[key];
      }
      return array;
    } else {
      if (exportFormat && !this.getPriority().isEmpty()) {
        obj[".priority"] = this.getPriority().val();
      }
      return obj;
    }
  };
  ChildrenNode2.prototype.hash = function() {
    if (this.lazyHash_ === null) {
      var toHash_1 = "";
      if (!this.getPriority().isEmpty()) {
        toHash_1 += "priority:" + priorityHashText(this.getPriority().val()) + ":";
      }
      this.forEachChild(PRIORITY_INDEX, function(key, childNode) {
        var childHash = childNode.hash();
        if (childHash !== "") {
          toHash_1 += ":" + key + ":" + childHash;
        }
      });
      this.lazyHash_ = toHash_1 === "" ? "" : sha1(toHash_1);
    }
    return this.lazyHash_;
  };
  ChildrenNode2.prototype.getPredecessorChildName = function(childName, childNode, index) {
    var idx = this.resolveIndex_(index);
    if (idx) {
      var predecessor2 = idx.getPredecessorKey(new NamedNode(childName, childNode));
      return predecessor2 ? predecessor2.name : null;
    } else {
      return this.children_.getPredecessorKey(childName);
    }
  };
  ChildrenNode2.prototype.getFirstChildName = function(indexDefinition) {
    var idx = this.resolveIndex_(indexDefinition);
    if (idx) {
      var minKey = idx.minKey();
      return minKey && minKey.name;
    } else {
      return this.children_.minKey();
    }
  };
  ChildrenNode2.prototype.getFirstChild = function(indexDefinition) {
    var minKey = this.getFirstChildName(indexDefinition);
    if (minKey) {
      return new NamedNode(minKey, this.children_.get(minKey));
    } else {
      return null;
    }
  };
  ChildrenNode2.prototype.getLastChildName = function(indexDefinition) {
    var idx = this.resolveIndex_(indexDefinition);
    if (idx) {
      var maxKey = idx.maxKey();
      return maxKey && maxKey.name;
    } else {
      return this.children_.maxKey();
    }
  };
  ChildrenNode2.prototype.getLastChild = function(indexDefinition) {
    var maxKey = this.getLastChildName(indexDefinition);
    if (maxKey) {
      return new NamedNode(maxKey, this.children_.get(maxKey));
    } else {
      return null;
    }
  };
  ChildrenNode2.prototype.forEachChild = function(index, action) {
    var idx = this.resolveIndex_(index);
    if (idx) {
      return idx.inorderTraversal(function(wrappedNode) {
        return action(wrappedNode.name, wrappedNode.node);
      });
    } else {
      return this.children_.inorderTraversal(action);
    }
  };
  ChildrenNode2.prototype.getIterator = function(indexDefinition) {
    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);
  };
  ChildrenNode2.prototype.getIteratorFrom = function(startPost, indexDefinition) {
    var idx = this.resolveIndex_(indexDefinition);
    if (idx) {
      return idx.getIteratorFrom(startPost, function(key) {
        return key;
      });
    } else {
      var iterator = this.children_.getIteratorFrom(startPost.name, NamedNode.Wrap);
      var next = iterator.peek();
      while (next != null && indexDefinition.compare(next, startPost) < 0) {
        iterator.getNext();
        next = iterator.peek();
      }
      return iterator;
    }
  };
  ChildrenNode2.prototype.getReverseIterator = function(indexDefinition) {
    return this.getReverseIteratorFrom(indexDefinition.maxPost(), indexDefinition);
  };
  ChildrenNode2.prototype.getReverseIteratorFrom = function(endPost, indexDefinition) {
    var idx = this.resolveIndex_(indexDefinition);
    if (idx) {
      return idx.getReverseIteratorFrom(endPost, function(key) {
        return key;
      });
    } else {
      var iterator = this.children_.getReverseIteratorFrom(endPost.name, NamedNode.Wrap);
      var next = iterator.peek();
      while (next != null && indexDefinition.compare(next, endPost) > 0) {
        iterator.getNext();
        next = iterator.peek();
      }
      return iterator;
    }
  };
  ChildrenNode2.prototype.compareTo = function(other) {
    if (this.isEmpty()) {
      if (other.isEmpty()) {
        return 0;
      } else {
        return -1;
      }
    } else if (other.isLeafNode() || other.isEmpty()) {
      return 1;
    } else if (other === MAX_NODE) {
      return -1;
    } else {
      return 0;
    }
  };
  ChildrenNode2.prototype.withIndex = function(indexDefinition) {
    if (indexDefinition === KEY_INDEX || this.indexMap_.hasIndex(indexDefinition)) {
      return this;
    } else {
      var newIndexMap = this.indexMap_.addIndex(indexDefinition, this.children_);
      return new ChildrenNode2(this.children_, this.priorityNode_, newIndexMap);
    }
  };
  ChildrenNode2.prototype.isIndexed = function(index) {
    return index === KEY_INDEX || this.indexMap_.hasIndex(index);
  };
  ChildrenNode2.prototype.equals = function(other) {
    if (other === this) {
      return true;
    } else if (other.isLeafNode()) {
      return false;
    } else {
      var otherChildrenNode = other;
      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {
        return false;
      } else if (this.children_.count() === otherChildrenNode.children_.count()) {
        var thisIter = this.getIterator(PRIORITY_INDEX);
        var otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);
        var thisCurrent = thisIter.getNext();
        var otherCurrent = otherIter.getNext();
        while (thisCurrent && otherCurrent) {
          if (thisCurrent.name !== otherCurrent.name || !thisCurrent.node.equals(otherCurrent.node)) {
            return false;
          }
          thisCurrent = thisIter.getNext();
          otherCurrent = otherIter.getNext();
        }
        return thisCurrent === null && otherCurrent === null;
      } else {
        return false;
      }
    }
  };
  ChildrenNode2.prototype.resolveIndex_ = function(indexDefinition) {
    if (indexDefinition === KEY_INDEX) {
      return null;
    } else {
      return this.indexMap_.get(indexDefinition.toString());
    }
  };
  ChildrenNode2.INTEGER_REGEXP_ = /^(0|[1-9]\d*)$/;
  return ChildrenNode2;
}();
var MaxNode = function(_super) {
  __extends(MaxNode2, _super);
  function MaxNode2() {
    return _super.call(this, new SortedMap(NAME_COMPARATOR), ChildrenNode.EMPTY_NODE, IndexMap.Default) || this;
  }
  MaxNode2.prototype.compareTo = function(other) {
    if (other === this) {
      return 0;
    } else {
      return 1;
    }
  };
  MaxNode2.prototype.equals = function(other) {
    return other === this;
  };
  MaxNode2.prototype.getPriority = function() {
    return this;
  };
  MaxNode2.prototype.getImmediateChild = function(childName) {
    return ChildrenNode.EMPTY_NODE;
  };
  MaxNode2.prototype.isEmpty = function() {
    return false;
  };
  return MaxNode2;
}(ChildrenNode);
var MAX_NODE = new MaxNode();
Object.defineProperties(NamedNode, {
  MIN: {
    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)
  },
  MAX: {
    value: new NamedNode(MAX_NAME, MAX_NODE)
  }
});
KeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;
LeafNode.__childrenNodeConstructor = ChildrenNode;
setMaxNode$1(MAX_NODE);
setMaxNode(MAX_NODE);
var USE_HINZE = true;
function nodeFromJSON(json, priority) {
  if (priority === void 0) {
    priority = null;
  }
  if (json === null) {
    return ChildrenNode.EMPTY_NODE;
  }
  if (typeof json === "object" && ".priority" in json) {
    priority = json[".priority"];
  }
  assert(priority === null || typeof priority === "string" || typeof priority === "number" || typeof priority === "object" && ".sv" in priority, "Invalid priority type found: " + typeof priority);
  if (typeof json === "object" && ".value" in json && json[".value"] !== null) {
    json = json[".value"];
  }
  if (typeof json !== "object" || ".sv" in json) {
    var jsonLeaf = json;
    return new LeafNode(jsonLeaf, nodeFromJSON(priority));
  }
  if (!(json instanceof Array) && USE_HINZE) {
    var children_1 = [];
    var childrenHavePriority_1 = false;
    var hinzeJsonObj = json;
    each(hinzeJsonObj, function(key, child3) {
      if (key.substring(0, 1) !== ".") {
        var childNode = nodeFromJSON(child3);
        if (!childNode.isEmpty()) {
          childrenHavePriority_1 = childrenHavePriority_1 || !childNode.getPriority().isEmpty();
          children_1.push(new NamedNode(key, childNode));
        }
      }
    });
    if (children_1.length === 0) {
      return ChildrenNode.EMPTY_NODE;
    }
    var childSet = buildChildSet(children_1, NAME_ONLY_COMPARATOR, function(namedNode) {
      return namedNode.name;
    }, NAME_COMPARATOR);
    if (childrenHavePriority_1) {
      var sortedChildSet = buildChildSet(children_1, PRIORITY_INDEX.getCompare());
      return new ChildrenNode(childSet, nodeFromJSON(priority), new IndexMap({ ".priority": sortedChildSet }, { ".priority": PRIORITY_INDEX }));
    } else {
      return new ChildrenNode(childSet, nodeFromJSON(priority), IndexMap.Default);
    }
  } else {
    var node_1 = ChildrenNode.EMPTY_NODE;
    each(json, function(key, childData) {
      if (contains(json, key)) {
        if (key.substring(0, 1) !== ".") {
          var childNode = nodeFromJSON(childData);
          if (childNode.isLeafNode() || !childNode.isEmpty()) {
            node_1 = node_1.updateImmediateChild(key, childNode);
          }
        }
      }
    });
    return node_1.updatePriority(nodeFromJSON(priority));
  }
}
setNodeFromJSON(nodeFromJSON);
var PathIndex = function(_super) {
  __extends(PathIndex2, _super);
  function PathIndex2(indexPath_) {
    var _this = _super.call(this) || this;
    _this.indexPath_ = indexPath_;
    assert(!pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== ".priority", "Can't create PathIndex with empty path or .priority key");
    return _this;
  }
  PathIndex2.prototype.extractChild = function(snap) {
    return snap.getChild(this.indexPath_);
  };
  PathIndex2.prototype.isDefinedOn = function(node) {
    return !node.getChild(this.indexPath_).isEmpty();
  };
  PathIndex2.prototype.compare = function(a, b) {
    var aChild = this.extractChild(a.node);
    var bChild = this.extractChild(b.node);
    var indexCmp = aChild.compareTo(bChild);
    if (indexCmp === 0) {
      return nameCompare(a.name, b.name);
    } else {
      return indexCmp;
    }
  };
  PathIndex2.prototype.makePost = function(indexValue, name10) {
    var valueNode = nodeFromJSON(indexValue);
    var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, valueNode);
    return new NamedNode(name10, node);
  };
  PathIndex2.prototype.maxPost = function() {
    var node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);
    return new NamedNode(MAX_NAME, node);
  };
  PathIndex2.prototype.toString = function() {
    return pathSlice(this.indexPath_, 0).join("/");
  };
  return PathIndex2;
}(Index);
var ValueIndex = function(_super) {
  __extends(ValueIndex2, _super);
  function ValueIndex2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ValueIndex2.prototype.compare = function(a, b) {
    var indexCmp = a.node.compareTo(b.node);
    if (indexCmp === 0) {
      return nameCompare(a.name, b.name);
    } else {
      return indexCmp;
    }
  };
  ValueIndex2.prototype.isDefinedOn = function(node) {
    return true;
  };
  ValueIndex2.prototype.indexedValueChanged = function(oldNode, newNode) {
    return !oldNode.equals(newNode);
  };
  ValueIndex2.prototype.minPost = function() {
    return NamedNode.MIN;
  };
  ValueIndex2.prototype.maxPost = function() {
    return NamedNode.MAX;
  };
  ValueIndex2.prototype.makePost = function(indexValue, name10) {
    var valueNode = nodeFromJSON(indexValue);
    return new NamedNode(name10, valueNode);
  };
  ValueIndex2.prototype.toString = function() {
    return ".value";
  };
  return ValueIndex2;
}(Index);
var VALUE_INDEX = new ValueIndex();
var PUSH_CHARS = "-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz";
var MIN_PUSH_CHAR = "-";
var MAX_PUSH_CHAR = "z";
var MAX_KEY_LEN = 786;
var nextPushId = function() {
  var lastPushTime = 0;
  var lastRandChars = [];
  return function(now) {
    var duplicateTime = now === lastPushTime;
    lastPushTime = now;
    var i;
    var timeStampChars = new Array(8);
    for (i = 7; i >= 0; i--) {
      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);
      now = Math.floor(now / 64);
    }
    assert(now === 0, "Cannot push at time == 0");
    var id2 = timeStampChars.join("");
    if (!duplicateTime) {
      for (i = 0; i < 12; i++) {
        lastRandChars[i] = Math.floor(Math.random() * 64);
      }
    } else {
      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {
        lastRandChars[i] = 0;
      }
      lastRandChars[i]++;
    }
    for (i = 0; i < 12; i++) {
      id2 += PUSH_CHARS.charAt(lastRandChars[i]);
    }
    assert(id2.length === 20, "nextPushId: Length should be 20.");
    return id2;
  };
}();
var successor = function(key) {
  if (key === "" + INTEGER_32_MAX) {
    return MIN_PUSH_CHAR;
  }
  var keyAsInt = tryParseInt(key);
  if (keyAsInt != null) {
    return "" + (keyAsInt + 1);
  }
  var next = new Array(key.length);
  for (var i_1 = 0; i_1 < next.length; i_1++) {
    next[i_1] = key.charAt(i_1);
  }
  if (next.length < MAX_KEY_LEN) {
    next.push(MIN_PUSH_CHAR);
    return next.join("");
  }
  var i = next.length - 1;
  while (i >= 0 && next[i] === MAX_PUSH_CHAR) {
    i--;
  }
  if (i === -1) {
    return MAX_NAME;
  }
  var source = next[i];
  var sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);
  next[i] = sourcePlusOne;
  return next.slice(0, i + 1).join("");
};
var predecessor = function(key) {
  if (key === "" + INTEGER_32_MIN) {
    return MIN_NAME;
  }
  var keyAsInt = tryParseInt(key);
  if (keyAsInt != null) {
    return "" + (keyAsInt - 1);
  }
  var next = new Array(key.length);
  for (var i = 0; i < next.length; i++) {
    next[i] = key.charAt(i);
  }
  if (next[next.length - 1] === MIN_PUSH_CHAR) {
    if (next.length === 1) {
      return "" + INTEGER_32_MAX;
    }
    delete next[next.length - 1];
    return next.join("");
  }
  next[next.length - 1] = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(next[next.length - 1]) - 1);
  return next.join("") + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);
};
function changeValue(snapshotNode) {
  return { type: "value", snapshotNode };
}
function changeChildAdded(childName, snapshotNode) {
  return { type: "child_added", snapshotNode, childName };
}
function changeChildRemoved(childName, snapshotNode) {
  return { type: "child_removed", snapshotNode, childName };
}
function changeChildChanged(childName, snapshotNode, oldSnap) {
  return {
    type: "child_changed",
    snapshotNode,
    childName,
    oldSnap
  };
}
function changeChildMoved(childName, snapshotNode) {
  return { type: "child_moved", snapshotNode, childName };
}
var IndexedFilter = function() {
  function IndexedFilter2(index_) {
    this.index_ = index_;
  }
  IndexedFilter2.prototype.updateChild = function(snap, key, newChild, affectedPath, source, optChangeAccumulator) {
    assert(snap.isIndexed(this.index_), "A node must be indexed if only a child is updated");
    var oldChild = snap.getImmediateChild(key);
    if (oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))) {
      if (oldChild.isEmpty() === newChild.isEmpty()) {
        return snap;
      }
    }
    if (optChangeAccumulator != null) {
      if (newChild.isEmpty()) {
        if (snap.hasChild(key)) {
          optChangeAccumulator.trackChildChange(changeChildRemoved(key, oldChild));
        } else {
          assert(snap.isLeafNode(), "A child remove without an old child only makes sense on a leaf node");
        }
      } else if (oldChild.isEmpty()) {
        optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));
      } else {
        optChangeAccumulator.trackChildChange(changeChildChanged(key, newChild, oldChild));
      }
    }
    if (snap.isLeafNode() && newChild.isEmpty()) {
      return snap;
    } else {
      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);
    }
  };
  IndexedFilter2.prototype.updateFullNode = function(oldSnap, newSnap, optChangeAccumulator) {
    if (optChangeAccumulator != null) {
      if (!oldSnap.isLeafNode()) {
        oldSnap.forEachChild(PRIORITY_INDEX, function(key, childNode) {
          if (!newSnap.hasChild(key)) {
            optChangeAccumulator.trackChildChange(changeChildRemoved(key, childNode));
          }
        });
      }
      if (!newSnap.isLeafNode()) {
        newSnap.forEachChild(PRIORITY_INDEX, function(key, childNode) {
          if (oldSnap.hasChild(key)) {
            var oldChild = oldSnap.getImmediateChild(key);
            if (!oldChild.equals(childNode)) {
              optChangeAccumulator.trackChildChange(changeChildChanged(key, childNode, oldChild));
            }
          } else {
            optChangeAccumulator.trackChildChange(changeChildAdded(key, childNode));
          }
        });
      }
    }
    return newSnap.withIndex(this.index_);
  };
  IndexedFilter2.prototype.updatePriority = function(oldSnap, newPriority) {
    if (oldSnap.isEmpty()) {
      return ChildrenNode.EMPTY_NODE;
    } else {
      return oldSnap.updatePriority(newPriority);
    }
  };
  IndexedFilter2.prototype.filtersNodes = function() {
    return false;
  };
  IndexedFilter2.prototype.getIndexedFilter = function() {
    return this;
  };
  IndexedFilter2.prototype.getIndex = function() {
    return this.index_;
  };
  return IndexedFilter2;
}();
var RangedFilter = function() {
  function RangedFilter2(params) {
    this.indexedFilter_ = new IndexedFilter(params.getIndex());
    this.index_ = params.getIndex();
    this.startPost_ = RangedFilter2.getStartPost_(params);
    this.endPost_ = RangedFilter2.getEndPost_(params);
  }
  RangedFilter2.prototype.getStartPost = function() {
    return this.startPost_;
  };
  RangedFilter2.prototype.getEndPost = function() {
    return this.endPost_;
  };
  RangedFilter2.prototype.matches = function(node) {
    return this.index_.compare(this.getStartPost(), node) <= 0 && this.index_.compare(node, this.getEndPost()) <= 0;
  };
  RangedFilter2.prototype.updateChild = function(snap, key, newChild, affectedPath, source, optChangeAccumulator) {
    if (!this.matches(new NamedNode(key, newChild))) {
      newChild = ChildrenNode.EMPTY_NODE;
    }
    return this.indexedFilter_.updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);
  };
  RangedFilter2.prototype.updateFullNode = function(oldSnap, newSnap, optChangeAccumulator) {
    if (newSnap.isLeafNode()) {
      newSnap = ChildrenNode.EMPTY_NODE;
    }
    var filtered = newSnap.withIndex(this.index_);
    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);
    var self2 = this;
    newSnap.forEachChild(PRIORITY_INDEX, function(key, childNode) {
      if (!self2.matches(new NamedNode(key, childNode))) {
        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);
      }
    });
    return this.indexedFilter_.updateFullNode(oldSnap, filtered, optChangeAccumulator);
  };
  RangedFilter2.prototype.updatePriority = function(oldSnap, newPriority) {
    return oldSnap;
  };
  RangedFilter2.prototype.filtersNodes = function() {
    return true;
  };
  RangedFilter2.prototype.getIndexedFilter = function() {
    return this.indexedFilter_;
  };
  RangedFilter2.prototype.getIndex = function() {
    return this.index_;
  };
  RangedFilter2.getStartPost_ = function(params) {
    if (params.hasStart()) {
      var startName = params.getIndexStartName();
      return params.getIndex().makePost(params.getIndexStartValue(), startName);
    } else {
      return params.getIndex().minPost();
    }
  };
  RangedFilter2.getEndPost_ = function(params) {
    if (params.hasEnd()) {
      var endName = params.getIndexEndName();
      return params.getIndex().makePost(params.getIndexEndValue(), endName);
    } else {
      return params.getIndex().maxPost();
    }
  };
  return RangedFilter2;
}();
var LimitedFilter = function() {
  function LimitedFilter2(params) {
    this.rangedFilter_ = new RangedFilter(params);
    this.index_ = params.getIndex();
    this.limit_ = params.getLimit();
    this.reverse_ = !params.isViewFromLeft();
  }
  LimitedFilter2.prototype.updateChild = function(snap, key, newChild, affectedPath, source, optChangeAccumulator) {
    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {
      newChild = ChildrenNode.EMPTY_NODE;
    }
    if (snap.getImmediateChild(key).equals(newChild)) {
      return snap;
    } else if (snap.numChildren() < this.limit_) {
      return this.rangedFilter_.getIndexedFilter().updateChild(snap, key, newChild, affectedPath, source, optChangeAccumulator);
    } else {
      return this.fullLimitUpdateChild_(snap, key, newChild, source, optChangeAccumulator);
    }
  };
  LimitedFilter2.prototype.updateFullNode = function(oldSnap, newSnap, optChangeAccumulator) {
    var filtered;
    if (newSnap.isLeafNode() || newSnap.isEmpty()) {
      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);
    } else {
      if (this.limit_ * 2 < newSnap.numChildren() && newSnap.isIndexed(this.index_)) {
        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);
        var iterator = void 0;
        if (this.reverse_) {
          iterator = newSnap.getReverseIteratorFrom(this.rangedFilter_.getEndPost(), this.index_);
        } else {
          iterator = newSnap.getIteratorFrom(this.rangedFilter_.getStartPost(), this.index_);
        }
        var count = 0;
        while (iterator.hasNext() && count < this.limit_) {
          var next = iterator.getNext();
          var inRange = void 0;
          if (this.reverse_) {
            inRange = this.index_.compare(this.rangedFilter_.getStartPost(), next) <= 0;
          } else {
            inRange = this.index_.compare(next, this.rangedFilter_.getEndPost()) <= 0;
          }
          if (inRange) {
            filtered = filtered.updateImmediateChild(next.name, next.node);
            count++;
          } else {
            break;
          }
        }
      } else {
        filtered = newSnap.withIndex(this.index_);
        filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);
        var startPost = void 0;
        var endPost = void 0;
        var cmp = void 0;
        var iterator = void 0;
        if (this.reverse_) {
          iterator = filtered.getReverseIterator(this.index_);
          startPost = this.rangedFilter_.getEndPost();
          endPost = this.rangedFilter_.getStartPost();
          var indexCompare_1 = this.index_.getCompare();
          cmp = function(a, b) {
            return indexCompare_1(b, a);
          };
        } else {
          iterator = filtered.getIterator(this.index_);
          startPost = this.rangedFilter_.getStartPost();
          endPost = this.rangedFilter_.getEndPost();
          cmp = this.index_.getCompare();
        }
        var count = 0;
        var foundStartPost = false;
        while (iterator.hasNext()) {
          var next = iterator.getNext();
          if (!foundStartPost && cmp(startPost, next) <= 0) {
            foundStartPost = true;
          }
          var inRange = foundStartPost && count < this.limit_ && cmp(next, endPost) <= 0;
          if (inRange) {
            count++;
          } else {
            filtered = filtered.updateImmediateChild(next.name, ChildrenNode.EMPTY_NODE);
          }
        }
      }
    }
    return this.rangedFilter_.getIndexedFilter().updateFullNode(oldSnap, filtered, optChangeAccumulator);
  };
  LimitedFilter2.prototype.updatePriority = function(oldSnap, newPriority) {
    return oldSnap;
  };
  LimitedFilter2.prototype.filtersNodes = function() {
    return true;
  };
  LimitedFilter2.prototype.getIndexedFilter = function() {
    return this.rangedFilter_.getIndexedFilter();
  };
  LimitedFilter2.prototype.getIndex = function() {
    return this.index_;
  };
  LimitedFilter2.prototype.fullLimitUpdateChild_ = function(snap, childKey, childSnap, source, changeAccumulator) {
    var cmp;
    if (this.reverse_) {
      var indexCmp_1 = this.index_.getCompare();
      cmp = function(a, b) {
        return indexCmp_1(b, a);
      };
    } else {
      cmp = this.index_.getCompare();
    }
    var oldEventCache = snap;
    assert(oldEventCache.numChildren() === this.limit_, "");
    var newChildNamedNode = new NamedNode(childKey, childSnap);
    var windowBoundary = this.reverse_ ? oldEventCache.getFirstChild(this.index_) : oldEventCache.getLastChild(this.index_);
    var inRange = this.rangedFilter_.matches(newChildNamedNode);
    if (oldEventCache.hasChild(childKey)) {
      var oldChildSnap = oldEventCache.getImmediateChild(childKey);
      var nextChild = source.getChildAfterChild(this.index_, windowBoundary, this.reverse_);
      while (nextChild != null && (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))) {
        nextChild = source.getChildAfterChild(this.index_, nextChild, this.reverse_);
      }
      var compareNext = nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);
      var remainsInWindow = inRange && !childSnap.isEmpty() && compareNext >= 0;
      if (remainsInWindow) {
        if (changeAccumulator != null) {
          changeAccumulator.trackChildChange(changeChildChanged(childKey, childSnap, oldChildSnap));
        }
        return oldEventCache.updateImmediateChild(childKey, childSnap);
      } else {
        if (changeAccumulator != null) {
          changeAccumulator.trackChildChange(changeChildRemoved(childKey, oldChildSnap));
        }
        var newEventCache = oldEventCache.updateImmediateChild(childKey, ChildrenNode.EMPTY_NODE);
        var nextChildInRange = nextChild != null && this.rangedFilter_.matches(nextChild);
        if (nextChildInRange) {
          if (changeAccumulator != null) {
            changeAccumulator.trackChildChange(changeChildAdded(nextChild.name, nextChild.node));
          }
          return newEventCache.updateImmediateChild(nextChild.name, nextChild.node);
        } else {
          return newEventCache;
        }
      }
    } else if (childSnap.isEmpty()) {
      return snap;
    } else if (inRange) {
      if (cmp(windowBoundary, newChildNamedNode) >= 0) {
        if (changeAccumulator != null) {
          changeAccumulator.trackChildChange(changeChildRemoved(windowBoundary.name, windowBoundary.node));
          changeAccumulator.trackChildChange(changeChildAdded(childKey, childSnap));
        }
        return oldEventCache.updateImmediateChild(childKey, childSnap).updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);
      } else {
        return snap;
      }
    } else {
      return snap;
    }
  };
  return LimitedFilter2;
}();
var QueryParams = function() {
  function QueryParams2() {
    this.limitSet_ = false;
    this.startSet_ = false;
    this.startNameSet_ = false;
    this.startAfterSet_ = false;
    this.endSet_ = false;
    this.endNameSet_ = false;
    this.endBeforeSet_ = false;
    this.limit_ = 0;
    this.viewFrom_ = "";
    this.indexStartValue_ = null;
    this.indexStartName_ = "";
    this.indexEndValue_ = null;
    this.indexEndName_ = "";
    this.index_ = PRIORITY_INDEX;
  }
  QueryParams2.prototype.hasStart = function() {
    return this.startSet_;
  };
  QueryParams2.prototype.hasStartAfter = function() {
    return this.startAfterSet_;
  };
  QueryParams2.prototype.hasEndBefore = function() {
    return this.endBeforeSet_;
  };
  QueryParams2.prototype.isViewFromLeft = function() {
    if (this.viewFrom_ === "") {
      return this.startSet_;
    } else {
      return this.viewFrom_ === "l";
    }
  };
  QueryParams2.prototype.getIndexStartValue = function() {
    assert(this.startSet_, "Only valid if start has been set");
    return this.indexStartValue_;
  };
  QueryParams2.prototype.getIndexStartName = function() {
    assert(this.startSet_, "Only valid if start has been set");
    if (this.startNameSet_) {
      return this.indexStartName_;
    } else {
      return MIN_NAME;
    }
  };
  QueryParams2.prototype.hasEnd = function() {
    return this.endSet_;
  };
  QueryParams2.prototype.getIndexEndValue = function() {
    assert(this.endSet_, "Only valid if end has been set");
    return this.indexEndValue_;
  };
  QueryParams2.prototype.getIndexEndName = function() {
    assert(this.endSet_, "Only valid if end has been set");
    if (this.endNameSet_) {
      return this.indexEndName_;
    } else {
      return MAX_NAME;
    }
  };
  QueryParams2.prototype.hasLimit = function() {
    return this.limitSet_;
  };
  QueryParams2.prototype.hasAnchoredLimit = function() {
    return this.limitSet_ && this.viewFrom_ !== "";
  };
  QueryParams2.prototype.getLimit = function() {
    assert(this.limitSet_, "Only valid if limit has been set");
    return this.limit_;
  };
  QueryParams2.prototype.getIndex = function() {
    return this.index_;
  };
  QueryParams2.prototype.loadsAllData = function() {
    return !(this.startSet_ || this.endSet_ || this.limitSet_);
  };
  QueryParams2.prototype.isDefault = function() {
    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;
  };
  QueryParams2.prototype.copy = function() {
    var copy = new QueryParams2();
    copy.limitSet_ = this.limitSet_;
    copy.limit_ = this.limit_;
    copy.startSet_ = this.startSet_;
    copy.indexStartValue_ = this.indexStartValue_;
    copy.startNameSet_ = this.startNameSet_;
    copy.indexStartName_ = this.indexStartName_;
    copy.endSet_ = this.endSet_;
    copy.indexEndValue_ = this.indexEndValue_;
    copy.endNameSet_ = this.endNameSet_;
    copy.indexEndName_ = this.indexEndName_;
    copy.index_ = this.index_;
    copy.viewFrom_ = this.viewFrom_;
    return copy;
  };
  return QueryParams2;
}();
function queryParamsGetNodeFilter(queryParams) {
  if (queryParams.loadsAllData()) {
    return new IndexedFilter(queryParams.getIndex());
  } else if (queryParams.hasLimit()) {
    return new LimitedFilter(queryParams);
  } else {
    return new RangedFilter(queryParams);
  }
}
function queryParamsLimitToFirst(queryParams, newLimit) {
  var newParams = queryParams.copy();
  newParams.limitSet_ = true;
  newParams.limit_ = newLimit;
  newParams.viewFrom_ = "l";
  return newParams;
}
function queryParamsLimitToLast(queryParams, newLimit) {
  var newParams = queryParams.copy();
  newParams.limitSet_ = true;
  newParams.limit_ = newLimit;
  newParams.viewFrom_ = "r";
  return newParams;
}
function queryParamsStartAt(queryParams, indexValue, key) {
  var newParams = queryParams.copy();
  newParams.startSet_ = true;
  if (indexValue === void 0) {
    indexValue = null;
  }
  newParams.indexStartValue_ = indexValue;
  if (key != null) {
    newParams.startNameSet_ = true;
    newParams.indexStartName_ = key;
  } else {
    newParams.startNameSet_ = false;
    newParams.indexStartName_ = "";
  }
  return newParams;
}
function queryParamsStartAfter(queryParams, indexValue, key) {
  var params;
  if (queryParams.index_ === KEY_INDEX) {
    if (typeof indexValue === "string") {
      indexValue = successor(indexValue);
    }
    params = queryParamsStartAt(queryParams, indexValue, key);
  } else {
    var childKey = void 0;
    if (key == null) {
      childKey = MAX_NAME;
    } else {
      childKey = successor(key);
    }
    params = queryParamsStartAt(queryParams, indexValue, childKey);
  }
  params.startAfterSet_ = true;
  return params;
}
function queryParamsEndAt(queryParams, indexValue, key) {
  var newParams = queryParams.copy();
  newParams.endSet_ = true;
  if (indexValue === void 0) {
    indexValue = null;
  }
  newParams.indexEndValue_ = indexValue;
  if (key !== void 0) {
    newParams.endNameSet_ = true;
    newParams.indexEndName_ = key;
  } else {
    newParams.endNameSet_ = false;
    newParams.indexEndName_ = "";
  }
  return newParams;
}
function queryParamsEndBefore(queryParams, indexValue, key) {
  var childKey;
  var params;
  if (queryParams.index_ === KEY_INDEX) {
    if (typeof indexValue === "string") {
      indexValue = predecessor(indexValue);
    }
    params = queryParamsEndAt(queryParams, indexValue, key);
  } else {
    if (key == null) {
      childKey = MIN_NAME;
    } else {
      childKey = predecessor(key);
    }
    params = queryParamsEndAt(queryParams, indexValue, childKey);
  }
  params.endBeforeSet_ = true;
  return params;
}
function queryParamsOrderBy(queryParams, index) {
  var newParams = queryParams.copy();
  newParams.index_ = index;
  return newParams;
}
function queryParamsToRestQueryStringParameters(queryParams) {
  var qs2 = {};
  if (queryParams.isDefault()) {
    return qs2;
  }
  var orderBy;
  if (queryParams.index_ === PRIORITY_INDEX) {
    orderBy = "$priority";
  } else if (queryParams.index_ === VALUE_INDEX) {
    orderBy = "$value";
  } else if (queryParams.index_ === KEY_INDEX) {
    orderBy = "$key";
  } else {
    assert(queryParams.index_ instanceof PathIndex, "Unrecognized index type!");
    orderBy = queryParams.index_.toString();
  }
  qs2["orderBy"] = stringify(orderBy);
  if (queryParams.startSet_) {
    qs2["startAt"] = stringify(queryParams.indexStartValue_);
    if (queryParams.startNameSet_) {
      qs2["startAt"] += "," + stringify(queryParams.indexStartName_);
    }
  }
  if (queryParams.endSet_) {
    qs2["endAt"] = stringify(queryParams.indexEndValue_);
    if (queryParams.endNameSet_) {
      qs2["endAt"] += "," + stringify(queryParams.indexEndName_);
    }
  }
  if (queryParams.limitSet_) {
    if (queryParams.isViewFromLeft()) {
      qs2["limitToFirst"] = queryParams.limit_;
    } else {
      qs2["limitToLast"] = queryParams.limit_;
    }
  }
  return qs2;
}
function queryParamsGetQueryObject(queryParams) {
  var obj = {};
  if (queryParams.startSet_) {
    obj["sp"] = queryParams.indexStartValue_;
    if (queryParams.startNameSet_) {
      obj["sn"] = queryParams.indexStartName_;
    }
  }
  if (queryParams.endSet_) {
    obj["ep"] = queryParams.indexEndValue_;
    if (queryParams.endNameSet_) {
      obj["en"] = queryParams.indexEndName_;
    }
  }
  if (queryParams.limitSet_) {
    obj["l"] = queryParams.limit_;
    var viewFrom = queryParams.viewFrom_;
    if (viewFrom === "") {
      if (queryParams.isViewFromLeft()) {
        viewFrom = "l";
      } else {
        viewFrom = "r";
      }
    }
    obj["vf"] = viewFrom;
  }
  if (queryParams.index_ !== PRIORITY_INDEX) {
    obj["i"] = queryParams.index_.toString();
  }
  return obj;
}
var ReadonlyRestClient = function(_super) {
  __extends(ReadonlyRestClient2, _super);
  function ReadonlyRestClient2(repoInfo_, onDataUpdate_, authTokenProvider_, appCheckTokenProvider_) {
    var _this = _super.call(this) || this;
    _this.repoInfo_ = repoInfo_;
    _this.onDataUpdate_ = onDataUpdate_;
    _this.authTokenProvider_ = authTokenProvider_;
    _this.appCheckTokenProvider_ = appCheckTokenProvider_;
    _this.log_ = logWrapper("p:rest:");
    _this.listens_ = {};
    return _this;
  }
  ReadonlyRestClient2.prototype.reportStats = function(stats2) {
    throw new Error("Method not implemented.");
  };
  ReadonlyRestClient2.getListenId_ = function(query2, tag) {
    if (tag !== void 0) {
      return "tag$" + tag;
    } else {
      assert(query2._queryParams.isDefault(), "should have a tag if it's not a default query.");
      return query2._path.toString();
    }
  };
  ReadonlyRestClient2.prototype.listen = function(query2, currentHashFn, tag, onComplete) {
    var _this = this;
    var pathString = query2._path.toString();
    this.log_("Listen called for " + pathString + " " + query2._queryIdentifier);
    var listenId = ReadonlyRestClient2.getListenId_(query2, tag);
    var thisListen = {};
    this.listens_[listenId] = thisListen;
    var queryStringParameters = queryParamsToRestQueryStringParameters(query2._queryParams);
    this.restRequest_(pathString + ".json", queryStringParameters, function(error2, result) {
      var data = result;
      if (error2 === 404) {
        data = null;
        error2 = null;
      }
      if (error2 === null) {
        _this.onDataUpdate_(pathString, data, false, tag);
      }
      if (safeGet(_this.listens_, listenId) === thisListen) {
        var status_1;
        if (!error2) {
          status_1 = "ok";
        } else if (error2 === 401) {
          status_1 = "permission_denied";
        } else {
          status_1 = "rest_error:" + error2;
        }
        onComplete(status_1, null);
      }
    });
  };
  ReadonlyRestClient2.prototype.unlisten = function(query2, tag) {
    var listenId = ReadonlyRestClient2.getListenId_(query2, tag);
    delete this.listens_[listenId];
  };
  ReadonlyRestClient2.prototype.get = function(query2) {
    var _this = this;
    var queryStringParameters = queryParamsToRestQueryStringParameters(query2._queryParams);
    var pathString = query2._path.toString();
    var deferred = new Deferred();
    this.restRequest_(pathString + ".json", queryStringParameters, function(error2, result) {
      var data = result;
      if (error2 === 404) {
        data = null;
        error2 = null;
      }
      if (error2 === null) {
        _this.onDataUpdate_(pathString, data, false, null);
        deferred.resolve(data);
      } else {
        deferred.reject(new Error(data));
      }
    });
    return deferred.promise;
  };
  ReadonlyRestClient2.prototype.refreshAuthToken = function(token) {
  };
  ReadonlyRestClient2.prototype.restRequest_ = function(pathString, queryStringParameters, callback) {
    var _this = this;
    if (queryStringParameters === void 0) {
      queryStringParameters = {};
    }
    queryStringParameters["format"] = "export";
    return Promise.all([
      this.authTokenProvider_.getToken(false),
      this.appCheckTokenProvider_.getToken(false)
    ]).then(function(_a8) {
      var _b = __read(_a8, 2), authToken = _b[0], appCheckToken = _b[1];
      if (authToken && authToken.accessToken) {
        queryStringParameters["auth"] = authToken.accessToken;
      }
      if (appCheckToken && appCheckToken.token) {
        queryStringParameters["ac"] = appCheckToken.token;
      }
      var url = (_this.repoInfo_.secure ? "https://" : "http://") + _this.repoInfo_.host + pathString + "?ns=" + _this.repoInfo_.namespace + querystring(queryStringParameters);
      _this.log_("Sending REST request for " + url);
      var xhr = new XMLHttpRequest();
      xhr.onreadystatechange = function() {
        if (callback && xhr.readyState === 4) {
          _this.log_("REST Response for " + url + " received. status:", xhr.status, "response:", xhr.responseText);
          var res = null;
          if (xhr.status >= 200 && xhr.status < 300) {
            try {
              res = jsonEval(xhr.responseText);
            } catch (e) {
              warn("Failed to parse JSON response for " + url + ": " + xhr.responseText);
            }
            callback(null, res);
          } else {
            if (xhr.status !== 401 && xhr.status !== 404) {
              warn("Got unsuccessful REST response for " + url + " Status: " + xhr.status);
            }
            callback(xhr.status);
          }
          callback = null;
        }
      };
      xhr.open("GET", url, true);
      xhr.send();
    });
  };
  return ReadonlyRestClient2;
}(ServerActions);
var SnapshotHolder = function() {
  function SnapshotHolder2() {
    this.rootNode_ = ChildrenNode.EMPTY_NODE;
  }
  SnapshotHolder2.prototype.getNode = function(path) {
    return this.rootNode_.getChild(path);
  };
  SnapshotHolder2.prototype.updateSnapshot = function(path, newSnapshotNode) {
    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);
  };
  return SnapshotHolder2;
}();
function newSparseSnapshotTree() {
  return {
    value: null,
    children: new Map()
  };
}
function sparseSnapshotTreeRemember(sparseSnapshotTree, path, data) {
  if (pathIsEmpty(path)) {
    sparseSnapshotTree.value = data;
    sparseSnapshotTree.children.clear();
  } else if (sparseSnapshotTree.value !== null) {
    sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);
  } else {
    var childKey = pathGetFront(path);
    if (!sparseSnapshotTree.children.has(childKey)) {
      sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());
    }
    var child3 = sparseSnapshotTree.children.get(childKey);
    path = pathPopFront(path);
    sparseSnapshotTreeRemember(child3, path, data);
  }
}
function sparseSnapshotTreeForget(sparseSnapshotTree, path) {
  if (pathIsEmpty(path)) {
    sparseSnapshotTree.value = null;
    sparseSnapshotTree.children.clear();
    return true;
  } else {
    if (sparseSnapshotTree.value !== null) {
      if (sparseSnapshotTree.value.isLeafNode()) {
        return false;
      } else {
        var value = sparseSnapshotTree.value;
        sparseSnapshotTree.value = null;
        value.forEachChild(PRIORITY_INDEX, function(key, tree) {
          sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);
        });
        return sparseSnapshotTreeForget(sparseSnapshotTree, path);
      }
    } else if (sparseSnapshotTree.children.size > 0) {
      var childKey = pathGetFront(path);
      path = pathPopFront(path);
      if (sparseSnapshotTree.children.has(childKey)) {
        var safeToRemove = sparseSnapshotTreeForget(sparseSnapshotTree.children.get(childKey), path);
        if (safeToRemove) {
          sparseSnapshotTree.children.delete(childKey);
        }
      }
      return sparseSnapshotTree.children.size === 0;
    } else {
      return true;
    }
  }
}
function sparseSnapshotTreeForEachTree(sparseSnapshotTree, prefixPath, func) {
  if (sparseSnapshotTree.value !== null) {
    func(prefixPath, sparseSnapshotTree.value);
  } else {
    sparseSnapshotTreeForEachChild(sparseSnapshotTree, function(key, tree) {
      var path = new Path(prefixPath.toString() + "/" + key);
      sparseSnapshotTreeForEachTree(tree, path, func);
    });
  }
}
function sparseSnapshotTreeForEachChild(sparseSnapshotTree, func) {
  sparseSnapshotTree.children.forEach(function(tree, key) {
    func(key, tree);
  });
}
var StatsListener = function() {
  function StatsListener2(collection_) {
    this.collection_ = collection_;
    this.last_ = null;
  }
  StatsListener2.prototype.get = function() {
    var newStats = this.collection_.get();
    var delta = __assign({}, newStats);
    if (this.last_) {
      each(this.last_, function(stat, value) {
        delta[stat] = delta[stat] - value;
      });
    }
    this.last_ = newStats;
    return delta;
  };
  return StatsListener2;
}();
var FIRST_STATS_MIN_TIME = 10 * 1e3;
var FIRST_STATS_MAX_TIME = 30 * 1e3;
var REPORT_STATS_INTERVAL = 5 * 60 * 1e3;
var StatsReporter = function() {
  function StatsReporter2(collection, server_) {
    this.server_ = server_;
    this.statsToReport_ = {};
    this.statsListener_ = new StatsListener(collection);
    var timeout = FIRST_STATS_MIN_TIME + (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();
    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));
  }
  StatsReporter2.prototype.reportStats_ = function() {
    var _this = this;
    var stats2 = this.statsListener_.get();
    var reportedStats = {};
    var haveStatsToReport = false;
    each(stats2, function(stat, value) {
      if (value > 0 && contains(_this.statsToReport_, stat)) {
        reportedStats[stat] = value;
        haveStatsToReport = true;
      }
    });
    if (haveStatsToReport) {
      this.server_.reportStats(reportedStats);
    }
    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL));
  };
  return StatsReporter2;
}();
function statsReporterIncludeStat(reporter, stat) {
  reporter.statsToReport_[stat] = true;
}
var OperationType;
(function(OperationType2) {
  OperationType2[OperationType2["OVERWRITE"] = 0] = "OVERWRITE";
  OperationType2[OperationType2["MERGE"] = 1] = "MERGE";
  OperationType2[OperationType2["ACK_USER_WRITE"] = 2] = "ACK_USER_WRITE";
  OperationType2[OperationType2["LISTEN_COMPLETE"] = 3] = "LISTEN_COMPLETE";
})(OperationType || (OperationType = {}));
function newOperationSourceUser() {
  return {
    fromUser: true,
    fromServer: false,
    queryId: null,
    tagged: false
  };
}
function newOperationSourceServer() {
  return {
    fromUser: false,
    fromServer: true,
    queryId: null,
    tagged: false
  };
}
function newOperationSourceServerTaggedQuery(queryId) {
  return {
    fromUser: false,
    fromServer: true,
    queryId,
    tagged: true
  };
}
var AckUserWrite = function() {
  function AckUserWrite2(path, affectedTree, revert) {
    this.path = path;
    this.affectedTree = affectedTree;
    this.revert = revert;
    this.type = OperationType.ACK_USER_WRITE;
    this.source = newOperationSourceUser();
  }
  AckUserWrite2.prototype.operationForChild = function(childName) {
    if (!pathIsEmpty(this.path)) {
      assert(pathGetFront(this.path) === childName, "operationForChild called for unrelated child.");
      return new AckUserWrite2(pathPopFront(this.path), this.affectedTree, this.revert);
    } else if (this.affectedTree.value != null) {
      assert(this.affectedTree.children.isEmpty(), "affectedTree should not have overlapping affected paths.");
      return this;
    } else {
      var childTree = this.affectedTree.subtree(new Path(childName));
      return new AckUserWrite2(newEmptyPath(), childTree, this.revert);
    }
  };
  return AckUserWrite2;
}();
var ListenComplete = function() {
  function ListenComplete2(source, path) {
    this.source = source;
    this.path = path;
    this.type = OperationType.LISTEN_COMPLETE;
  }
  ListenComplete2.prototype.operationForChild = function(childName) {
    if (pathIsEmpty(this.path)) {
      return new ListenComplete2(this.source, newEmptyPath());
    } else {
      return new ListenComplete2(this.source, pathPopFront(this.path));
    }
  };
  return ListenComplete2;
}();
var Overwrite = function() {
  function Overwrite2(source, path, snap) {
    this.source = source;
    this.path = path;
    this.snap = snap;
    this.type = OperationType.OVERWRITE;
  }
  Overwrite2.prototype.operationForChild = function(childName) {
    if (pathIsEmpty(this.path)) {
      return new Overwrite2(this.source, newEmptyPath(), this.snap.getImmediateChild(childName));
    } else {
      return new Overwrite2(this.source, pathPopFront(this.path), this.snap);
    }
  };
  return Overwrite2;
}();
var Merge = function() {
  function Merge2(source, path, children) {
    this.source = source;
    this.path = path;
    this.children = children;
    this.type = OperationType.MERGE;
  }
  Merge2.prototype.operationForChild = function(childName) {
    if (pathIsEmpty(this.path)) {
      var childTree = this.children.subtree(new Path(childName));
      if (childTree.isEmpty()) {
        return null;
      } else if (childTree.value) {
        return new Overwrite(this.source, newEmptyPath(), childTree.value);
      } else {
        return new Merge2(this.source, newEmptyPath(), childTree);
      }
    } else {
      assert(pathGetFront(this.path) === childName, "Can't get a merge for a child not on the path of the operation");
      return new Merge2(this.source, pathPopFront(this.path), this.children);
    }
  };
  Merge2.prototype.toString = function() {
    return "Operation(" + this.path + ": " + this.source.toString() + " merge: " + this.children.toString() + ")";
  };
  return Merge2;
}();
var CacheNode = function() {
  function CacheNode2(node_, fullyInitialized_, filtered_) {
    this.node_ = node_;
    this.fullyInitialized_ = fullyInitialized_;
    this.filtered_ = filtered_;
  }
  CacheNode2.prototype.isFullyInitialized = function() {
    return this.fullyInitialized_;
  };
  CacheNode2.prototype.isFiltered = function() {
    return this.filtered_;
  };
  CacheNode2.prototype.isCompleteForPath = function(path) {
    if (pathIsEmpty(path)) {
      return this.isFullyInitialized() && !this.filtered_;
    }
    var childKey = pathGetFront(path);
    return this.isCompleteForChild(childKey);
  };
  CacheNode2.prototype.isCompleteForChild = function(key) {
    return this.isFullyInitialized() && !this.filtered_ || this.node_.hasChild(key);
  };
  CacheNode2.prototype.getNode = function() {
    return this.node_;
  };
  return CacheNode2;
}();
var EventGenerator = function() {
  function EventGenerator2(query_) {
    this.query_ = query_;
    this.index_ = this.query_._queryParams.getIndex();
  }
  return EventGenerator2;
}();
function eventGeneratorGenerateEventsForChanges(eventGenerator, changes, eventCache, eventRegistrations) {
  var events = [];
  var moves = [];
  changes.forEach(function(change) {
    if (change.type === "child_changed" && eventGenerator.index_.indexedValueChanged(change.oldSnap, change.snapshotNode)) {
      moves.push(changeChildMoved(change.childName, change.snapshotNode));
    }
  });
  eventGeneratorGenerateEventsForType(eventGenerator, events, "child_removed", changes, eventRegistrations, eventCache);
  eventGeneratorGenerateEventsForType(eventGenerator, events, "child_added", changes, eventRegistrations, eventCache);
  eventGeneratorGenerateEventsForType(eventGenerator, events, "child_moved", moves, eventRegistrations, eventCache);
  eventGeneratorGenerateEventsForType(eventGenerator, events, "child_changed", changes, eventRegistrations, eventCache);
  eventGeneratorGenerateEventsForType(eventGenerator, events, "value", changes, eventRegistrations, eventCache);
  return events;
}
function eventGeneratorGenerateEventsForType(eventGenerator, events, eventType, changes, registrations, eventCache) {
  var filteredChanges = changes.filter(function(change) {
    return change.type === eventType;
  });
  filteredChanges.sort(function(a, b) {
    return eventGeneratorCompareChanges(eventGenerator, a, b);
  });
  filteredChanges.forEach(function(change) {
    var materializedChange = eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache);
    registrations.forEach(function(registration) {
      if (registration.respondsTo(change.type)) {
        events.push(registration.createEvent(materializedChange, eventGenerator.query_));
      }
    });
  });
}
function eventGeneratorMaterializeSingleChange(eventGenerator, change, eventCache) {
  if (change.type === "value" || change.type === "child_removed") {
    return change;
  } else {
    change.prevName = eventCache.getPredecessorChildName(change.childName, change.snapshotNode, eventGenerator.index_);
    return change;
  }
}
function eventGeneratorCompareChanges(eventGenerator, a, b) {
  if (a.childName == null || b.childName == null) {
    throw assertionError("Should only compare child_ events.");
  }
  var aWrapped = new NamedNode(a.childName, a.snapshotNode);
  var bWrapped = new NamedNode(b.childName, b.snapshotNode);
  return eventGenerator.index_.compare(aWrapped, bWrapped);
}
function newViewCache(eventCache, serverCache) {
  return { eventCache, serverCache };
}
function viewCacheUpdateEventSnap(viewCache, eventSnap, complete, filtered) {
  return newViewCache(new CacheNode(eventSnap, complete, filtered), viewCache.serverCache);
}
function viewCacheUpdateServerSnap(viewCache, serverSnap, complete, filtered) {
  return newViewCache(viewCache.eventCache, new CacheNode(serverSnap, complete, filtered));
}
function viewCacheGetCompleteEventSnap(viewCache) {
  return viewCache.eventCache.isFullyInitialized() ? viewCache.eventCache.getNode() : null;
}
function viewCacheGetCompleteServerSnap(viewCache) {
  return viewCache.serverCache.isFullyInitialized() ? viewCache.serverCache.getNode() : null;
}
var emptyChildrenSingleton;
var EmptyChildren = function() {
  if (!emptyChildrenSingleton) {
    emptyChildrenSingleton = new SortedMap(stringCompare);
  }
  return emptyChildrenSingleton;
};
var ImmutableTree = function() {
  function ImmutableTree2(value, children) {
    if (children === void 0) {
      children = EmptyChildren();
    }
    this.value = value;
    this.children = children;
  }
  ImmutableTree2.fromObject = function(obj) {
    var tree = new ImmutableTree2(null);
    each(obj, function(childPath, childSnap) {
      tree = tree.set(new Path(childPath), childSnap);
    });
    return tree;
  };
  ImmutableTree2.prototype.isEmpty = function() {
    return this.value === null && this.children.isEmpty();
  };
  ImmutableTree2.prototype.findRootMostMatchingPathAndValue = function(relativePath, predicate) {
    if (this.value != null && predicate(this.value)) {
      return { path: newEmptyPath(), value: this.value };
    } else {
      if (pathIsEmpty(relativePath)) {
        return null;
      } else {
        var front = pathGetFront(relativePath);
        var child3 = this.children.get(front);
        if (child3 !== null) {
          var childExistingPathAndValue = child3.findRootMostMatchingPathAndValue(pathPopFront(relativePath), predicate);
          if (childExistingPathAndValue != null) {
            var fullPath = pathChild(new Path(front), childExistingPathAndValue.path);
            return { path: fullPath, value: childExistingPathAndValue.value };
          } else {
            return null;
          }
        } else {
          return null;
        }
      }
    }
  };
  ImmutableTree2.prototype.findRootMostValueAndPath = function(relativePath) {
    return this.findRootMostMatchingPathAndValue(relativePath, function() {
      return true;
    });
  };
  ImmutableTree2.prototype.subtree = function(relativePath) {
    if (pathIsEmpty(relativePath)) {
      return this;
    } else {
      var front = pathGetFront(relativePath);
      var childTree = this.children.get(front);
      if (childTree !== null) {
        return childTree.subtree(pathPopFront(relativePath));
      } else {
        return new ImmutableTree2(null);
      }
    }
  };
  ImmutableTree2.prototype.set = function(relativePath, toSet) {
    if (pathIsEmpty(relativePath)) {
      return new ImmutableTree2(toSet, this.children);
    } else {
      var front = pathGetFront(relativePath);
      var child3 = this.children.get(front) || new ImmutableTree2(null);
      var newChild = child3.set(pathPopFront(relativePath), toSet);
      var newChildren = this.children.insert(front, newChild);
      return new ImmutableTree2(this.value, newChildren);
    }
  };
  ImmutableTree2.prototype.remove = function(relativePath) {
    if (pathIsEmpty(relativePath)) {
      if (this.children.isEmpty()) {
        return new ImmutableTree2(null);
      } else {
        return new ImmutableTree2(null, this.children);
      }
    } else {
      var front = pathGetFront(relativePath);
      var child3 = this.children.get(front);
      if (child3) {
        var newChild = child3.remove(pathPopFront(relativePath));
        var newChildren = void 0;
        if (newChild.isEmpty()) {
          newChildren = this.children.remove(front);
        } else {
          newChildren = this.children.insert(front, newChild);
        }
        if (this.value === null && newChildren.isEmpty()) {
          return new ImmutableTree2(null);
        } else {
          return new ImmutableTree2(this.value, newChildren);
        }
      } else {
        return this;
      }
    }
  };
  ImmutableTree2.prototype.get = function(relativePath) {
    if (pathIsEmpty(relativePath)) {
      return this.value;
    } else {
      var front = pathGetFront(relativePath);
      var child3 = this.children.get(front);
      if (child3) {
        return child3.get(pathPopFront(relativePath));
      } else {
        return null;
      }
    }
  };
  ImmutableTree2.prototype.setTree = function(relativePath, newTree) {
    if (pathIsEmpty(relativePath)) {
      return newTree;
    } else {
      var front = pathGetFront(relativePath);
      var child3 = this.children.get(front) || new ImmutableTree2(null);
      var newChild = child3.setTree(pathPopFront(relativePath), newTree);
      var newChildren = void 0;
      if (newChild.isEmpty()) {
        newChildren = this.children.remove(front);
      } else {
        newChildren = this.children.insert(front, newChild);
      }
      return new ImmutableTree2(this.value, newChildren);
    }
  };
  ImmutableTree2.prototype.fold = function(fn2) {
    return this.fold_(newEmptyPath(), fn2);
  };
  ImmutableTree2.prototype.fold_ = function(pathSoFar, fn2) {
    var accum = {};
    this.children.inorderTraversal(function(childKey, childTree) {
      accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn2);
    });
    return fn2(pathSoFar, this.value, accum);
  };
  ImmutableTree2.prototype.findOnPath = function(path, f) {
    return this.findOnPath_(path, newEmptyPath(), f);
  };
  ImmutableTree2.prototype.findOnPath_ = function(pathToFollow, pathSoFar, f) {
    var result = this.value ? f(pathSoFar, this.value) : false;
    if (result) {
      return result;
    } else {
      if (pathIsEmpty(pathToFollow)) {
        return null;
      } else {
        var front = pathGetFront(pathToFollow);
        var nextChild = this.children.get(front);
        if (nextChild) {
          return nextChild.findOnPath_(pathPopFront(pathToFollow), pathChild(pathSoFar, front), f);
        } else {
          return null;
        }
      }
    }
  };
  ImmutableTree2.prototype.foreachOnPath = function(path, f) {
    return this.foreachOnPath_(path, newEmptyPath(), f);
  };
  ImmutableTree2.prototype.foreachOnPath_ = function(pathToFollow, currentRelativePath, f) {
    if (pathIsEmpty(pathToFollow)) {
      return this;
    } else {
      if (this.value) {
        f(currentRelativePath, this.value);
      }
      var front = pathGetFront(pathToFollow);
      var nextChild = this.children.get(front);
      if (nextChild) {
        return nextChild.foreachOnPath_(pathPopFront(pathToFollow), pathChild(currentRelativePath, front), f);
      } else {
        return new ImmutableTree2(null);
      }
    }
  };
  ImmutableTree2.prototype.foreach = function(f) {
    this.foreach_(newEmptyPath(), f);
  };
  ImmutableTree2.prototype.foreach_ = function(currentRelativePath, f) {
    this.children.inorderTraversal(function(childName, childTree) {
      childTree.foreach_(pathChild(currentRelativePath, childName), f);
    });
    if (this.value) {
      f(currentRelativePath, this.value);
    }
  };
  ImmutableTree2.prototype.foreachChild = function(f) {
    this.children.inorderTraversal(function(childName, childTree) {
      if (childTree.value) {
        f(childName, childTree.value);
      }
    });
  };
  return ImmutableTree2;
}();
var CompoundWrite = function() {
  function CompoundWrite2(writeTree_) {
    this.writeTree_ = writeTree_;
  }
  CompoundWrite2.empty = function() {
    return new CompoundWrite2(new ImmutableTree(null));
  };
  return CompoundWrite2;
}();
function compoundWriteAddWrite(compoundWrite, path, node) {
  if (pathIsEmpty(path)) {
    return new CompoundWrite(new ImmutableTree(node));
  } else {
    var rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);
    if (rootmost != null) {
      var rootMostPath = rootmost.path;
      var value = rootmost.value;
      var relativePath = newRelativePath(rootMostPath, path);
      value = value.updateChild(relativePath, node);
      return new CompoundWrite(compoundWrite.writeTree_.set(rootMostPath, value));
    } else {
      var subtree = new ImmutableTree(node);
      var newWriteTree2 = compoundWrite.writeTree_.setTree(path, subtree);
      return new CompoundWrite(newWriteTree2);
    }
  }
}
function compoundWriteAddWrites(compoundWrite, path, updates) {
  var newWrite = compoundWrite;
  each(updates, function(childKey, node) {
    newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);
  });
  return newWrite;
}
function compoundWriteRemoveWrite(compoundWrite, path) {
  if (pathIsEmpty(path)) {
    return CompoundWrite.empty();
  } else {
    var newWriteTree2 = compoundWrite.writeTree_.setTree(path, new ImmutableTree(null));
    return new CompoundWrite(newWriteTree2);
  }
}
function compoundWriteHasCompleteWrite(compoundWrite, path) {
  return compoundWriteGetCompleteNode(compoundWrite, path) != null;
}
function compoundWriteGetCompleteNode(compoundWrite, path) {
  var rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);
  if (rootmost != null) {
    return compoundWrite.writeTree_.get(rootmost.path).getChild(newRelativePath(rootmost.path, path));
  } else {
    return null;
  }
}
function compoundWriteGetCompleteChildren(compoundWrite) {
  var children = [];
  var node = compoundWrite.writeTree_.value;
  if (node != null) {
    if (!node.isLeafNode()) {
      node.forEachChild(PRIORITY_INDEX, function(childName, childNode) {
        children.push(new NamedNode(childName, childNode));
      });
    }
  } else {
    compoundWrite.writeTree_.children.inorderTraversal(function(childName, childTree) {
      if (childTree.value != null) {
        children.push(new NamedNode(childName, childTree.value));
      }
    });
  }
  return children;
}
function compoundWriteChildCompoundWrite(compoundWrite, path) {
  if (pathIsEmpty(path)) {
    return compoundWrite;
  } else {
    var shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);
    if (shadowingNode != null) {
      return new CompoundWrite(new ImmutableTree(shadowingNode));
    } else {
      return new CompoundWrite(compoundWrite.writeTree_.subtree(path));
    }
  }
}
function compoundWriteIsEmpty(compoundWrite) {
  return compoundWrite.writeTree_.isEmpty();
}
function compoundWriteApply(compoundWrite, node) {
  return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);
}
function applySubtreeWrite(relativePath, writeTree, node) {
  if (writeTree.value != null) {
    return node.updateChild(relativePath, writeTree.value);
  } else {
    var priorityWrite_1 = null;
    writeTree.children.inorderTraversal(function(childKey, childTree) {
      if (childKey === ".priority") {
        assert(childTree.value !== null, "Priority writes must always be leaf nodes");
        priorityWrite_1 = childTree.value;
      } else {
        node = applySubtreeWrite(pathChild(relativePath, childKey), childTree, node);
      }
    });
    if (!node.getChild(relativePath).isEmpty() && priorityWrite_1 !== null) {
      node = node.updateChild(pathChild(relativePath, ".priority"), priorityWrite_1);
    }
    return node;
  }
}
function writeTreeChildWrites(writeTree, path) {
  return newWriteTreeRef(path, writeTree);
}
function writeTreeAddOverwrite(writeTree, path, snap, writeId, visible) {
  assert(writeId > writeTree.lastWriteId, "Stacking an older write on top of newer ones");
  if (visible === void 0) {
    visible = true;
  }
  writeTree.allWrites.push({
    path,
    snap,
    writeId,
    visible
  });
  if (visible) {
    writeTree.visibleWrites = compoundWriteAddWrite(writeTree.visibleWrites, path, snap);
  }
  writeTree.lastWriteId = writeId;
}
function writeTreeAddMerge(writeTree, path, changedChildren, writeId) {
  assert(writeId > writeTree.lastWriteId, "Stacking an older merge on top of newer ones");
  writeTree.allWrites.push({
    path,
    children: changedChildren,
    writeId,
    visible: true
  });
  writeTree.visibleWrites = compoundWriteAddWrites(writeTree.visibleWrites, path, changedChildren);
  writeTree.lastWriteId = writeId;
}
function writeTreeGetWrite(writeTree, writeId) {
  for (var i = 0; i < writeTree.allWrites.length; i++) {
    var record = writeTree.allWrites[i];
    if (record.writeId === writeId) {
      return record;
    }
  }
  return null;
}
function writeTreeRemoveWrite(writeTree, writeId) {
  var idx = writeTree.allWrites.findIndex(function(s) {
    return s.writeId === writeId;
  });
  assert(idx >= 0, "removeWrite called with nonexistent writeId.");
  var writeToRemove = writeTree.allWrites[idx];
  writeTree.allWrites.splice(idx, 1);
  var removedWriteWasVisible = writeToRemove.visible;
  var removedWriteOverlapsWithOtherWrites = false;
  var i = writeTree.allWrites.length - 1;
  while (removedWriteWasVisible && i >= 0) {
    var currentWrite = writeTree.allWrites[i];
    if (currentWrite.visible) {
      if (i >= idx && writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)) {
        removedWriteWasVisible = false;
      } else if (pathContains(writeToRemove.path, currentWrite.path)) {
        removedWriteOverlapsWithOtherWrites = true;
      }
    }
    i--;
  }
  if (!removedWriteWasVisible) {
    return false;
  } else if (removedWriteOverlapsWithOtherWrites) {
    writeTreeResetTree_(writeTree);
    return true;
  } else {
    if (writeToRemove.snap) {
      writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, writeToRemove.path);
    } else {
      var children = writeToRemove.children;
      each(children, function(childName) {
        writeTree.visibleWrites = compoundWriteRemoveWrite(writeTree.visibleWrites, pathChild(writeToRemove.path, childName));
      });
    }
    return true;
  }
}
function writeTreeRecordContainsPath_(writeRecord, path) {
  if (writeRecord.snap) {
    return pathContains(writeRecord.path, path);
  } else {
    for (var childName in writeRecord.children) {
      if (writeRecord.children.hasOwnProperty(childName) && pathContains(pathChild(writeRecord.path, childName), path)) {
        return true;
      }
    }
    return false;
  }
}
function writeTreeResetTree_(writeTree) {
  writeTree.visibleWrites = writeTreeLayerTree_(writeTree.allWrites, writeTreeDefaultFilter_, newEmptyPath());
  if (writeTree.allWrites.length > 0) {
    writeTree.lastWriteId = writeTree.allWrites[writeTree.allWrites.length - 1].writeId;
  } else {
    writeTree.lastWriteId = -1;
  }
}
function writeTreeDefaultFilter_(write2) {
  return write2.visible;
}
function writeTreeLayerTree_(writes, filter, treeRoot) {
  var compoundWrite = CompoundWrite.empty();
  for (var i = 0; i < writes.length; ++i) {
    var write2 = writes[i];
    if (filter(write2)) {
      var writePath = write2.path;
      var relativePath = void 0;
      if (write2.snap) {
        if (pathContains(treeRoot, writePath)) {
          relativePath = newRelativePath(treeRoot, writePath);
          compoundWrite = compoundWriteAddWrite(compoundWrite, relativePath, write2.snap);
        } else if (pathContains(writePath, treeRoot)) {
          relativePath = newRelativePath(writePath, treeRoot);
          compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), write2.snap.getChild(relativePath));
        } else
          ;
      } else if (write2.children) {
        if (pathContains(treeRoot, writePath)) {
          relativePath = newRelativePath(treeRoot, writePath);
          compoundWrite = compoundWriteAddWrites(compoundWrite, relativePath, write2.children);
        } else if (pathContains(writePath, treeRoot)) {
          relativePath = newRelativePath(writePath, treeRoot);
          if (pathIsEmpty(relativePath)) {
            compoundWrite = compoundWriteAddWrites(compoundWrite, newEmptyPath(), write2.children);
          } else {
            var child3 = safeGet(write2.children, pathGetFront(relativePath));
            if (child3) {
              var deepNode = child3.getChild(pathPopFront(relativePath));
              compoundWrite = compoundWriteAddWrite(compoundWrite, newEmptyPath(), deepNode);
            }
          }
        } else
          ;
      } else {
        throw assertionError("WriteRecord should have .snap or .children");
      }
    }
  }
  return compoundWrite;
}
function writeTreeCalcCompleteEventCache(writeTree, treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {
  if (!writeIdsToExclude && !includeHiddenWrites) {
    var shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);
    if (shadowingNode != null) {
      return shadowingNode;
    } else {
      var subMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);
      if (compoundWriteIsEmpty(subMerge)) {
        return completeServerCache;
      } else if (completeServerCache == null && !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())) {
        return null;
      } else {
        var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;
        return compoundWriteApply(subMerge, layeredCache);
      }
    }
  } else {
    var merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);
    if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {
      return completeServerCache;
    } else {
      if (!includeHiddenWrites && completeServerCache == null && !compoundWriteHasCompleteWrite(merge, newEmptyPath())) {
        return null;
      } else {
        var filter = function(write2) {
          return (write2.visible || includeHiddenWrites) && (!writeIdsToExclude || !~writeIdsToExclude.indexOf(write2.writeId)) && (pathContains(write2.path, treePath) || pathContains(treePath, write2.path));
        };
        var mergeAtPath = writeTreeLayerTree_(writeTree.allWrites, filter, treePath);
        var layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;
        return compoundWriteApply(mergeAtPath, layeredCache);
      }
    }
  }
}
function writeTreeCalcCompleteEventChildren(writeTree, treePath, completeServerChildren) {
  var completeChildren = ChildrenNode.EMPTY_NODE;
  var topLevelSet = compoundWriteGetCompleteNode(writeTree.visibleWrites, treePath);
  if (topLevelSet) {
    if (!topLevelSet.isLeafNode()) {
      topLevelSet.forEachChild(PRIORITY_INDEX, function(childName, childSnap) {
        completeChildren = completeChildren.updateImmediateChild(childName, childSnap);
      });
    }
    return completeChildren;
  } else if (completeServerChildren) {
    var merge_1 = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);
    completeServerChildren.forEachChild(PRIORITY_INDEX, function(childName, childNode) {
      var node = compoundWriteApply(compoundWriteChildCompoundWrite(merge_1, new Path(childName)), childNode);
      completeChildren = completeChildren.updateImmediateChild(childName, node);
    });
    compoundWriteGetCompleteChildren(merge_1).forEach(function(namedNode) {
      completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);
    });
    return completeChildren;
  } else {
    var merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);
    compoundWriteGetCompleteChildren(merge).forEach(function(namedNode) {
      completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);
    });
    return completeChildren;
  }
}
function writeTreeCalcEventCacheAfterServerOverwrite(writeTree, treePath, childPath, existingEventSnap, existingServerSnap) {
  assert(existingEventSnap || existingServerSnap, "Either existingEventSnap or existingServerSnap must exist");
  var path = pathChild(treePath, childPath);
  if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {
    return null;
  } else {
    var childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);
    if (compoundWriteIsEmpty(childMerge)) {
      return existingServerSnap.getChild(childPath);
    } else {
      return compoundWriteApply(childMerge, existingServerSnap.getChild(childPath));
    }
  }
}
function writeTreeCalcCompleteChild(writeTree, treePath, childKey, existingServerSnap) {
  var path = pathChild(treePath, childKey);
  var shadowingNode = compoundWriteGetCompleteNode(writeTree.visibleWrites, path);
  if (shadowingNode != null) {
    return shadowingNode;
  } else {
    if (existingServerSnap.isCompleteForChild(childKey)) {
      var childMerge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, path);
      return compoundWriteApply(childMerge, existingServerSnap.getNode().getImmediateChild(childKey));
    } else {
      return null;
    }
  }
}
function writeTreeShadowingWrite(writeTree, path) {
  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);
}
function writeTreeCalcIndexedSlice(writeTree, treePath, completeServerData, startPost, count, reverse, index) {
  var toIterate;
  var merge = compoundWriteChildCompoundWrite(writeTree.visibleWrites, treePath);
  var shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());
  if (shadowingNode != null) {
    toIterate = shadowingNode;
  } else if (completeServerData != null) {
    toIterate = compoundWriteApply(merge, completeServerData);
  } else {
    return [];
  }
  toIterate = toIterate.withIndex(index);
  if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {
    var nodes = [];
    var cmp = index.getCompare();
    var iter = reverse ? toIterate.getReverseIteratorFrom(startPost, index) : toIterate.getIteratorFrom(startPost, index);
    var next = iter.getNext();
    while (next && nodes.length < count) {
      if (cmp(next, startPost) !== 0) {
        nodes.push(next);
      }
      next = iter.getNext();
    }
    return nodes;
  } else {
    return [];
  }
}
function newWriteTree() {
  return {
    visibleWrites: CompoundWrite.empty(),
    allWrites: [],
    lastWriteId: -1
  };
}
function writeTreeRefCalcCompleteEventCache(writeTreeRef, completeServerCache, writeIdsToExclude, includeHiddenWrites) {
  return writeTreeCalcCompleteEventCache(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites);
}
function writeTreeRefCalcCompleteEventChildren(writeTreeRef, completeServerChildren) {
  return writeTreeCalcCompleteEventChildren(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerChildren);
}
function writeTreeRefCalcEventCacheAfterServerOverwrite(writeTreeRef, path, existingEventSnap, existingServerSnap) {
  return writeTreeCalcEventCacheAfterServerOverwrite(writeTreeRef.writeTree, writeTreeRef.treePath, path, existingEventSnap, existingServerSnap);
}
function writeTreeRefShadowingWrite(writeTreeRef, path) {
  return writeTreeShadowingWrite(writeTreeRef.writeTree, pathChild(writeTreeRef.treePath, path));
}
function writeTreeRefCalcIndexedSlice(writeTreeRef, completeServerData, startPost, count, reverse, index) {
  return writeTreeCalcIndexedSlice(writeTreeRef.writeTree, writeTreeRef.treePath, completeServerData, startPost, count, reverse, index);
}
function writeTreeRefCalcCompleteChild(writeTreeRef, childKey, existingServerCache) {
  return writeTreeCalcCompleteChild(writeTreeRef.writeTree, writeTreeRef.treePath, childKey, existingServerCache);
}
function writeTreeRefChild(writeTreeRef, childName) {
  return newWriteTreeRef(pathChild(writeTreeRef.treePath, childName), writeTreeRef.writeTree);
}
function newWriteTreeRef(path, writeTree) {
  return {
    treePath: path,
    writeTree
  };
}
var ChildChangeAccumulator = function() {
  function ChildChangeAccumulator2() {
    this.changeMap = new Map();
  }
  ChildChangeAccumulator2.prototype.trackChildChange = function(change) {
    var type = change.type;
    var childKey = change.childName;
    assert(type === "child_added" || type === "child_changed" || type === "child_removed", "Only child changes supported for tracking");
    assert(childKey !== ".priority", "Only non-priority child changes can be tracked.");
    var oldChange = this.changeMap.get(childKey);
    if (oldChange) {
      var oldType = oldChange.type;
      if (type === "child_added" && oldType === "child_removed") {
        this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.snapshotNode));
      } else if (type === "child_removed" && oldType === "child_added") {
        this.changeMap.delete(childKey);
      } else if (type === "child_removed" && oldType === "child_changed") {
        this.changeMap.set(childKey, changeChildRemoved(childKey, oldChange.oldSnap));
      } else if (type === "child_changed" && oldType === "child_added") {
        this.changeMap.set(childKey, changeChildAdded(childKey, change.snapshotNode));
      } else if (type === "child_changed" && oldType === "child_changed") {
        this.changeMap.set(childKey, changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap));
      } else {
        throw assertionError("Illegal combination of changes: " + change + " occurred after " + oldChange);
      }
    } else {
      this.changeMap.set(childKey, change);
    }
  };
  ChildChangeAccumulator2.prototype.getChanges = function() {
    return Array.from(this.changeMap.values());
  };
  return ChildChangeAccumulator2;
}();
var NoCompleteChildSource_ = function() {
  function NoCompleteChildSource_2() {
  }
  NoCompleteChildSource_2.prototype.getCompleteChild = function(childKey) {
    return null;
  };
  NoCompleteChildSource_2.prototype.getChildAfterChild = function(index, child3, reverse) {
    return null;
  };
  return NoCompleteChildSource_2;
}();
var NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();
var WriteTreeCompleteChildSource = function() {
  function WriteTreeCompleteChildSource2(writes_, viewCache_, optCompleteServerCache_) {
    if (optCompleteServerCache_ === void 0) {
      optCompleteServerCache_ = null;
    }
    this.writes_ = writes_;
    this.viewCache_ = viewCache_;
    this.optCompleteServerCache_ = optCompleteServerCache_;
  }
  WriteTreeCompleteChildSource2.prototype.getCompleteChild = function(childKey) {
    var node = this.viewCache_.eventCache;
    if (node.isCompleteForChild(childKey)) {
      return node.getNode().getImmediateChild(childKey);
    } else {
      var serverNode = this.optCompleteServerCache_ != null ? new CacheNode(this.optCompleteServerCache_, true, false) : this.viewCache_.serverCache;
      return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);
    }
  };
  WriteTreeCompleteChildSource2.prototype.getChildAfterChild = function(index, child3, reverse) {
    var completeServerData = this.optCompleteServerCache_ != null ? this.optCompleteServerCache_ : viewCacheGetCompleteServerSnap(this.viewCache_);
    var nodes = writeTreeRefCalcIndexedSlice(this.writes_, completeServerData, child3, 1, reverse, index);
    if (nodes.length === 0) {
      return null;
    } else {
      return nodes[0];
    }
  };
  return WriteTreeCompleteChildSource2;
}();
function newViewProcessor(filter) {
  return { filter };
}
function viewProcessorAssertIndexed(viewProcessor, viewCache) {
  assert(viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()), "Event snap not indexed");
  assert(viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()), "Server snap not indexed");
}
function viewProcessorApplyOperation(viewProcessor, oldViewCache, operation, writesCache, completeCache) {
  var accumulator = new ChildChangeAccumulator();
  var newViewCache2, filterServerNode;
  if (operation.type === OperationType.OVERWRITE) {
    var overwrite = operation;
    if (overwrite.source.fromUser) {
      newViewCache2 = viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, accumulator);
    } else {
      assert(overwrite.source.fromServer, "Unknown source.");
      filterServerNode = overwrite.source.tagged || oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path);
      newViewCache2 = viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, overwrite.path, overwrite.snap, writesCache, completeCache, filterServerNode, accumulator);
    }
  } else if (operation.type === OperationType.MERGE) {
    var merge = operation;
    if (merge.source.fromUser) {
      newViewCache2 = viewProcessorApplyUserMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, accumulator);
    } else {
      assert(merge.source.fromServer, "Unknown source.");
      filterServerNode = merge.source.tagged || oldViewCache.serverCache.isFiltered();
      newViewCache2 = viewProcessorApplyServerMerge(viewProcessor, oldViewCache, merge.path, merge.children, writesCache, completeCache, filterServerNode, accumulator);
    }
  } else if (operation.type === OperationType.ACK_USER_WRITE) {
    var ackUserWrite = operation;
    if (!ackUserWrite.revert) {
      newViewCache2 = viewProcessorAckUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, ackUserWrite.affectedTree, writesCache, completeCache, accumulator);
    } else {
      newViewCache2 = viewProcessorRevertUserWrite(viewProcessor, oldViewCache, ackUserWrite.path, writesCache, completeCache, accumulator);
    }
  } else if (operation.type === OperationType.LISTEN_COMPLETE) {
    newViewCache2 = viewProcessorListenComplete(viewProcessor, oldViewCache, operation.path, writesCache, accumulator);
  } else {
    throw assertionError("Unknown operation type: " + operation.type);
  }
  var changes = accumulator.getChanges();
  viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache2, changes);
  return { viewCache: newViewCache2, changes };
}
function viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache2, accumulator) {
  var eventSnap = newViewCache2.eventCache;
  if (eventSnap.isFullyInitialized()) {
    var isLeafOrEmpty = eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();
    var oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);
    if (accumulator.length > 0 || !oldViewCache.eventCache.isFullyInitialized() || isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap) || !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())) {
      accumulator.push(changeValue(viewCacheGetCompleteEventSnap(newViewCache2)));
    }
  }
}
function viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, viewCache, changePath, writesCache, source, accumulator) {
  var oldEventSnap = viewCache.eventCache;
  if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {
    return viewCache;
  } else {
    var newEventCache = void 0, serverNode = void 0;
    if (pathIsEmpty(changePath)) {
      assert(viewCache.serverCache.isFullyInitialized(), "If change path is empty, we must have complete server data");
      if (viewCache.serverCache.isFiltered()) {
        var serverCache = viewCacheGetCompleteServerSnap(viewCache);
        var completeChildren = serverCache instanceof ChildrenNode ? serverCache : ChildrenNode.EMPTY_NODE;
        var completeEventChildren = writeTreeRefCalcCompleteEventChildren(writesCache, completeChildren);
        newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeEventChildren, accumulator);
      } else {
        var completeNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));
        newEventCache = viewProcessor.filter.updateFullNode(viewCache.eventCache.getNode(), completeNode, accumulator);
      }
    } else {
      var childKey = pathGetFront(changePath);
      if (childKey === ".priority") {
        assert(pathGetLength(changePath) === 1, "Can't have a priority with additional path components");
        var oldEventNode = oldEventSnap.getNode();
        serverNode = viewCache.serverCache.getNode();
        var updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventNode, serverNode);
        if (updatedPriority != null) {
          newEventCache = viewProcessor.filter.updatePriority(oldEventNode, updatedPriority);
        } else {
          newEventCache = oldEventSnap.getNode();
        }
      } else {
        var childChangePath = pathPopFront(changePath);
        var newEventChild = void 0;
        if (oldEventSnap.isCompleteForChild(childKey)) {
          serverNode = viewCache.serverCache.getNode();
          var eventChildUpdate = writeTreeRefCalcEventCacheAfterServerOverwrite(writesCache, changePath, oldEventSnap.getNode(), serverNode);
          if (eventChildUpdate != null) {
            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey).updateChild(childChangePath, eventChildUpdate);
          } else {
            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);
          }
        } else {
          newEventChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);
        }
        if (newEventChild != null) {
          newEventCache = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newEventChild, childChangePath, source, accumulator);
        } else {
          newEventCache = oldEventSnap.getNode();
        }
      }
    }
    return viewCacheUpdateEventSnap(viewCache, newEventCache, oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath), viewProcessor.filter.filtersNodes());
  }
}
function viewProcessorApplyServerOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, filterServerNode, accumulator) {
  var oldServerSnap = oldViewCache.serverCache;
  var newServerCache;
  var serverFilter = filterServerNode ? viewProcessor.filter : viewProcessor.filter.getIndexedFilter();
  if (pathIsEmpty(changePath)) {
    newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), changedSnap, null);
  } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {
    var newServerNode = oldServerSnap.getNode().updateChild(changePath, changedSnap);
    newServerCache = serverFilter.updateFullNode(oldServerSnap.getNode(), newServerNode, null);
  } else {
    var childKey = pathGetFront(changePath);
    if (!oldServerSnap.isCompleteForPath(changePath) && pathGetLength(changePath) > 1) {
      return oldViewCache;
    }
    var childChangePath = pathPopFront(changePath);
    var childNode = oldServerSnap.getNode().getImmediateChild(childKey);
    var newChildNode = childNode.updateChild(childChangePath, changedSnap);
    if (childKey === ".priority") {
      newServerCache = serverFilter.updatePriority(oldServerSnap.getNode(), newChildNode);
    } else {
      newServerCache = serverFilter.updateChild(oldServerSnap.getNode(), childKey, newChildNode, childChangePath, NO_COMPLETE_CHILD_SOURCE, null);
    }
  }
  var newViewCache2 = viewCacheUpdateServerSnap(oldViewCache, newServerCache, oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath), serverFilter.filtersNodes());
  var source = new WriteTreeCompleteChildSource(writesCache, newViewCache2, completeCache);
  return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache2, changePath, writesCache, source, accumulator);
}
function viewProcessorApplyUserOverwrite(viewProcessor, oldViewCache, changePath, changedSnap, writesCache, completeCache, accumulator) {
  var oldEventSnap = oldViewCache.eventCache;
  var newViewCache2, newEventCache;
  var source = new WriteTreeCompleteChildSource(writesCache, oldViewCache, completeCache);
  if (pathIsEmpty(changePath)) {
    newEventCache = viewProcessor.filter.updateFullNode(oldViewCache.eventCache.getNode(), changedSnap, accumulator);
    newViewCache2 = viewCacheUpdateEventSnap(oldViewCache, newEventCache, true, viewProcessor.filter.filtersNodes());
  } else {
    var childKey = pathGetFront(changePath);
    if (childKey === ".priority") {
      newEventCache = viewProcessor.filter.updatePriority(oldViewCache.eventCache.getNode(), changedSnap);
      newViewCache2 = viewCacheUpdateEventSnap(oldViewCache, newEventCache, oldEventSnap.isFullyInitialized(), oldEventSnap.isFiltered());
    } else {
      var childChangePath = pathPopFront(changePath);
      var oldChild = oldEventSnap.getNode().getImmediateChild(childKey);
      var newChild = void 0;
      if (pathIsEmpty(childChangePath)) {
        newChild = changedSnap;
      } else {
        var childNode = source.getCompleteChild(childKey);
        if (childNode != null) {
          if (pathGetBack(childChangePath) === ".priority" && childNode.getChild(pathParent(childChangePath)).isEmpty()) {
            newChild = childNode;
          } else {
            newChild = childNode.updateChild(childChangePath, changedSnap);
          }
        } else {
          newChild = ChildrenNode.EMPTY_NODE;
        }
      }
      if (!oldChild.equals(newChild)) {
        var newEventSnap = viewProcessor.filter.updateChild(oldEventSnap.getNode(), childKey, newChild, childChangePath, source, accumulator);
        newViewCache2 = viewCacheUpdateEventSnap(oldViewCache, newEventSnap, oldEventSnap.isFullyInitialized(), viewProcessor.filter.filtersNodes());
      } else {
        newViewCache2 = oldViewCache;
      }
    }
  }
  return newViewCache2;
}
function viewProcessorCacheHasChild(viewCache, childKey) {
  return viewCache.eventCache.isCompleteForChild(childKey);
}
function viewProcessorApplyUserMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, accumulator) {
  var curViewCache = viewCache;
  changedChildren.foreach(function(relativePath, childNode) {
    var writePath = pathChild(path, relativePath);
    if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {
      curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);
    }
  });
  changedChildren.foreach(function(relativePath, childNode) {
    var writePath = pathChild(path, relativePath);
    if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {
      curViewCache = viewProcessorApplyUserOverwrite(viewProcessor, curViewCache, writePath, childNode, writesCache, serverCache, accumulator);
    }
  });
  return curViewCache;
}
function viewProcessorApplyMerge(viewProcessor, node, merge) {
  merge.foreach(function(relativePath, childNode) {
    node = node.updateChild(relativePath, childNode);
  });
  return node;
}
function viewProcessorApplyServerMerge(viewProcessor, viewCache, path, changedChildren, writesCache, serverCache, filterServerNode, accumulator) {
  if (viewCache.serverCache.getNode().isEmpty() && !viewCache.serverCache.isFullyInitialized()) {
    return viewCache;
  }
  var curViewCache = viewCache;
  var viewMergeTree;
  if (pathIsEmpty(path)) {
    viewMergeTree = changedChildren;
  } else {
    viewMergeTree = new ImmutableTree(null).setTree(path, changedChildren);
  }
  var serverNode = viewCache.serverCache.getNode();
  viewMergeTree.children.inorderTraversal(function(childKey, childTree) {
    if (serverNode.hasChild(childKey)) {
      var serverChild = viewCache.serverCache.getNode().getImmediateChild(childKey);
      var newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childTree);
      curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);
    }
  });
  viewMergeTree.children.inorderTraversal(function(childKey, childMergeTree) {
    var isUnknownDeepMerge = !viewCache.serverCache.isCompleteForChild(childKey) && childMergeTree.value === void 0;
    if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {
      var serverChild = viewCache.serverCache.getNode().getImmediateChild(childKey);
      var newChild = viewProcessorApplyMerge(viewProcessor, serverChild, childMergeTree);
      curViewCache = viewProcessorApplyServerOverwrite(viewProcessor, curViewCache, new Path(childKey), newChild, writesCache, serverCache, filterServerNode, accumulator);
    }
  });
  return curViewCache;
}
function viewProcessorAckUserWrite(viewProcessor, viewCache, ackPath, affectedTree, writesCache, completeCache, accumulator) {
  if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {
    return viewCache;
  }
  var filterServerNode = viewCache.serverCache.isFiltered();
  var serverCache = viewCache.serverCache;
  if (affectedTree.value != null) {
    if (pathIsEmpty(ackPath) && serverCache.isFullyInitialized() || serverCache.isCompleteForPath(ackPath)) {
      return viewProcessorApplyServerOverwrite(viewProcessor, viewCache, ackPath, serverCache.getNode().getChild(ackPath), writesCache, completeCache, filterServerNode, accumulator);
    } else if (pathIsEmpty(ackPath)) {
      var changedChildren_1 = new ImmutableTree(null);
      serverCache.getNode().forEachChild(KEY_INDEX, function(name10, node) {
        changedChildren_1 = changedChildren_1.set(new Path(name10), node);
      });
      return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren_1, writesCache, completeCache, filterServerNode, accumulator);
    } else {
      return viewCache;
    }
  } else {
    var changedChildren_2 = new ImmutableTree(null);
    affectedTree.foreach(function(mergePath, value) {
      var serverCachePath = pathChild(ackPath, mergePath);
      if (serverCache.isCompleteForPath(serverCachePath)) {
        changedChildren_2 = changedChildren_2.set(mergePath, serverCache.getNode().getChild(serverCachePath));
      }
    });
    return viewProcessorApplyServerMerge(viewProcessor, viewCache, ackPath, changedChildren_2, writesCache, completeCache, filterServerNode, accumulator);
  }
}
function viewProcessorListenComplete(viewProcessor, viewCache, path, writesCache, accumulator) {
  var oldServerNode = viewCache.serverCache;
  var newViewCache2 = viewCacheUpdateServerSnap(viewCache, oldServerNode.getNode(), oldServerNode.isFullyInitialized() || pathIsEmpty(path), oldServerNode.isFiltered());
  return viewProcessorGenerateEventCacheAfterServerEvent(viewProcessor, newViewCache2, path, writesCache, NO_COMPLETE_CHILD_SOURCE, accumulator);
}
function viewProcessorRevertUserWrite(viewProcessor, viewCache, path, writesCache, completeServerCache, accumulator) {
  var complete;
  if (writeTreeRefShadowingWrite(writesCache, path) != null) {
    return viewCache;
  } else {
    var source = new WriteTreeCompleteChildSource(writesCache, viewCache, completeServerCache);
    var oldEventCache = viewCache.eventCache.getNode();
    var newEventCache = void 0;
    if (pathIsEmpty(path) || pathGetFront(path) === ".priority") {
      var newNode = void 0;
      if (viewCache.serverCache.isFullyInitialized()) {
        newNode = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));
      } else {
        var serverChildren = viewCache.serverCache.getNode();
        assert(serverChildren instanceof ChildrenNode, "serverChildren would be complete if leaf node");
        newNode = writeTreeRefCalcCompleteEventChildren(writesCache, serverChildren);
      }
      newNode = newNode;
      newEventCache = viewProcessor.filter.updateFullNode(oldEventCache, newNode, accumulator);
    } else {
      var childKey = pathGetFront(path);
      var newChild = writeTreeRefCalcCompleteChild(writesCache, childKey, viewCache.serverCache);
      if (newChild == null && viewCache.serverCache.isCompleteForChild(childKey)) {
        newChild = oldEventCache.getImmediateChild(childKey);
      }
      if (newChild != null) {
        newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, newChild, pathPopFront(path), source, accumulator);
      } else if (viewCache.eventCache.getNode().hasChild(childKey)) {
        newEventCache = viewProcessor.filter.updateChild(oldEventCache, childKey, ChildrenNode.EMPTY_NODE, pathPopFront(path), source, accumulator);
      } else {
        newEventCache = oldEventCache;
      }
      if (newEventCache.isEmpty() && viewCache.serverCache.isFullyInitialized()) {
        complete = writeTreeRefCalcCompleteEventCache(writesCache, viewCacheGetCompleteServerSnap(viewCache));
        if (complete.isLeafNode()) {
          newEventCache = viewProcessor.filter.updateFullNode(newEventCache, complete, accumulator);
        }
      }
    }
    complete = viewCache.serverCache.isFullyInitialized() || writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;
    return viewCacheUpdateEventSnap(viewCache, newEventCache, complete, viewProcessor.filter.filtersNodes());
  }
}
var View = function() {
  function View2(query_, initialViewCache) {
    this.query_ = query_;
    this.eventRegistrations_ = [];
    var params = this.query_._queryParams;
    var indexFilter = new IndexedFilter(params.getIndex());
    var filter = queryParamsGetNodeFilter(params);
    this.processor_ = newViewProcessor(filter);
    var initialServerCache = initialViewCache.serverCache;
    var initialEventCache = initialViewCache.eventCache;
    var serverSnap = indexFilter.updateFullNode(ChildrenNode.EMPTY_NODE, initialServerCache.getNode(), null);
    var eventSnap = filter.updateFullNode(ChildrenNode.EMPTY_NODE, initialEventCache.getNode(), null);
    var newServerCache = new CacheNode(serverSnap, initialServerCache.isFullyInitialized(), indexFilter.filtersNodes());
    var newEventCache = new CacheNode(eventSnap, initialEventCache.isFullyInitialized(), filter.filtersNodes());
    this.viewCache_ = newViewCache(newEventCache, newServerCache);
    this.eventGenerator_ = new EventGenerator(this.query_);
  }
  Object.defineProperty(View2.prototype, "query", {
    get: function() {
      return this.query_;
    },
    enumerable: false,
    configurable: true
  });
  return View2;
}();
function viewGetServerCache(view) {
  return view.viewCache_.serverCache.getNode();
}
function viewGetCompleteNode(view) {
  return viewCacheGetCompleteEventSnap(view.viewCache_);
}
function viewGetCompleteServerCache(view, path) {
  var cache = viewCacheGetCompleteServerSnap(view.viewCache_);
  if (cache) {
    if (view.query._queryParams.loadsAllData() || !pathIsEmpty(path) && !cache.getImmediateChild(pathGetFront(path)).isEmpty()) {
      return cache.getChild(path);
    }
  }
  return null;
}
function viewIsEmpty(view) {
  return view.eventRegistrations_.length === 0;
}
function viewAddEventRegistration(view, eventRegistration) {
  view.eventRegistrations_.push(eventRegistration);
}
function viewRemoveEventRegistration(view, eventRegistration, cancelError) {
  var cancelEvents = [];
  if (cancelError) {
    assert(eventRegistration == null, "A cancel should cancel all event registrations.");
    var path_1 = view.query._path;
    view.eventRegistrations_.forEach(function(registration) {
      var maybeEvent = registration.createCancelEvent(cancelError, path_1);
      if (maybeEvent) {
        cancelEvents.push(maybeEvent);
      }
    });
  }
  if (eventRegistration) {
    var remaining = [];
    for (var i = 0; i < view.eventRegistrations_.length; ++i) {
      var existing = view.eventRegistrations_[i];
      if (!existing.matches(eventRegistration)) {
        remaining.push(existing);
      } else if (eventRegistration.hasAnyCallback()) {
        remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));
        break;
      }
    }
    view.eventRegistrations_ = remaining;
  } else {
    view.eventRegistrations_ = [];
  }
  return cancelEvents;
}
function viewApplyOperation(view, operation, writesCache, completeServerCache) {
  if (operation.type === OperationType.MERGE && operation.source.queryId !== null) {
    assert(viewCacheGetCompleteServerSnap(view.viewCache_), "We should always have a full cache before handling merges");
    assert(viewCacheGetCompleteEventSnap(view.viewCache_), "Missing event cache, even though we have a server cache");
  }
  var oldViewCache = view.viewCache_;
  var result = viewProcessorApplyOperation(view.processor_, oldViewCache, operation, writesCache, completeServerCache);
  viewProcessorAssertIndexed(view.processor_, result.viewCache);
  assert(result.viewCache.serverCache.isFullyInitialized() || !oldViewCache.serverCache.isFullyInitialized(), "Once a server snap is complete, it should never go back");
  view.viewCache_ = result.viewCache;
  return viewGenerateEventsForChanges_(view, result.changes, result.viewCache.eventCache.getNode(), null);
}
function viewGetInitialEvents(view, registration) {
  var eventSnap = view.viewCache_.eventCache;
  var initialChanges = [];
  if (!eventSnap.getNode().isLeafNode()) {
    var eventNode = eventSnap.getNode();
    eventNode.forEachChild(PRIORITY_INDEX, function(key, childNode) {
      initialChanges.push(changeChildAdded(key, childNode));
    });
  }
  if (eventSnap.isFullyInitialized()) {
    initialChanges.push(changeValue(eventSnap.getNode()));
  }
  return viewGenerateEventsForChanges_(view, initialChanges, eventSnap.getNode(), registration);
}
function viewGenerateEventsForChanges_(view, changes, eventCache, eventRegistration) {
  var registrations = eventRegistration ? [eventRegistration] : view.eventRegistrations_;
  return eventGeneratorGenerateEventsForChanges(view.eventGenerator_, changes, eventCache, registrations);
}
var referenceConstructor$1;
var SyncPoint = function() {
  function SyncPoint2() {
    this.views = new Map();
  }
  return SyncPoint2;
}();
function syncPointSetReferenceConstructor(val) {
  assert(!referenceConstructor$1, "__referenceConstructor has already been defined");
  referenceConstructor$1 = val;
}
function syncPointGetReferenceConstructor() {
  assert(referenceConstructor$1, "Reference.ts has not been loaded");
  return referenceConstructor$1;
}
function syncPointIsEmpty(syncPoint) {
  return syncPoint.views.size === 0;
}
function syncPointApplyOperation(syncPoint, operation, writesCache, optCompleteServerCache) {
  var e_1, _a8;
  var queryId = operation.source.queryId;
  if (queryId !== null) {
    var view = syncPoint.views.get(queryId);
    assert(view != null, "SyncTree gave us an op for an invalid query.");
    return viewApplyOperation(view, operation, writesCache, optCompleteServerCache);
  } else {
    var events = [];
    try {
      for (var _b = __values(syncPoint.views.values()), _c2 = _b.next(); !_c2.done; _c2 = _b.next()) {
        var view = _c2.value;
        events = events.concat(viewApplyOperation(view, operation, writesCache, optCompleteServerCache));
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (_c2 && !_c2.done && (_a8 = _b.return))
          _a8.call(_b);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
    return events;
  }
}
function syncPointGetView(syncPoint, query2, writesCache, serverCache, serverCacheComplete) {
  var queryId = query2._queryIdentifier;
  var view = syncPoint.views.get(queryId);
  if (!view) {
    var eventCache = writeTreeRefCalcCompleteEventCache(writesCache, serverCacheComplete ? serverCache : null);
    var eventCacheComplete = false;
    if (eventCache) {
      eventCacheComplete = true;
    } else if (serverCache instanceof ChildrenNode) {
      eventCache = writeTreeRefCalcCompleteEventChildren(writesCache, serverCache);
      eventCacheComplete = false;
    } else {
      eventCache = ChildrenNode.EMPTY_NODE;
      eventCacheComplete = false;
    }
    var viewCache = newViewCache(new CacheNode(eventCache, eventCacheComplete, false), new CacheNode(serverCache, serverCacheComplete, false));
    return new View(query2, viewCache);
  }
  return view;
}
function syncPointAddEventRegistration(syncPoint, query2, eventRegistration, writesCache, serverCache, serverCacheComplete) {
  var view = syncPointGetView(syncPoint, query2, writesCache, serverCache, serverCacheComplete);
  if (!syncPoint.views.has(query2._queryIdentifier)) {
    syncPoint.views.set(query2._queryIdentifier, view);
  }
  viewAddEventRegistration(view, eventRegistration);
  return viewGetInitialEvents(view, eventRegistration);
}
function syncPointRemoveEventRegistration(syncPoint, query2, eventRegistration, cancelError) {
  var e_2, _a8;
  var queryId = query2._queryIdentifier;
  var removed = [];
  var cancelEvents = [];
  var hadCompleteView = syncPointHasCompleteView(syncPoint);
  if (queryId === "default") {
    try {
      for (var _b = __values(syncPoint.views.entries()), _c2 = _b.next(); !_c2.done; _c2 = _b.next()) {
        var _d = __read(_c2.value, 2), viewQueryId = _d[0], view = _d[1];
        cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));
        if (viewIsEmpty(view)) {
          syncPoint.views.delete(viewQueryId);
          if (!view.query._queryParams.loadsAllData()) {
            removed.push(view.query);
          }
        }
      }
    } catch (e_2_1) {
      e_2 = { error: e_2_1 };
    } finally {
      try {
        if (_c2 && !_c2.done && (_a8 = _b.return))
          _a8.call(_b);
      } finally {
        if (e_2)
          throw e_2.error;
      }
    }
  } else {
    var view = syncPoint.views.get(queryId);
    if (view) {
      cancelEvents = cancelEvents.concat(viewRemoveEventRegistration(view, eventRegistration, cancelError));
      if (viewIsEmpty(view)) {
        syncPoint.views.delete(queryId);
        if (!view.query._queryParams.loadsAllData()) {
          removed.push(view.query);
        }
      }
    }
  }
  if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {
    removed.push(new (syncPointGetReferenceConstructor())(query2._repo, query2._path));
  }
  return { removed, events: cancelEvents };
}
function syncPointGetQueryViews(syncPoint) {
  var e_3, _a8;
  var result = [];
  try {
    for (var _b = __values(syncPoint.views.values()), _c2 = _b.next(); !_c2.done; _c2 = _b.next()) {
      var view = _c2.value;
      if (!view.query._queryParams.loadsAllData()) {
        result.push(view);
      }
    }
  } catch (e_3_1) {
    e_3 = { error: e_3_1 };
  } finally {
    try {
      if (_c2 && !_c2.done && (_a8 = _b.return))
        _a8.call(_b);
    } finally {
      if (e_3)
        throw e_3.error;
    }
  }
  return result;
}
function syncPointGetCompleteServerCache(syncPoint, path) {
  var e_4, _a8;
  var serverCache = null;
  try {
    for (var _b = __values(syncPoint.views.values()), _c2 = _b.next(); !_c2.done; _c2 = _b.next()) {
      var view = _c2.value;
      serverCache = serverCache || viewGetCompleteServerCache(view, path);
    }
  } catch (e_4_1) {
    e_4 = { error: e_4_1 };
  } finally {
    try {
      if (_c2 && !_c2.done && (_a8 = _b.return))
        _a8.call(_b);
    } finally {
      if (e_4)
        throw e_4.error;
    }
  }
  return serverCache;
}
function syncPointViewForQuery(syncPoint, query2) {
  var params = query2._queryParams;
  if (params.loadsAllData()) {
    return syncPointGetCompleteView(syncPoint);
  } else {
    var queryId = query2._queryIdentifier;
    return syncPoint.views.get(queryId);
  }
}
function syncPointViewExistsForQuery(syncPoint, query2) {
  return syncPointViewForQuery(syncPoint, query2) != null;
}
function syncPointHasCompleteView(syncPoint) {
  return syncPointGetCompleteView(syncPoint) != null;
}
function syncPointGetCompleteView(syncPoint) {
  var e_5, _a8;
  try {
    for (var _b = __values(syncPoint.views.values()), _c2 = _b.next(); !_c2.done; _c2 = _b.next()) {
      var view = _c2.value;
      if (view.query._queryParams.loadsAllData()) {
        return view;
      }
    }
  } catch (e_5_1) {
    e_5 = { error: e_5_1 };
  } finally {
    try {
      if (_c2 && !_c2.done && (_a8 = _b.return))
        _a8.call(_b);
    } finally {
      if (e_5)
        throw e_5.error;
    }
  }
  return null;
}
var referenceConstructor;
function syncTreeSetReferenceConstructor(val) {
  assert(!referenceConstructor, "__referenceConstructor has already been defined");
  referenceConstructor = val;
}
function syncTreeGetReferenceConstructor() {
  assert(referenceConstructor, "Reference.ts has not been loaded");
  return referenceConstructor;
}
var syncTreeNextQueryTag_ = 1;
var SyncTree = function() {
  function SyncTree2(listenProvider_) {
    this.listenProvider_ = listenProvider_;
    this.syncPointTree_ = new ImmutableTree(null);
    this.pendingWriteTree_ = newWriteTree();
    this.tagToQueryMap = new Map();
    this.queryToTagMap = new Map();
  }
  return SyncTree2;
}();
function syncTreeApplyUserOverwrite(syncTree, path, newData, writeId, visible) {
  writeTreeAddOverwrite(syncTree.pendingWriteTree_, path, newData, writeId, visible);
  if (!visible) {
    return [];
  } else {
    return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceUser(), path, newData));
  }
}
function syncTreeApplyUserMerge(syncTree, path, changedChildren, writeId) {
  writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);
  var changeTree = ImmutableTree.fromObject(changedChildren);
  return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceUser(), path, changeTree));
}
function syncTreeAckUserWrite(syncTree, writeId, revert) {
  if (revert === void 0) {
    revert = false;
  }
  var write2 = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);
  var needToReevaluate = writeTreeRemoveWrite(syncTree.pendingWriteTree_, writeId);
  if (!needToReevaluate) {
    return [];
  } else {
    var affectedTree_1 = new ImmutableTree(null);
    if (write2.snap != null) {
      affectedTree_1 = affectedTree_1.set(newEmptyPath(), true);
    } else {
      each(write2.children, function(pathString) {
        affectedTree_1 = affectedTree_1.set(new Path(pathString), true);
      });
    }
    return syncTreeApplyOperationToSyncPoints_(syncTree, new AckUserWrite(write2.path, affectedTree_1, revert));
  }
}
function syncTreeApplyServerOverwrite(syncTree, path, newData) {
  return syncTreeApplyOperationToSyncPoints_(syncTree, new Overwrite(newOperationSourceServer(), path, newData));
}
function syncTreeApplyServerMerge(syncTree, path, changedChildren) {
  var changeTree = ImmutableTree.fromObject(changedChildren);
  return syncTreeApplyOperationToSyncPoints_(syncTree, new Merge(newOperationSourceServer(), path, changeTree));
}
function syncTreeApplyListenComplete(syncTree, path) {
  return syncTreeApplyOperationToSyncPoints_(syncTree, new ListenComplete(newOperationSourceServer(), path));
}
function syncTreeApplyTaggedListenComplete(syncTree, path, tag) {
  var queryKey = syncTreeQueryKeyForTag_(syncTree, tag);
  if (queryKey) {
    var r = syncTreeParseQueryKey_(queryKey);
    var queryPath = r.path, queryId = r.queryId;
    var relativePath = newRelativePath(queryPath, path);
    var op = new ListenComplete(newOperationSourceServerTaggedQuery(queryId), relativePath);
    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);
  } else {
    return [];
  }
}
function syncTreeRemoveEventRegistration(syncTree, query2, eventRegistration, cancelError) {
  var path = query2._path;
  var maybeSyncPoint = syncTree.syncPointTree_.get(path);
  var cancelEvents = [];
  if (maybeSyncPoint && (query2._queryIdentifier === "default" || syncPointViewExistsForQuery(maybeSyncPoint, query2))) {
    var removedAndEvents = syncPointRemoveEventRegistration(maybeSyncPoint, query2, eventRegistration, cancelError);
    if (syncPointIsEmpty(maybeSyncPoint)) {
      syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);
    }
    var removed = removedAndEvents.removed;
    cancelEvents = removedAndEvents.events;
    var removingDefault = removed.findIndex(function(query3) {
      return query3._queryParams.loadsAllData();
    }) !== -1;
    var covered = syncTree.syncPointTree_.findOnPath(path, function(relativePath, parentSyncPoint) {
      return syncPointHasCompleteView(parentSyncPoint);
    });
    if (removingDefault && !covered) {
      var subtree = syncTree.syncPointTree_.subtree(path);
      if (!subtree.isEmpty()) {
        var newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);
        for (var i = 0; i < newViews.length; ++i) {
          var view = newViews[i], newQuery = view.query;
          var listener = syncTreeCreateListenerForView_(syncTree, view);
          syncTree.listenProvider_.startListening(syncTreeQueryForListening_(newQuery), syncTreeTagForQuery_(syncTree, newQuery), listener.hashFn, listener.onComplete);
        }
      }
    }
    if (!covered && removed.length > 0 && !cancelError) {
      if (removingDefault) {
        var defaultTag = null;
        syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(query2), defaultTag);
      } else {
        removed.forEach(function(queryToRemove) {
          var tagToRemove = syncTree.queryToTagMap.get(syncTreeMakeQueryKey_(queryToRemove));
          syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToRemove), tagToRemove);
        });
      }
    }
    syncTreeRemoveTags_(syncTree, removed);
  }
  return cancelEvents;
}
function syncTreeApplyTaggedQueryOverwrite(syncTree, path, snap, tag) {
  var queryKey = syncTreeQueryKeyForTag_(syncTree, tag);
  if (queryKey != null) {
    var r = syncTreeParseQueryKey_(queryKey);
    var queryPath = r.path, queryId = r.queryId;
    var relativePath = newRelativePath(queryPath, path);
    var op = new Overwrite(newOperationSourceServerTaggedQuery(queryId), relativePath, snap);
    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);
  } else {
    return [];
  }
}
function syncTreeApplyTaggedQueryMerge(syncTree, path, changedChildren, tag) {
  var queryKey = syncTreeQueryKeyForTag_(syncTree, tag);
  if (queryKey) {
    var r = syncTreeParseQueryKey_(queryKey);
    var queryPath = r.path, queryId = r.queryId;
    var relativePath = newRelativePath(queryPath, path);
    var changeTree = ImmutableTree.fromObject(changedChildren);
    var op = new Merge(newOperationSourceServerTaggedQuery(queryId), relativePath, changeTree);
    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);
  } else {
    return [];
  }
}
function syncTreeAddEventRegistration(syncTree, query2, eventRegistration) {
  var path = query2._path;
  var serverCache = null;
  var foundAncestorDefaultView = false;
  syncTree.syncPointTree_.foreachOnPath(path, function(pathToSyncPoint, sp) {
    var relativePath = newRelativePath(pathToSyncPoint, path);
    serverCache = serverCache || syncPointGetCompleteServerCache(sp, relativePath);
    foundAncestorDefaultView = foundAncestorDefaultView || syncPointHasCompleteView(sp);
  });
  var syncPoint = syncTree.syncPointTree_.get(path);
  if (!syncPoint) {
    syncPoint = new SyncPoint();
    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);
  } else {
    foundAncestorDefaultView = foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);
    serverCache = serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());
  }
  var serverCacheComplete;
  if (serverCache != null) {
    serverCacheComplete = true;
  } else {
    serverCacheComplete = false;
    serverCache = ChildrenNode.EMPTY_NODE;
    var subtree = syncTree.syncPointTree_.subtree(path);
    subtree.foreachChild(function(childName, childSyncPoint) {
      var completeCache = syncPointGetCompleteServerCache(childSyncPoint, newEmptyPath());
      if (completeCache) {
        serverCache = serverCache.updateImmediateChild(childName, completeCache);
      }
    });
  }
  var viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query2);
  if (!viewAlreadyExists && !query2._queryParams.loadsAllData()) {
    var queryKey = syncTreeMakeQueryKey_(query2);
    assert(!syncTree.queryToTagMap.has(queryKey), "View does not exist, but we have a tag");
    var tag = syncTreeGetNextQueryTag_();
    syncTree.queryToTagMap.set(queryKey, tag);
    syncTree.tagToQueryMap.set(tag, queryKey);
  }
  var writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);
  var events = syncPointAddEventRegistration(syncPoint, query2, eventRegistration, writesCache, serverCache, serverCacheComplete);
  if (!viewAlreadyExists && !foundAncestorDefaultView) {
    var view = syncPointViewForQuery(syncPoint, query2);
    events = events.concat(syncTreeSetupListener_(syncTree, query2, view));
  }
  return events;
}
function syncTreeCalcCompleteEventCache(syncTree, path, writeIdsToExclude) {
  var includeHiddenSets = true;
  var writeTree = syncTree.pendingWriteTree_;
  var serverCache = syncTree.syncPointTree_.findOnPath(path, function(pathSoFar, syncPoint) {
    var relativePath = newRelativePath(pathSoFar, path);
    var serverCache2 = syncPointGetCompleteServerCache(syncPoint, relativePath);
    if (serverCache2) {
      return serverCache2;
    }
  });
  return writeTreeCalcCompleteEventCache(writeTree, path, serverCache, writeIdsToExclude, includeHiddenSets);
}
function syncTreeGetServerValue(syncTree, query2) {
  var path = query2._path;
  var serverCache = null;
  syncTree.syncPointTree_.foreachOnPath(path, function(pathToSyncPoint, sp) {
    var relativePath = newRelativePath(pathToSyncPoint, path);
    serverCache = serverCache || syncPointGetCompleteServerCache(sp, relativePath);
  });
  var syncPoint = syncTree.syncPointTree_.get(path);
  if (!syncPoint) {
    syncPoint = new SyncPoint();
    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);
  } else {
    serverCache = serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());
  }
  var serverCacheComplete = serverCache != null;
  var serverCacheNode = serverCacheComplete ? new CacheNode(serverCache, true, false) : null;
  var writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, query2._path);
  var view = syncPointGetView(syncPoint, query2, writesCache, serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE, serverCacheComplete);
  return viewGetCompleteNode(view);
}
function syncTreeApplyOperationToSyncPoints_(syncTree, operation) {
  return syncTreeApplyOperationHelper_(operation, syncTree.syncPointTree_, null, writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath()));
}
function syncTreeApplyOperationHelper_(operation, syncPointTree, serverCache, writesCache) {
  if (pathIsEmpty(operation.path)) {
    return syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);
  } else {
    var syncPoint = syncPointTree.get(newEmptyPath());
    if (serverCache == null && syncPoint != null) {
      serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());
    }
    var events = [];
    var childName = pathGetFront(operation.path);
    var childOperation = operation.operationForChild(childName);
    var childTree = syncPointTree.children.get(childName);
    if (childTree && childOperation) {
      var childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;
      var childWritesCache = writeTreeRefChild(writesCache, childName);
      events = events.concat(syncTreeApplyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));
    }
    if (syncPoint) {
      events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));
    }
    return events;
  }
}
function syncTreeApplyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache) {
  var syncPoint = syncPointTree.get(newEmptyPath());
  if (serverCache == null && syncPoint != null) {
    serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());
  }
  var events = [];
  syncPointTree.children.inorderTraversal(function(childName, childTree) {
    var childServerCache = serverCache ? serverCache.getImmediateChild(childName) : null;
    var childWritesCache = writeTreeRefChild(writesCache, childName);
    var childOperation = operation.operationForChild(childName);
    if (childOperation) {
      events = events.concat(syncTreeApplyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));
    }
  });
  if (syncPoint) {
    events = events.concat(syncPointApplyOperation(syncPoint, operation, writesCache, serverCache));
  }
  return events;
}
function syncTreeCreateListenerForView_(syncTree, view) {
  var query2 = view.query;
  var tag = syncTreeTagForQuery_(syncTree, query2);
  return {
    hashFn: function() {
      var cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;
      return cache.hash();
    },
    onComplete: function(status) {
      if (status === "ok") {
        if (tag) {
          return syncTreeApplyTaggedListenComplete(syncTree, query2._path, tag);
        } else {
          return syncTreeApplyListenComplete(syncTree, query2._path);
        }
      } else {
        var error2 = errorForServerCode(status, query2);
        return syncTreeRemoveEventRegistration(syncTree, query2, null, error2);
      }
    }
  };
}
function syncTreeTagForQuery_(syncTree, query2) {
  var queryKey = syncTreeMakeQueryKey_(query2);
  return syncTree.queryToTagMap.get(queryKey);
}
function syncTreeMakeQueryKey_(query2) {
  return query2._path.toString() + "$" + query2._queryIdentifier;
}
function syncTreeQueryKeyForTag_(syncTree, tag) {
  return syncTree.tagToQueryMap.get(tag);
}
function syncTreeParseQueryKey_(queryKey) {
  var splitIndex = queryKey.indexOf("$");
  assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, "Bad queryKey.");
  return {
    queryId: queryKey.substr(splitIndex + 1),
    path: new Path(queryKey.substr(0, splitIndex))
  };
}
function syncTreeApplyTaggedOperation_(syncTree, queryPath, operation) {
  var syncPoint = syncTree.syncPointTree_.get(queryPath);
  assert(syncPoint, "Missing sync point for query tag that we're tracking");
  var writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, queryPath);
  return syncPointApplyOperation(syncPoint, operation, writesCache, null);
}
function syncTreeCollectDistinctViewsForSubTree_(subtree) {
  return subtree.fold(function(relativePath, maybeChildSyncPoint, childMap) {
    if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {
      var completeView = syncPointGetCompleteView(maybeChildSyncPoint);
      return [completeView];
    } else {
      var views_1 = [];
      if (maybeChildSyncPoint) {
        views_1 = syncPointGetQueryViews(maybeChildSyncPoint);
      }
      each(childMap, function(_key, childViews) {
        views_1 = views_1.concat(childViews);
      });
      return views_1;
    }
  });
}
function syncTreeQueryForListening_(query2) {
  if (query2._queryParams.loadsAllData() && !query2._queryParams.isDefault()) {
    return new (syncTreeGetReferenceConstructor())(query2._repo, query2._path);
  } else {
    return query2;
  }
}
function syncTreeRemoveTags_(syncTree, queries) {
  for (var j2 = 0; j2 < queries.length; ++j2) {
    var removedQuery = queries[j2];
    if (!removedQuery._queryParams.loadsAllData()) {
      var removedQueryKey = syncTreeMakeQueryKey_(removedQuery);
      var removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);
      syncTree.queryToTagMap.delete(removedQueryKey);
      syncTree.tagToQueryMap.delete(removedQueryTag);
    }
  }
}
function syncTreeGetNextQueryTag_() {
  return syncTreeNextQueryTag_++;
}
function syncTreeSetupListener_(syncTree, query2, view) {
  var path = query2._path;
  var tag = syncTreeTagForQuery_(syncTree, query2);
  var listener = syncTreeCreateListenerForView_(syncTree, view);
  var events = syncTree.listenProvider_.startListening(syncTreeQueryForListening_(query2), tag, listener.hashFn, listener.onComplete);
  var subtree = syncTree.syncPointTree_.subtree(path);
  if (tag) {
    assert(!syncPointHasCompleteView(subtree.value), "If we're adding a query, it shouldn't be shadowed");
  } else {
    var queriesToStop = subtree.fold(function(relativePath, maybeChildSyncPoint, childMap) {
      if (!pathIsEmpty(relativePath) && maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {
        return [syncPointGetCompleteView(maybeChildSyncPoint).query];
      } else {
        var queries_1 = [];
        if (maybeChildSyncPoint) {
          queries_1 = queries_1.concat(syncPointGetQueryViews(maybeChildSyncPoint).map(function(view2) {
            return view2.query;
          }));
        }
        each(childMap, function(_key, childQueries) {
          queries_1 = queries_1.concat(childQueries);
        });
        return queries_1;
      }
    });
    for (var i = 0; i < queriesToStop.length; ++i) {
      var queryToStop = queriesToStop[i];
      syncTree.listenProvider_.stopListening(syncTreeQueryForListening_(queryToStop), syncTreeTagForQuery_(syncTree, queryToStop));
    }
  }
  return events;
}
var ExistingValueProvider = function() {
  function ExistingValueProvider2(node_) {
    this.node_ = node_;
  }
  ExistingValueProvider2.prototype.getImmediateChild = function(childName) {
    var child3 = this.node_.getImmediateChild(childName);
    return new ExistingValueProvider2(child3);
  };
  ExistingValueProvider2.prototype.node = function() {
    return this.node_;
  };
  return ExistingValueProvider2;
}();
var DeferredValueProvider = function() {
  function DeferredValueProvider2(syncTree, path) {
    this.syncTree_ = syncTree;
    this.path_ = path;
  }
  DeferredValueProvider2.prototype.getImmediateChild = function(childName) {
    var childPath = pathChild(this.path_, childName);
    return new DeferredValueProvider2(this.syncTree_, childPath);
  };
  DeferredValueProvider2.prototype.node = function() {
    return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);
  };
  return DeferredValueProvider2;
}();
var generateWithValues = function(values) {
  values = values || {};
  values["timestamp"] = values["timestamp"] || new Date().getTime();
  return values;
};
var resolveDeferredLeafValue = function(value, existingVal, serverValues) {
  if (!value || typeof value !== "object") {
    return value;
  }
  assert(".sv" in value, "Unexpected leaf node or priority contents");
  if (typeof value[".sv"] === "string") {
    return resolveScalarDeferredValue(value[".sv"], existingVal, serverValues);
  } else if (typeof value[".sv"] === "object") {
    return resolveComplexDeferredValue(value[".sv"], existingVal);
  } else {
    assert(false, "Unexpected server value: " + JSON.stringify(value, null, 2));
  }
};
var resolveScalarDeferredValue = function(op, existing, serverValues) {
  switch (op) {
    case "timestamp":
      return serverValues["timestamp"];
    default:
      assert(false, "Unexpected server value: " + op);
  }
};
var resolveComplexDeferredValue = function(op, existing, unused) {
  if (!op.hasOwnProperty("increment")) {
    assert(false, "Unexpected server value: " + JSON.stringify(op, null, 2));
  }
  var delta = op["increment"];
  if (typeof delta !== "number") {
    assert(false, "Unexpected increment value: " + delta);
  }
  var existingNode = existing.node();
  assert(existingNode !== null && typeof existingNode !== "undefined", "Expected ChildrenNode.EMPTY_NODE for nulls");
  if (!existingNode.isLeafNode()) {
    return delta;
  }
  var leaf = existingNode;
  var existingVal = leaf.getValue();
  if (typeof existingVal !== "number") {
    return delta;
  }
  return existingVal + delta;
};
var resolveDeferredValueTree = function(path, node, syncTree, serverValues) {
  return resolveDeferredValue(node, new DeferredValueProvider(syncTree, path), serverValues);
};
var resolveDeferredValueSnapshot = function(node, existing, serverValues) {
  return resolveDeferredValue(node, new ExistingValueProvider(existing), serverValues);
};
function resolveDeferredValue(node, existingVal, serverValues) {
  var rawPri = node.getPriority().val();
  var priority = resolveDeferredLeafValue(rawPri, existingVal.getImmediateChild(".priority"), serverValues);
  var newNode;
  if (node.isLeafNode()) {
    var leafNode = node;
    var value = resolveDeferredLeafValue(leafNode.getValue(), existingVal, serverValues);
    if (value !== leafNode.getValue() || priority !== leafNode.getPriority().val()) {
      return new LeafNode(value, nodeFromJSON(priority));
    } else {
      return node;
    }
  } else {
    var childrenNode = node;
    newNode = childrenNode;
    if (priority !== childrenNode.getPriority().val()) {
      newNode = newNode.updatePriority(new LeafNode(priority));
    }
    childrenNode.forEachChild(PRIORITY_INDEX, function(childName, childNode) {
      var newChildNode = resolveDeferredValue(childNode, existingVal.getImmediateChild(childName), serverValues);
      if (newChildNode !== childNode) {
        newNode = newNode.updateImmediateChild(childName, newChildNode);
      }
    });
    return newNode;
  }
}
var Tree = function() {
  function Tree2(name10, parent2, node) {
    if (name10 === void 0) {
      name10 = "";
    }
    if (parent2 === void 0) {
      parent2 = null;
    }
    if (node === void 0) {
      node = { children: {}, childCount: 0 };
    }
    this.name = name10;
    this.parent = parent2;
    this.node = node;
  }
  return Tree2;
}();
function treeSubTree(tree, pathObj) {
  var path = pathObj instanceof Path ? pathObj : new Path(pathObj);
  var child3 = tree, next = pathGetFront(path);
  while (next !== null) {
    var childNode = safeGet(child3.node.children, next) || {
      children: {},
      childCount: 0
    };
    child3 = new Tree(next, child3, childNode);
    path = pathPopFront(path);
    next = pathGetFront(path);
  }
  return child3;
}
function treeGetValue(tree) {
  return tree.node.value;
}
function treeSetValue(tree, value) {
  tree.node.value = value;
  treeUpdateParents(tree);
}
function treeHasChildren(tree) {
  return tree.node.childCount > 0;
}
function treeIsEmpty(tree) {
  return treeGetValue(tree) === void 0 && !treeHasChildren(tree);
}
function treeForEachChild(tree, action) {
  each(tree.node.children, function(child3, childTree) {
    action(new Tree(child3, tree, childTree));
  });
}
function treeForEachDescendant(tree, action, includeSelf, childrenFirst) {
  if (includeSelf && !childrenFirst) {
    action(tree);
  }
  treeForEachChild(tree, function(child3) {
    treeForEachDescendant(child3, action, true, childrenFirst);
  });
  if (includeSelf && childrenFirst) {
    action(tree);
  }
}
function treeForEachAncestor(tree, action, includeSelf) {
  var node = includeSelf ? tree : tree.parent;
  while (node !== null) {
    if (action(node)) {
      return true;
    }
    node = node.parent;
  }
  return false;
}
function treeGetPath(tree) {
  return new Path(tree.parent === null ? tree.name : treeGetPath(tree.parent) + "/" + tree.name);
}
function treeUpdateParents(tree) {
  if (tree.parent !== null) {
    treeUpdateChild(tree.parent, tree.name, tree);
  }
}
function treeUpdateChild(tree, childName, child3) {
  var childEmpty = treeIsEmpty(child3);
  var childExists = contains(tree.node.children, childName);
  if (childEmpty && childExists) {
    delete tree.node.children[childName];
    tree.node.childCount--;
    treeUpdateParents(tree);
  } else if (!childEmpty && !childExists) {
    tree.node.children[childName] = child3.node;
    tree.node.childCount++;
    treeUpdateParents(tree);
  }
}
var INVALID_KEY_REGEX_ = /[\[\].#$\/\u0000-\u001F\u007F]/;
var INVALID_PATH_REGEX_ = /[\[\].#$\u0000-\u001F\u007F]/;
var MAX_LEAF_SIZE_ = 10 * 1024 * 1024;
var isValidKey = function(key) {
  return typeof key === "string" && key.length !== 0 && !INVALID_KEY_REGEX_.test(key);
};
var isValidPathString = function(pathString) {
  return typeof pathString === "string" && pathString.length !== 0 && !INVALID_PATH_REGEX_.test(pathString);
};
var isValidRootPathString = function(pathString) {
  if (pathString) {
    pathString = pathString.replace(/^\/*\.info(\/|$)/, "/");
  }
  return isValidPathString(pathString);
};
var isValidPriority = function(priority) {
  return priority === null || typeof priority === "string" || typeof priority === "number" && !isInvalidJSONNumber(priority) || priority && typeof priority === "object" && contains(priority, ".sv");
};
var validateFirebaseDataArg = function(fnName, value, path, optional) {
  if (optional && value === void 0) {
    return;
  }
  validateFirebaseData(errorPrefix(fnName, "value"), value, path);
};
var validateFirebaseData = function(errorPrefix2, data, path_) {
  var path = path_ instanceof Path ? new ValidationPath(path_, errorPrefix2) : path_;
  if (data === void 0) {
    throw new Error(errorPrefix2 + "contains undefined " + validationPathToErrorString(path));
  }
  if (typeof data === "function") {
    throw new Error(errorPrefix2 + "contains a function " + validationPathToErrorString(path) + " with contents = " + data.toString());
  }
  if (isInvalidJSONNumber(data)) {
    throw new Error(errorPrefix2 + "contains " + data.toString() + " " + validationPathToErrorString(path));
  }
  if (typeof data === "string" && data.length > MAX_LEAF_SIZE_ / 3 && stringLength(data) > MAX_LEAF_SIZE_) {
    throw new Error(errorPrefix2 + "contains a string greater than " + MAX_LEAF_SIZE_ + " utf8 bytes " + validationPathToErrorString(path) + " ('" + data.substring(0, 50) + "...')");
  }
  if (data && typeof data === "object") {
    var hasDotValue_1 = false;
    var hasActualChild_1 = false;
    each(data, function(key, value) {
      if (key === ".value") {
        hasDotValue_1 = true;
      } else if (key !== ".priority" && key !== ".sv") {
        hasActualChild_1 = true;
        if (!isValidKey(key)) {
          throw new Error(errorPrefix2 + " contains an invalid key (" + key + ") " + validationPathToErrorString(path) + `.  Keys must be non-empty strings and can't contain ".", "#", "$", "/", "[", or "]"`);
        }
      }
      validationPathPush(path, key);
      validateFirebaseData(errorPrefix2, value, path);
      validationPathPop(path);
    });
    if (hasDotValue_1 && hasActualChild_1) {
      throw new Error(errorPrefix2 + ' contains ".value" child ' + validationPathToErrorString(path) + " in addition to actual children.");
    }
  }
};
var validateFirebaseMergePaths = function(errorPrefix2, mergePaths) {
  var i, curPath;
  for (i = 0; i < mergePaths.length; i++) {
    curPath = mergePaths[i];
    var keys = pathSlice(curPath);
    for (var j2 = 0; j2 < keys.length; j2++) {
      if (keys[j2] === ".priority" && j2 === keys.length - 1)
        ;
      else if (!isValidKey(keys[j2])) {
        throw new Error(errorPrefix2 + "contains an invalid key (" + keys[j2] + ") in path " + curPath.toString() + `. Keys must be non-empty strings and can't contain ".", "#", "$", "/", "[", or "]"`);
      }
    }
  }
  mergePaths.sort(pathCompare);
  var prevPath = null;
  for (i = 0; i < mergePaths.length; i++) {
    curPath = mergePaths[i];
    if (prevPath !== null && pathContains(prevPath, curPath)) {
      throw new Error(errorPrefix2 + "contains a path " + prevPath.toString() + " that is ancestor of another path " + curPath.toString());
    }
    prevPath = curPath;
  }
};
var validateFirebaseMergeDataArg = function(fnName, data, path, optional) {
  if (optional && data === void 0) {
    return;
  }
  var errorPrefix$1 = errorPrefix(fnName, "values");
  if (!(data && typeof data === "object") || Array.isArray(data)) {
    throw new Error(errorPrefix$1 + " must be an object containing the children to replace.");
  }
  var mergePaths = [];
  each(data, function(key, value) {
    var curPath = new Path(key);
    validateFirebaseData(errorPrefix$1, value, pathChild(path, curPath));
    if (pathGetBack(curPath) === ".priority") {
      if (!isValidPriority(value)) {
        throw new Error(errorPrefix$1 + "contains an invalid value for '" + curPath.toString() + "', which must be a valid Firebase priority (a string, finite number, server value, or null).");
      }
    }
    mergePaths.push(curPath);
  });
  validateFirebaseMergePaths(errorPrefix$1, mergePaths);
};
var validatePriority = function(fnName, priority, optional) {
  if (optional && priority === void 0) {
    return;
  }
  if (isInvalidJSONNumber(priority)) {
    throw new Error(errorPrefix(fnName, "priority") + "is " + priority.toString() + ", but must be a valid Firebase priority (a string, finite number, server value, or null).");
  }
  if (!isValidPriority(priority)) {
    throw new Error(errorPrefix(fnName, "priority") + "must be a valid Firebase priority (a string, finite number, server value, or null).");
  }
};
var validateEventType = function(fnName, eventType, optional) {
  if (optional && eventType === void 0) {
    return;
  }
  switch (eventType) {
    case "value":
    case "child_added":
    case "child_removed":
    case "child_changed":
    case "child_moved":
      break;
    default:
      throw new Error(errorPrefix(fnName, "eventType") + 'must be a valid event type = "value", "child_added", "child_removed", "child_changed", or "child_moved".');
  }
};
var validateKey = function(fnName, argumentName, key, optional) {
  if (optional && key === void 0) {
    return;
  }
  if (!isValidKey(key)) {
    throw new Error(errorPrefix(fnName, argumentName) + 'was an invalid key = "' + key + `".  Firebase keys must be non-empty strings and can't contain ".", "#", "$", "/", "[", or "]").`);
  }
};
var validatePathString = function(fnName, argumentName, pathString, optional) {
  if (optional && pathString === void 0) {
    return;
  }
  if (!isValidPathString(pathString)) {
    throw new Error(errorPrefix(fnName, argumentName) + 'was an invalid path = "' + pathString + `". Paths must be non-empty strings and can't contain ".", "#", "$", "[", or "]"`);
  }
};
var validateRootPathString = function(fnName, argumentName, pathString, optional) {
  if (pathString) {
    pathString = pathString.replace(/^\/*\.info(\/|$)/, "/");
  }
  validatePathString(fnName, argumentName, pathString, optional);
};
var validateWritablePath = function(fnName, path) {
  if (pathGetFront(path) === ".info") {
    throw new Error(fnName + " failed = Can't modify data under /.info/");
  }
};
var validateUrl = function(fnName, parsedUrl) {
  var pathString = parsedUrl.path.toString();
  if (!(typeof parsedUrl.repoInfo.host === "string") || parsedUrl.repoInfo.host.length === 0 || !isValidKey(parsedUrl.repoInfo.namespace) && parsedUrl.repoInfo.host.split(":")[0] !== "localhost" || pathString.length !== 0 && !isValidRootPathString(pathString)) {
    throw new Error(errorPrefix(fnName, "url") + `must be a valid firebase URL and the path can't contain ".", "#", "$", "[", or "]".`);
  }
};
var validateBoolean = function(fnName, argumentName, bool, optional) {
  if (optional && bool === void 0) {
    return;
  }
  if (typeof bool !== "boolean") {
    throw new Error(errorPrefix(fnName, argumentName) + "must be a boolean.");
  }
};
var EventQueue = function() {
  function EventQueue2() {
    this.eventLists_ = [];
    this.recursionDepth_ = 0;
  }
  return EventQueue2;
}();
function eventQueueQueueEvents(eventQueue, eventDataList) {
  var currList = null;
  for (var i = 0; i < eventDataList.length; i++) {
    var data = eventDataList[i];
    var path = data.getPath();
    if (currList !== null && !pathEquals(path, currList.path)) {
      eventQueue.eventLists_.push(currList);
      currList = null;
    }
    if (currList === null) {
      currList = { events: [], path };
    }
    currList.events.push(data);
  }
  if (currList) {
    eventQueue.eventLists_.push(currList);
  }
}
function eventQueueRaiseEventsAtPath(eventQueue, path, eventDataList) {
  eventQueueQueueEvents(eventQueue, eventDataList);
  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, function(eventPath) {
    return pathEquals(eventPath, path);
  });
}
function eventQueueRaiseEventsForChangedPath(eventQueue, changedPath, eventDataList) {
  eventQueueQueueEvents(eventQueue, eventDataList);
  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, function(eventPath) {
    return pathContains(eventPath, changedPath) || pathContains(changedPath, eventPath);
  });
}
function eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, predicate) {
  eventQueue.recursionDepth_++;
  var sentAll = true;
  for (var i = 0; i < eventQueue.eventLists_.length; i++) {
    var eventList = eventQueue.eventLists_[i];
    if (eventList) {
      var eventPath = eventList.path;
      if (predicate(eventPath)) {
        eventListRaise(eventQueue.eventLists_[i]);
        eventQueue.eventLists_[i] = null;
      } else {
        sentAll = false;
      }
    }
  }
  if (sentAll) {
    eventQueue.eventLists_ = [];
  }
  eventQueue.recursionDepth_--;
}
function eventListRaise(eventList) {
  for (var i = 0; i < eventList.events.length; i++) {
    var eventData = eventList.events[i];
    if (eventData !== null) {
      eventList.events[i] = null;
      var eventFn = eventData.getEventRunner();
      if (logger) {
        log("event: " + eventData.toString());
      }
      exceptionGuard(eventFn);
    }
  }
}
var INTERRUPT_REASON = "repo_interrupt";
var MAX_TRANSACTION_RETRIES = 25;
var Repo = function() {
  function Repo2(repoInfo_, forceRestClient_, authTokenProvider_, appCheckProvider_) {
    this.repoInfo_ = repoInfo_;
    this.forceRestClient_ = forceRestClient_;
    this.authTokenProvider_ = authTokenProvider_;
    this.appCheckProvider_ = appCheckProvider_;
    this.dataUpdateCount = 0;
    this.statsListener_ = null;
    this.eventQueue_ = new EventQueue();
    this.nextWriteId_ = 1;
    this.interceptServerDataCallback_ = null;
    this.onDisconnect_ = newSparseSnapshotTree();
    this.transactionQueueTree_ = new Tree();
    this.persistentConnection_ = null;
    this.key = this.repoInfo_.toURLString();
  }
  Repo2.prototype.toString = function() {
    return (this.repoInfo_.secure ? "https://" : "http://") + this.repoInfo_.host;
  };
  return Repo2;
}();
function repoStart(repo, appId, authOverride) {
  repo.stats_ = statsManagerGetCollection(repo.repoInfo_);
  if (repo.forceRestClient_ || beingCrawled()) {
    repo.server_ = new ReadonlyRestClient(repo.repoInfo_, function(pathString, data, isMerge, tag) {
      repoOnDataUpdate(repo, pathString, data, isMerge, tag);
    }, repo.authTokenProvider_, repo.appCheckProvider_);
    setTimeout(function() {
      return repoOnConnectStatus(repo, true);
    }, 0);
  } else {
    if (typeof authOverride !== "undefined" && authOverride !== null) {
      if (typeof authOverride !== "object") {
        throw new Error("Only objects are supported for option databaseAuthVariableOverride");
      }
      try {
        stringify(authOverride);
      } catch (e) {
        throw new Error("Invalid authOverride provided: " + e);
      }
    }
    repo.persistentConnection_ = new PersistentConnection(repo.repoInfo_, appId, function(pathString, data, isMerge, tag) {
      repoOnDataUpdate(repo, pathString, data, isMerge, tag);
    }, function(connectStatus) {
      repoOnConnectStatus(repo, connectStatus);
    }, function(updates) {
      repoOnServerInfoUpdate(repo, updates);
    }, repo.authTokenProvider_, repo.appCheckProvider_, authOverride);
    repo.server_ = repo.persistentConnection_;
  }
  repo.authTokenProvider_.addTokenChangeListener(function(token) {
    repo.server_.refreshAuthToken(token);
  });
  repo.appCheckProvider_.addTokenChangeListener(function(result) {
    repo.server_.refreshAppCheckToken(result.token);
  });
  repo.statsReporter_ = statsManagerGetOrCreateReporter(repo.repoInfo_, function() {
    return new StatsReporter(repo.stats_, repo.server_);
  });
  repo.infoData_ = new SnapshotHolder();
  repo.infoSyncTree_ = new SyncTree({
    startListening: function(query2, tag, currentHashFn, onComplete) {
      var infoEvents = [];
      var node = repo.infoData_.getNode(query2._path);
      if (!node.isEmpty()) {
        infoEvents = syncTreeApplyServerOverwrite(repo.infoSyncTree_, query2._path, node);
        setTimeout(function() {
          onComplete("ok");
        }, 0);
      }
      return infoEvents;
    },
    stopListening: function() {
    }
  });
  repoUpdateInfo(repo, "connected", false);
  repo.serverSyncTree_ = new SyncTree({
    startListening: function(query2, tag, currentHashFn, onComplete) {
      repo.server_.listen(query2, currentHashFn, tag, function(status, data) {
        var events = onComplete(status, data);
        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, query2._path, events);
      });
      return [];
    },
    stopListening: function(query2, tag) {
      repo.server_.unlisten(query2, tag);
    }
  });
}
function repoServerTime(repo) {
  var offsetNode = repo.infoData_.getNode(new Path(".info/serverTimeOffset"));
  var offset = offsetNode.val() || 0;
  return new Date().getTime() + offset;
}
function repoGenerateServerValues(repo) {
  return generateWithValues({
    timestamp: repoServerTime(repo)
  });
}
function repoOnDataUpdate(repo, pathString, data, isMerge, tag) {
  repo.dataUpdateCount++;
  var path = new Path(pathString);
  data = repo.interceptServerDataCallback_ ? repo.interceptServerDataCallback_(pathString, data) : data;
  var events = [];
  if (tag) {
    if (isMerge) {
      var taggedChildren = map(data, function(raw) {
        return nodeFromJSON(raw);
      });
      events = syncTreeApplyTaggedQueryMerge(repo.serverSyncTree_, path, taggedChildren, tag);
    } else {
      var taggedSnap = nodeFromJSON(data);
      events = syncTreeApplyTaggedQueryOverwrite(repo.serverSyncTree_, path, taggedSnap, tag);
    }
  } else if (isMerge) {
    var changedChildren = map(data, function(raw) {
      return nodeFromJSON(raw);
    });
    events = syncTreeApplyServerMerge(repo.serverSyncTree_, path, changedChildren);
  } else {
    var snap = nodeFromJSON(data);
    events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);
  }
  var affectedPath = path;
  if (events.length > 0) {
    affectedPath = repoRerunTransactions(repo, path);
  }
  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);
}
function repoInterceptServerData(repo, callback) {
  repo.interceptServerDataCallback_ = callback;
}
function repoOnConnectStatus(repo, connectStatus) {
  repoUpdateInfo(repo, "connected", connectStatus);
  if (connectStatus === false) {
    repoRunOnDisconnectEvents(repo);
  }
}
function repoOnServerInfoUpdate(repo, updates) {
  each(updates, function(key, value) {
    repoUpdateInfo(repo, key, value);
  });
}
function repoUpdateInfo(repo, pathString, value) {
  var path = new Path("/.info/" + pathString);
  var newNode = nodeFromJSON(value);
  repo.infoData_.updateSnapshot(path, newNode);
  var events = syncTreeApplyServerOverwrite(repo.infoSyncTree_, path, newNode);
  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);
}
function repoGetNextWriteId(repo) {
  return repo.nextWriteId_++;
}
function repoGetValue(repo, query2) {
  var cached = syncTreeGetServerValue(repo.serverSyncTree_, query2);
  if (cached != null) {
    return Promise.resolve(cached);
  }
  return repo.server_.get(query2).then(function(payload) {
    var node = nodeFromJSON(payload).withIndex(query2._queryParams.getIndex());
    var events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, query2._path, node);
    eventQueueRaiseEventsAtPath(repo.eventQueue_, query2._path, events);
    return Promise.resolve(node);
  }, function(err) {
    repoLog(repo, "get for query " + stringify(query2) + " failed: " + err);
    return Promise.reject(new Error(err));
  });
}
function repoSetWithPriority(repo, path, newVal, newPriority, onComplete) {
  repoLog(repo, "set", {
    path: path.toString(),
    value: newVal,
    priority: newPriority
  });
  var serverValues = repoGenerateServerValues(repo);
  var newNodeUnresolved = nodeFromJSON(newVal, newPriority);
  var existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);
  var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, existing, serverValues);
  var writeId = repoGetNextWriteId(repo);
  var events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, writeId, true);
  eventQueueQueueEvents(repo.eventQueue_, events);
  repo.server_.put(path.toString(), newNodeUnresolved.val(true), function(status, errorReason) {
    var success = status === "ok";
    if (!success) {
      warn("set at " + path + " failed: " + status);
    }
    var clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId, !success);
    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);
    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);
  });
  var affectedPath = repoAbortTransactions(repo, path);
  repoRerunTransactions(repo, affectedPath);
  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);
}
function repoUpdate(repo, path, childrenToMerge, onComplete) {
  repoLog(repo, "update", { path: path.toString(), value: childrenToMerge });
  var empty = true;
  var serverValues = repoGenerateServerValues(repo);
  var changedChildren = {};
  each(childrenToMerge, function(changedKey, changedValue) {
    empty = false;
    changedChildren[changedKey] = resolveDeferredValueTree(pathChild(path, changedKey), nodeFromJSON(changedValue), repo.serverSyncTree_, serverValues);
  });
  if (!empty) {
    var writeId_1 = repoGetNextWriteId(repo);
    var events = syncTreeApplyUserMerge(repo.serverSyncTree_, path, changedChildren, writeId_1);
    eventQueueQueueEvents(repo.eventQueue_, events);
    repo.server_.merge(path.toString(), childrenToMerge, function(status, errorReason) {
      var success = status === "ok";
      if (!success) {
        warn("update at " + path + " failed: " + status);
      }
      var clearEvents = syncTreeAckUserWrite(repo.serverSyncTree_, writeId_1, !success);
      var affectedPath = clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;
      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, clearEvents);
      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);
    });
    each(childrenToMerge, function(changedPath) {
      var affectedPath = repoAbortTransactions(repo, pathChild(path, changedPath));
      repoRerunTransactions(repo, affectedPath);
    });
    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);
  } else {
    log("update() called with empty data.  Don't do anything.");
    repoCallOnCompleteCallback(repo, onComplete, "ok", void 0);
  }
}
function repoRunOnDisconnectEvents(repo) {
  repoLog(repo, "onDisconnectEvents");
  var serverValues = repoGenerateServerValues(repo);
  var resolvedOnDisconnectTree = newSparseSnapshotTree();
  sparseSnapshotTreeForEachTree(repo.onDisconnect_, newEmptyPath(), function(path, node) {
    var resolved = resolveDeferredValueTree(path, node, repo.serverSyncTree_, serverValues);
    sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);
  });
  var events = [];
  sparseSnapshotTreeForEachTree(resolvedOnDisconnectTree, newEmptyPath(), function(path, snap) {
    events = events.concat(syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap));
    var affectedPath = repoAbortTransactions(repo, path);
    repoRerunTransactions(repo, affectedPath);
  });
  repo.onDisconnect_ = newSparseSnapshotTree();
  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);
}
function repoOnDisconnectCancel(repo, path, onComplete) {
  repo.server_.onDisconnectCancel(path.toString(), function(status, errorReason) {
    if (status === "ok") {
      sparseSnapshotTreeForget(repo.onDisconnect_, path);
    }
    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);
  });
}
function repoOnDisconnectSet(repo, path, value, onComplete) {
  var newNode = nodeFromJSON(value);
  repo.server_.onDisconnectPut(path.toString(), newNode.val(true), function(status, errorReason) {
    if (status === "ok") {
      sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);
    }
    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);
  });
}
function repoOnDisconnectSetWithPriority(repo, path, value, priority, onComplete) {
  var newNode = nodeFromJSON(value, priority);
  repo.server_.onDisconnectPut(path.toString(), newNode.val(true), function(status, errorReason) {
    if (status === "ok") {
      sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);
    }
    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);
  });
}
function repoOnDisconnectUpdate(repo, path, childrenToMerge, onComplete) {
  if (isEmpty(childrenToMerge)) {
    log("onDisconnect().update() called with empty data.  Don't do anything.");
    repoCallOnCompleteCallback(repo, onComplete, "ok", void 0);
    return;
  }
  repo.server_.onDisconnectMerge(path.toString(), childrenToMerge, function(status, errorReason) {
    if (status === "ok") {
      each(childrenToMerge, function(childName, childNode) {
        var newChildNode = nodeFromJSON(childNode);
        sparseSnapshotTreeRemember(repo.onDisconnect_, pathChild(path, childName), newChildNode);
      });
    }
    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);
  });
}
function repoAddEventCallbackForQuery(repo, query2, eventRegistration) {
  var events;
  if (pathGetFront(query2._path) === ".info") {
    events = syncTreeAddEventRegistration(repo.infoSyncTree_, query2, eventRegistration);
  } else {
    events = syncTreeAddEventRegistration(repo.serverSyncTree_, query2, eventRegistration);
  }
  eventQueueRaiseEventsAtPath(repo.eventQueue_, query2._path, events);
}
function repoRemoveEventCallbackForQuery(repo, query2, eventRegistration) {
  var events;
  if (pathGetFront(query2._path) === ".info") {
    events = syncTreeRemoveEventRegistration(repo.infoSyncTree_, query2, eventRegistration);
  } else {
    events = syncTreeRemoveEventRegistration(repo.serverSyncTree_, query2, eventRegistration);
  }
  eventQueueRaiseEventsAtPath(repo.eventQueue_, query2._path, events);
}
function repoInterrupt(repo) {
  if (repo.persistentConnection_) {
    repo.persistentConnection_.interrupt(INTERRUPT_REASON);
  }
}
function repoResume(repo) {
  if (repo.persistentConnection_) {
    repo.persistentConnection_.resume(INTERRUPT_REASON);
  }
}
function repoStats(repo, showDelta) {
  if (showDelta === void 0) {
    showDelta = false;
  }
  if (typeof console === "undefined") {
    return;
  }
  var stats2;
  if (showDelta) {
    if (!repo.statsListener_) {
      repo.statsListener_ = new StatsListener(repo.stats_);
    }
    stats2 = repo.statsListener_.get();
  } else {
    stats2 = repo.stats_.get();
  }
  var longestName = Object.keys(stats2).reduce(function(previousValue, currentValue) {
    return Math.max(currentValue.length, previousValue);
  }, 0);
  each(stats2, function(stat, value) {
    var paddedStat = stat;
    for (var i = stat.length; i < longestName + 2; i++) {
      paddedStat += " ";
    }
    console.log(paddedStat + value);
  });
}
function repoStatsIncrementCounter(repo, metric) {
  repo.stats_.incrementCounter(metric);
  statsReporterIncludeStat(repo.statsReporter_, metric);
}
function repoLog(repo) {
  var varArgs = [];
  for (var _i2 = 1; _i2 < arguments.length; _i2++) {
    varArgs[_i2 - 1] = arguments[_i2];
  }
  var prefix = "";
  if (repo.persistentConnection_) {
    prefix = repo.persistentConnection_.id + ":";
  }
  log.apply(void 0, __spreadArray([prefix], __read(varArgs)));
}
function repoCallOnCompleteCallback(repo, callback, status, errorReason) {
  if (callback) {
    exceptionGuard(function() {
      if (status === "ok") {
        callback(null);
      } else {
        var code = (status || "error").toUpperCase();
        var message = code;
        if (errorReason) {
          message += ": " + errorReason;
        }
        var error2 = new Error(message);
        error2.code = code;
        callback(error2);
      }
    });
  }
}
function repoStartTransaction(repo, path, transactionUpdate, onComplete, unwatcher, applyLocally) {
  repoLog(repo, "transaction on " + path);
  var transaction = {
    path,
    update: transactionUpdate,
    onComplete,
    status: null,
    order: LUIDGenerator(),
    applyLocally,
    retryCount: 0,
    unwatcher,
    abortReason: null,
    currentWriteId: null,
    currentInputSnapshot: null,
    currentOutputSnapshotRaw: null,
    currentOutputSnapshotResolved: null
  };
  var currentState = repoGetLatestState(repo, path, void 0);
  transaction.currentInputSnapshot = currentState;
  var newVal = transaction.update(currentState.val());
  if (newVal === void 0) {
    transaction.unwatcher();
    transaction.currentOutputSnapshotRaw = null;
    transaction.currentOutputSnapshotResolved = null;
    if (transaction.onComplete) {
      transaction.onComplete(null, false, transaction.currentInputSnapshot);
    }
  } else {
    validateFirebaseData("transaction failed: Data returned ", newVal, transaction.path);
    transaction.status = 0;
    var queueNode = treeSubTree(repo.transactionQueueTree_, path);
    var nodeQueue = treeGetValue(queueNode) || [];
    nodeQueue.push(transaction);
    treeSetValue(queueNode, nodeQueue);
    var priorityForNode = void 0;
    if (typeof newVal === "object" && newVal !== null && contains(newVal, ".priority")) {
      priorityForNode = safeGet(newVal, ".priority");
      assert(isValidPriority(priorityForNode), "Invalid priority returned by transaction. Priority must be a valid string, finite number, server value, or null.");
    } else {
      var currentNode = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) || ChildrenNode.EMPTY_NODE;
      priorityForNode = currentNode.getPriority().val();
    }
    var serverValues = repoGenerateServerValues(repo);
    var newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);
    var newNode = resolveDeferredValueSnapshot(newNodeUnresolved, currentState, serverValues);
    transaction.currentOutputSnapshotRaw = newNodeUnresolved;
    transaction.currentOutputSnapshotResolved = newNode;
    transaction.currentWriteId = repoGetNextWriteId(repo);
    var events = syncTreeApplyUserOverwrite(repo.serverSyncTree_, path, newNode, transaction.currentWriteId, transaction.applyLocally);
    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);
    repoSendReadyTransactions(repo, repo.transactionQueueTree_);
  }
}
function repoGetLatestState(repo, path, excludeSets) {
  return syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) || ChildrenNode.EMPTY_NODE;
}
function repoSendReadyTransactions(repo, node) {
  if (node === void 0) {
    node = repo.transactionQueueTree_;
  }
  if (!node) {
    repoPruneCompletedTransactionsBelowNode(repo, node);
  }
  if (treeGetValue(node)) {
    var queue2 = repoBuildTransactionQueue(repo, node);
    assert(queue2.length > 0, "Sending zero length transaction queue");
    var allRun = queue2.every(function(transaction) {
      return transaction.status === 0;
    });
    if (allRun) {
      repoSendTransactionQueue(repo, treeGetPath(node), queue2);
    }
  } else if (treeHasChildren(node)) {
    treeForEachChild(node, function(childNode) {
      repoSendReadyTransactions(repo, childNode);
    });
  }
}
function repoSendTransactionQueue(repo, path, queue2) {
  var setsToIgnore = queue2.map(function(txn2) {
    return txn2.currentWriteId;
  });
  var latestState = repoGetLatestState(repo, path, setsToIgnore);
  var snapToSend = latestState;
  var latestHash = latestState.hash();
  for (var i = 0; i < queue2.length; i++) {
    var txn = queue2[i];
    assert(txn.status === 0, "tryToSendTransactionQueue_: items in queue should all be run.");
    txn.status = 1;
    txn.retryCount++;
    var relativePath = newRelativePath(path, txn.path);
    snapToSend = snapToSend.updateChild(relativePath, txn.currentOutputSnapshotRaw);
  }
  var dataToSend = snapToSend.val(true);
  var pathToSend = path;
  repo.server_.put(pathToSend.toString(), dataToSend, function(status) {
    repoLog(repo, "transaction put response", {
      path: pathToSend.toString(),
      status
    });
    var events = [];
    if (status === "ok") {
      var callbacks = [];
      var _loop_1 = function(i3) {
        queue2[i3].status = 2;
        events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue2[i3].currentWriteId));
        if (queue2[i3].onComplete) {
          callbacks.push(function() {
            return queue2[i3].onComplete(null, true, queue2[i3].currentOutputSnapshotResolved);
          });
        }
        queue2[i3].unwatcher();
      };
      for (var i2 = 0; i2 < queue2.length; i2++) {
        _loop_1(i2);
      }
      repoPruneCompletedTransactionsBelowNode(repo, treeSubTree(repo.transactionQueueTree_, path));
      repoSendReadyTransactions(repo, repo.transactionQueueTree_);
      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);
      for (var i2 = 0; i2 < callbacks.length; i2++) {
        exceptionGuard(callbacks[i2]);
      }
    } else {
      if (status === "datastale") {
        for (var i2 = 0; i2 < queue2.length; i2++) {
          if (queue2[i2].status === 3) {
            queue2[i2].status = 4;
          } else {
            queue2[i2].status = 0;
          }
        }
      } else {
        warn("transaction at " + pathToSend.toString() + " failed: " + status);
        for (var i2 = 0; i2 < queue2.length; i2++) {
          queue2[i2].status = 4;
          queue2[i2].abortReason = status;
        }
      }
      repoRerunTransactions(repo, path);
    }
  }, latestHash);
}
function repoRerunTransactions(repo, changedPath) {
  var rootMostTransactionNode = repoGetAncestorTransactionNode(repo, changedPath);
  var path = treeGetPath(rootMostTransactionNode);
  var queue2 = repoBuildTransactionQueue(repo, rootMostTransactionNode);
  repoRerunTransactionQueue(repo, queue2, path);
  return path;
}
function repoRerunTransactionQueue(repo, queue2, path) {
  if (queue2.length === 0) {
    return;
  }
  var callbacks = [];
  var events = [];
  var txnsToRerun = queue2.filter(function(q3) {
    return q3.status === 0;
  });
  var setsToIgnore = txnsToRerun.map(function(q3) {
    return q3.currentWriteId;
  });
  var _loop_2 = function(i2) {
    var transaction = queue2[i2];
    var relativePath = newRelativePath(path, transaction.path);
    var abortTransaction = false, abortReason;
    assert(relativePath !== null, "rerunTransactionsUnderNode_: relativePath should not be null.");
    if (transaction.status === 4) {
      abortTransaction = true;
      abortReason = transaction.abortReason;
      events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));
    } else if (transaction.status === 0) {
      if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {
        abortTransaction = true;
        abortReason = "maxretry";
        events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));
      } else {
        var currentNode = repoGetLatestState(repo, transaction.path, setsToIgnore);
        transaction.currentInputSnapshot = currentNode;
        var newData = queue2[i2].update(currentNode.val());
        if (newData !== void 0) {
          validateFirebaseData("transaction failed: Data returned ", newData, transaction.path);
          var newDataNode = nodeFromJSON(newData);
          var hasExplicitPriority = typeof newData === "object" && newData != null && contains(newData, ".priority");
          if (!hasExplicitPriority) {
            newDataNode = newDataNode.updatePriority(currentNode.getPriority());
          }
          var oldWriteId = transaction.currentWriteId;
          var serverValues = repoGenerateServerValues(repo);
          var newNodeResolved = resolveDeferredValueSnapshot(newDataNode, currentNode, serverValues);
          transaction.currentOutputSnapshotRaw = newDataNode;
          transaction.currentOutputSnapshotResolved = newNodeResolved;
          transaction.currentWriteId = repoGetNextWriteId(repo);
          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);
          events = events.concat(syncTreeApplyUserOverwrite(repo.serverSyncTree_, transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));
          events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true));
        } else {
          abortTransaction = true;
          abortReason = "nodata";
          events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, transaction.currentWriteId, true));
        }
      }
    }
    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);
    events = [];
    if (abortTransaction) {
      queue2[i2].status = 2;
      (function(unwatcher) {
        setTimeout(unwatcher, Math.floor(0));
      })(queue2[i2].unwatcher);
      if (queue2[i2].onComplete) {
        if (abortReason === "nodata") {
          callbacks.push(function() {
            return queue2[i2].onComplete(null, false, queue2[i2].currentInputSnapshot);
          });
        } else {
          callbacks.push(function() {
            return queue2[i2].onComplete(new Error(abortReason), false, null);
          });
        }
      }
    }
  };
  for (var i = 0; i < queue2.length; i++) {
    _loop_2(i);
  }
  repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);
  for (var i = 0; i < callbacks.length; i++) {
    exceptionGuard(callbacks[i]);
  }
  repoSendReadyTransactions(repo, repo.transactionQueueTree_);
}
function repoGetAncestorTransactionNode(repo, path) {
  var front;
  var transactionNode = repo.transactionQueueTree_;
  front = pathGetFront(path);
  while (front !== null && treeGetValue(transactionNode) === void 0) {
    transactionNode = treeSubTree(transactionNode, front);
    path = pathPopFront(path);
    front = pathGetFront(path);
  }
  return transactionNode;
}
function repoBuildTransactionQueue(repo, transactionNode) {
  var transactionQueue = [];
  repoAggregateTransactionQueuesForNode(repo, transactionNode, transactionQueue);
  transactionQueue.sort(function(a, b) {
    return a.order - b.order;
  });
  return transactionQueue;
}
function repoAggregateTransactionQueuesForNode(repo, node, queue2) {
  var nodeQueue = treeGetValue(node);
  if (nodeQueue) {
    for (var i = 0; i < nodeQueue.length; i++) {
      queue2.push(nodeQueue[i]);
    }
  }
  treeForEachChild(node, function(child3) {
    repoAggregateTransactionQueuesForNode(repo, child3, queue2);
  });
}
function repoPruneCompletedTransactionsBelowNode(repo, node) {
  var queue2 = treeGetValue(node);
  if (queue2) {
    var to2 = 0;
    for (var from = 0; from < queue2.length; from++) {
      if (queue2[from].status !== 2) {
        queue2[to2] = queue2[from];
        to2++;
      }
    }
    queue2.length = to2;
    treeSetValue(node, queue2.length > 0 ? queue2 : void 0);
  }
  treeForEachChild(node, function(childNode) {
    repoPruneCompletedTransactionsBelowNode(repo, childNode);
  });
}
function repoAbortTransactions(repo, path) {
  var affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));
  var transactionNode = treeSubTree(repo.transactionQueueTree_, path);
  treeForEachAncestor(transactionNode, function(node) {
    repoAbortTransactionsOnNode(repo, node);
  });
  repoAbortTransactionsOnNode(repo, transactionNode);
  treeForEachDescendant(transactionNode, function(node) {
    repoAbortTransactionsOnNode(repo, node);
  });
  return affectedPath;
}
function repoAbortTransactionsOnNode(repo, node) {
  var queue2 = treeGetValue(node);
  if (queue2) {
    var callbacks = [];
    var events = [];
    var lastSent = -1;
    for (var i = 0; i < queue2.length; i++) {
      if (queue2[i].status === 3)
        ;
      else if (queue2[i].status === 1) {
        assert(lastSent === i - 1, "All SENT items should be at beginning of queue.");
        lastSent = i;
        queue2[i].status = 3;
        queue2[i].abortReason = "set";
      } else {
        assert(queue2[i].status === 0, "Unexpected transaction status in abort");
        queue2[i].unwatcher();
        events = events.concat(syncTreeAckUserWrite(repo.serverSyncTree_, queue2[i].currentWriteId, true));
        if (queue2[i].onComplete) {
          callbacks.push(queue2[i].onComplete.bind(null, new Error("set"), false, null));
        }
      }
    }
    if (lastSent === -1) {
      treeSetValue(node, void 0);
    } else {
      queue2.length = lastSent + 1;
    }
    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, treeGetPath(node), events);
    for (var i = 0; i < callbacks.length; i++) {
      exceptionGuard(callbacks[i]);
    }
  }
}
function decodePath(pathString) {
  var pathStringDecoded = "";
  var pieces = pathString.split("/");
  for (var i = 0; i < pieces.length; i++) {
    if (pieces[i].length > 0) {
      var piece = pieces[i];
      try {
        piece = decodeURIComponent(piece.replace(/\+/g, " "));
      } catch (e) {
      }
      pathStringDecoded += "/" + piece;
    }
  }
  return pathStringDecoded;
}
function decodeQuery(queryString) {
  var e_1, _a8;
  var results = {};
  if (queryString.charAt(0) === "?") {
    queryString = queryString.substring(1);
  }
  try {
    for (var _b = __values(queryString.split("&")), _c2 = _b.next(); !_c2.done; _c2 = _b.next()) {
      var segment = _c2.value;
      if (segment.length === 0) {
        continue;
      }
      var kv = segment.split("=");
      if (kv.length === 2) {
        results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);
      } else {
        warn("Invalid query segment '" + segment + "' in query '" + queryString + "'");
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (_c2 && !_c2.done && (_a8 = _b.return))
        _a8.call(_b);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return results;
}
var parseRepoInfo = function(dataURL, nodeAdmin) {
  var parsedUrl = parseDatabaseURL(dataURL), namespace = parsedUrl.namespace;
  if (parsedUrl.domain === "firebase.com") {
    fatal(parsedUrl.host + " is no longer supported. Please use <YOUR FIREBASE>.firebaseio.com instead");
  }
  if ((!namespace || namespace === "undefined") && parsedUrl.domain !== "localhost") {
    fatal("Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com");
  }
  if (!parsedUrl.secure) {
    warnIfPageIsSecure();
  }
  var webSocketOnly = parsedUrl.scheme === "ws" || parsedUrl.scheme === "wss";
  return {
    repoInfo: new RepoInfo(parsedUrl.host, parsedUrl.secure, namespace, nodeAdmin, webSocketOnly, "", namespace !== parsedUrl.subdomain),
    path: new Path(parsedUrl.pathString)
  };
};
var parseDatabaseURL = function(dataURL) {
  var host = "", domain = "", subdomain = "", pathString = "", namespace = "";
  var secure = true, scheme = "https", port = 443;
  if (typeof dataURL === "string") {
    var colonInd = dataURL.indexOf("//");
    if (colonInd >= 0) {
      scheme = dataURL.substring(0, colonInd - 1);
      dataURL = dataURL.substring(colonInd + 2);
    }
    var slashInd = dataURL.indexOf("/");
    if (slashInd === -1) {
      slashInd = dataURL.length;
    }
    var questionMarkInd = dataURL.indexOf("?");
    if (questionMarkInd === -1) {
      questionMarkInd = dataURL.length;
    }
    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));
    if (slashInd < questionMarkInd) {
      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));
    }
    var queryParams = decodeQuery(dataURL.substring(Math.min(dataURL.length, questionMarkInd)));
    colonInd = host.indexOf(":");
    if (colonInd >= 0) {
      secure = scheme === "https" || scheme === "wss";
      port = parseInt(host.substring(colonInd + 1), 10);
    } else {
      colonInd = host.length;
    }
    var hostWithoutPort = host.slice(0, colonInd);
    if (hostWithoutPort.toLowerCase() === "localhost") {
      domain = "localhost";
    } else if (hostWithoutPort.split(".").length <= 2) {
      domain = hostWithoutPort;
    } else {
      var dotInd = host.indexOf(".");
      subdomain = host.substring(0, dotInd).toLowerCase();
      domain = host.substring(dotInd + 1);
      namespace = subdomain;
    }
    if ("ns" in queryParams) {
      namespace = queryParams["ns"];
    }
  }
  return {
    host,
    port,
    domain,
    subdomain,
    secure,
    scheme,
    pathString,
    namespace
  };
};
var DataEvent = function() {
  function DataEvent2(eventType, eventRegistration, snapshot, prevName) {
    this.eventType = eventType;
    this.eventRegistration = eventRegistration;
    this.snapshot = snapshot;
    this.prevName = prevName;
  }
  DataEvent2.prototype.getPath = function() {
    var ref3 = this.snapshot.ref;
    if (this.eventType === "value") {
      return ref3._path;
    } else {
      return ref3.parent._path;
    }
  };
  DataEvent2.prototype.getEventType = function() {
    return this.eventType;
  };
  DataEvent2.prototype.getEventRunner = function() {
    return this.eventRegistration.getEventRunner(this);
  };
  DataEvent2.prototype.toString = function() {
    return this.getPath().toString() + ":" + this.eventType + ":" + stringify(this.snapshot.exportVal());
  };
  return DataEvent2;
}();
var CancelEvent = function() {
  function CancelEvent2(eventRegistration, error2, path) {
    this.eventRegistration = eventRegistration;
    this.error = error2;
    this.path = path;
  }
  CancelEvent2.prototype.getPath = function() {
    return this.path;
  };
  CancelEvent2.prototype.getEventType = function() {
    return "cancel";
  };
  CancelEvent2.prototype.getEventRunner = function() {
    return this.eventRegistration.getEventRunner(this);
  };
  CancelEvent2.prototype.toString = function() {
    return this.path.toString() + ":cancel";
  };
  return CancelEvent2;
}();
var CallbackContext = function() {
  function CallbackContext2(snapshotCallback, cancelCallback) {
    this.snapshotCallback = snapshotCallback;
    this.cancelCallback = cancelCallback;
  }
  CallbackContext2.prototype.onValue = function(expDataSnapshot, previousChildName) {
    this.snapshotCallback.call(null, expDataSnapshot, previousChildName);
  };
  CallbackContext2.prototype.onCancel = function(error2) {
    assert(this.hasCancelCallback, "Raising a cancel event on a listener with no cancel callback");
    return this.cancelCallback.call(null, error2);
  };
  Object.defineProperty(CallbackContext2.prototype, "hasCancelCallback", {
    get: function() {
      return !!this.cancelCallback;
    },
    enumerable: false,
    configurable: true
  });
  CallbackContext2.prototype.matches = function(other) {
    return this.snapshotCallback === other.snapshotCallback || this.snapshotCallback.userCallback !== void 0 && this.snapshotCallback.userCallback === other.snapshotCallback.userCallback && this.snapshotCallback.context === other.snapshotCallback.context;
  };
  return CallbackContext2;
}();
var OnDisconnect$1 = function() {
  function OnDisconnect2(_repo, _path) {
    this._repo = _repo;
    this._path = _path;
  }
  OnDisconnect2.prototype.cancel = function() {
    var deferred = new Deferred();
    repoOnDisconnectCancel(this._repo, this._path, deferred.wrapCallback(function() {
    }));
    return deferred.promise;
  };
  OnDisconnect2.prototype.remove = function() {
    validateWritablePath("OnDisconnect.remove", this._path);
    var deferred = new Deferred();
    repoOnDisconnectSet(this._repo, this._path, null, deferred.wrapCallback(function() {
    }));
    return deferred.promise;
  };
  OnDisconnect2.prototype.set = function(value) {
    validateWritablePath("OnDisconnect.set", this._path);
    validateFirebaseDataArg("OnDisconnect.set", value, this._path, false);
    var deferred = new Deferred();
    repoOnDisconnectSet(this._repo, this._path, value, deferred.wrapCallback(function() {
    }));
    return deferred.promise;
  };
  OnDisconnect2.prototype.setWithPriority = function(value, priority) {
    validateWritablePath("OnDisconnect.setWithPriority", this._path);
    validateFirebaseDataArg("OnDisconnect.setWithPriority", value, this._path, false);
    validatePriority("OnDisconnect.setWithPriority", priority, false);
    var deferred = new Deferred();
    repoOnDisconnectSetWithPriority(this._repo, this._path, value, priority, deferred.wrapCallback(function() {
    }));
    return deferred.promise;
  };
  OnDisconnect2.prototype.update = function(values) {
    validateWritablePath("OnDisconnect.update", this._path);
    validateFirebaseMergeDataArg("OnDisconnect.update", values, this._path, false);
    var deferred = new Deferred();
    repoOnDisconnectUpdate(this._repo, this._path, values, deferred.wrapCallback(function() {
    }));
    return deferred.promise;
  };
  return OnDisconnect2;
}();
var QueryImpl = function() {
  function QueryImpl2(_repo, _path, _queryParams, _orderByCalled) {
    this._repo = _repo;
    this._path = _path;
    this._queryParams = _queryParams;
    this._orderByCalled = _orderByCalled;
  }
  Object.defineProperty(QueryImpl2.prototype, "key", {
    get: function() {
      if (pathIsEmpty(this._path)) {
        return null;
      } else {
        return pathGetBack(this._path);
      }
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(QueryImpl2.prototype, "ref", {
    get: function() {
      return new ReferenceImpl(this._repo, this._path);
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(QueryImpl2.prototype, "_queryIdentifier", {
    get: function() {
      var obj = queryParamsGetQueryObject(this._queryParams);
      var id2 = ObjectToUniqueKey(obj);
      return id2 === "{}" ? "default" : id2;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(QueryImpl2.prototype, "_queryObject", {
    get: function() {
      return queryParamsGetQueryObject(this._queryParams);
    },
    enumerable: false,
    configurable: true
  });
  QueryImpl2.prototype.isEqual = function(other) {
    other = getModularInstance(other);
    if (!(other instanceof QueryImpl2)) {
      return false;
    }
    var sameRepo = this._repo === other._repo;
    var samePath = pathEquals(this._path, other._path);
    var sameQueryIdentifier = this._queryIdentifier === other._queryIdentifier;
    return sameRepo && samePath && sameQueryIdentifier;
  };
  QueryImpl2.prototype.toJSON = function() {
    return this.toString();
  };
  QueryImpl2.prototype.toString = function() {
    return this._repo.toString() + pathToUrlEncodedString(this._path);
  };
  return QueryImpl2;
}();
function validateNoPreviousOrderByCall(query2, fnName) {
  if (query2._orderByCalled === true) {
    throw new Error(fnName + ": You can't combine multiple orderBy calls.");
  }
}
function validateQueryEndpoints(params) {
  var startNode = null;
  var endNode = null;
  if (params.hasStart()) {
    startNode = params.getIndexStartValue();
  }
  if (params.hasEnd()) {
    endNode = params.getIndexEndValue();
  }
  if (params.getIndex() === KEY_INDEX) {
    var tooManyArgsError = "Query: When ordering by key, you may only pass one argument to startAt(), endAt(), or equalTo().";
    var wrongArgTypeError = "Query: When ordering by key, the argument passed to startAt(), startAfter(), endAt(), endBefore(), or equalTo() must be a string.";
    if (params.hasStart()) {
      var startName = params.getIndexStartName();
      if (startName !== MIN_NAME) {
        throw new Error(tooManyArgsError);
      } else if (typeof startNode !== "string") {
        throw new Error(wrongArgTypeError);
      }
    }
    if (params.hasEnd()) {
      var endName = params.getIndexEndName();
      if (endName !== MAX_NAME) {
        throw new Error(tooManyArgsError);
      } else if (typeof endNode !== "string") {
        throw new Error(wrongArgTypeError);
      }
    }
  } else if (params.getIndex() === PRIORITY_INDEX) {
    if (startNode != null && !isValidPriority(startNode) || endNode != null && !isValidPriority(endNode)) {
      throw new Error("Query: When ordering by priority, the first argument passed to startAt(), startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value (null, a number, or a string).");
    }
  } else {
    assert(params.getIndex() instanceof PathIndex || params.getIndex() === VALUE_INDEX, "unknown index type.");
    if (startNode != null && typeof startNode === "object" || endNode != null && typeof endNode === "object") {
      throw new Error("Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or equalTo() cannot be an object.");
    }
  }
}
function validateLimit(params) {
  if (params.hasStart() && params.hasEnd() && params.hasLimit() && !params.hasAnchoredLimit()) {
    throw new Error("Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use limitToFirst() or limitToLast() instead.");
  }
}
var ReferenceImpl = function(_super) {
  __extends(ReferenceImpl2, _super);
  function ReferenceImpl2(repo, path) {
    return _super.call(this, repo, path, new QueryParams(), false) || this;
  }
  Object.defineProperty(ReferenceImpl2.prototype, "parent", {
    get: function() {
      var parentPath = pathParent(this._path);
      return parentPath === null ? null : new ReferenceImpl2(this._repo, parentPath);
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(ReferenceImpl2.prototype, "root", {
    get: function() {
      var ref3 = this;
      while (ref3.parent !== null) {
        ref3 = ref3.parent;
      }
      return ref3;
    },
    enumerable: false,
    configurable: true
  });
  return ReferenceImpl2;
}(QueryImpl);
var DataSnapshot$1 = function() {
  function DataSnapshot2(_node, ref3, _index) {
    this._node = _node;
    this.ref = ref3;
    this._index = _index;
  }
  Object.defineProperty(DataSnapshot2.prototype, "priority", {
    get: function() {
      return this._node.getPriority().val();
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(DataSnapshot2.prototype, "key", {
    get: function() {
      return this.ref.key;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(DataSnapshot2.prototype, "size", {
    get: function() {
      return this._node.numChildren();
    },
    enumerable: false,
    configurable: true
  });
  DataSnapshot2.prototype.child = function(path) {
    var childPath = new Path(path);
    var childRef = child(this.ref, path);
    return new DataSnapshot2(this._node.getChild(childPath), childRef, PRIORITY_INDEX);
  };
  DataSnapshot2.prototype.exists = function() {
    return !this._node.isEmpty();
  };
  DataSnapshot2.prototype.exportVal = function() {
    return this._node.val(true);
  };
  DataSnapshot2.prototype.forEach = function(action) {
    var _this = this;
    if (this._node.isLeafNode()) {
      return false;
    }
    var childrenNode = this._node;
    return !!childrenNode.forEachChild(this._index, function(key, node) {
      return action(new DataSnapshot2(node, child(_this.ref, key), PRIORITY_INDEX));
    });
  };
  DataSnapshot2.prototype.hasChild = function(path) {
    var childPath = new Path(path);
    return !this._node.getChild(childPath).isEmpty();
  };
  DataSnapshot2.prototype.hasChildren = function() {
    if (this._node.isLeafNode()) {
      return false;
    } else {
      return !this._node.isEmpty();
    }
  };
  DataSnapshot2.prototype.toJSON = function() {
    return this.exportVal();
  };
  DataSnapshot2.prototype.val = function() {
    return this._node.val();
  };
  return DataSnapshot2;
}();
function ref(db2, path) {
  db2 = getModularInstance(db2);
  db2._checkNotDeleted("ref");
  return path !== void 0 ? child(db2._root, path) : db2._root;
}
function refFromURL(db2, url) {
  db2 = getModularInstance(db2);
  db2._checkNotDeleted("refFromURL");
  var parsedURL = parseRepoInfo(url, db2._repo.repoInfo_.nodeAdmin);
  validateUrl("refFromURL", parsedURL);
  var repoInfo = parsedURL.repoInfo;
  if (!db2._repo.repoInfo_.isCustomHost() && repoInfo.host !== db2._repo.repoInfo_.host) {
    fatal("refFromURL: Host name does not match the current database: (found " + repoInfo.host + " but expected " + db2._repo.repoInfo_.host + ")");
  }
  return ref(db2, parsedURL.path.toString());
}
function child(parent2, path) {
  parent2 = getModularInstance(parent2);
  if (pathGetFront(parent2._path) === null) {
    validateRootPathString("child", "path", path, false);
  } else {
    validatePathString("child", "path", path, false);
  }
  return new ReferenceImpl(parent2._repo, pathChild(parent2._path, path));
}
function push(parent2, value) {
  parent2 = getModularInstance(parent2);
  validateWritablePath("push", parent2._path);
  validateFirebaseDataArg("push", value, parent2._path, true);
  var now = repoServerTime(parent2._repo);
  var name10 = nextPushId(now);
  var thennablePushRef = child(parent2, name10);
  var pushRef = child(parent2, name10);
  var promise;
  if (value != null) {
    promise = set(pushRef, value).then(function() {
      return pushRef;
    });
  } else {
    promise = Promise.resolve(pushRef);
  }
  thennablePushRef.then = promise.then.bind(promise);
  thennablePushRef.catch = promise.then.bind(promise, void 0);
  return thennablePushRef;
}
function remove(ref3) {
  validateWritablePath("remove", ref3._path);
  return set(ref3, null);
}
function set(ref3, value) {
  ref3 = getModularInstance(ref3);
  validateWritablePath("set", ref3._path);
  validateFirebaseDataArg("set", value, ref3._path, false);
  var deferred = new Deferred();
  repoSetWithPriority(ref3._repo, ref3._path, value, null, deferred.wrapCallback(function() {
  }));
  return deferred.promise;
}
function setPriority(ref3, priority) {
  ref3 = getModularInstance(ref3);
  validateWritablePath("setPriority", ref3._path);
  validatePriority("setPriority", priority, false);
  var deferred = new Deferred();
  repoSetWithPriority(ref3._repo, pathChild(ref3._path, ".priority"), priority, null, deferred.wrapCallback(function() {
  }));
  return deferred.promise;
}
function setWithPriority(ref3, value, priority) {
  validateWritablePath("setWithPriority", ref3._path);
  validateFirebaseDataArg("setWithPriority", value, ref3._path, false);
  validatePriority("setWithPriority", priority, false);
  if (ref3.key === ".length" || ref3.key === ".keys") {
    throw "setWithPriority failed: " + ref3.key + " is a read-only object.";
  }
  var deferred = new Deferred();
  repoSetWithPriority(ref3._repo, ref3._path, value, priority, deferred.wrapCallback(function() {
  }));
  return deferred.promise;
}
function update(ref3, values) {
  validateFirebaseMergeDataArg("update", values, ref3._path, false);
  var deferred = new Deferred();
  repoUpdate(ref3._repo, ref3._path, values, deferred.wrapCallback(function() {
  }));
  return deferred.promise;
}
function get(query2) {
  query2 = getModularInstance(query2);
  return repoGetValue(query2._repo, query2).then(function(node) {
    return new DataSnapshot$1(node, new ReferenceImpl(query2._repo, query2._path), query2._queryParams.getIndex());
  });
}
var ValueEventRegistration = function() {
  function ValueEventRegistration2(callbackContext) {
    this.callbackContext = callbackContext;
  }
  ValueEventRegistration2.prototype.respondsTo = function(eventType) {
    return eventType === "value";
  };
  ValueEventRegistration2.prototype.createEvent = function(change, query2) {
    var index = query2._queryParams.getIndex();
    return new DataEvent("value", this, new DataSnapshot$1(change.snapshotNode, new ReferenceImpl(query2._repo, query2._path), index));
  };
  ValueEventRegistration2.prototype.getEventRunner = function(eventData) {
    var _this = this;
    if (eventData.getEventType() === "cancel") {
      return function() {
        return _this.callbackContext.onCancel(eventData.error);
      };
    } else {
      return function() {
        return _this.callbackContext.onValue(eventData.snapshot, null);
      };
    }
  };
  ValueEventRegistration2.prototype.createCancelEvent = function(error2, path) {
    if (this.callbackContext.hasCancelCallback) {
      return new CancelEvent(this, error2, path);
    } else {
      return null;
    }
  };
  ValueEventRegistration2.prototype.matches = function(other) {
    if (!(other instanceof ValueEventRegistration2)) {
      return false;
    } else if (!other.callbackContext || !this.callbackContext) {
      return true;
    } else {
      return other.callbackContext.matches(this.callbackContext);
    }
  };
  ValueEventRegistration2.prototype.hasAnyCallback = function() {
    return this.callbackContext !== null;
  };
  return ValueEventRegistration2;
}();
var ChildEventRegistration = function() {
  function ChildEventRegistration2(eventType, callbackContext) {
    this.eventType = eventType;
    this.callbackContext = callbackContext;
  }
  ChildEventRegistration2.prototype.respondsTo = function(eventType) {
    var eventToCheck = eventType === "children_added" ? "child_added" : eventType;
    eventToCheck = eventToCheck === "children_removed" ? "child_removed" : eventToCheck;
    return this.eventType === eventToCheck;
  };
  ChildEventRegistration2.prototype.createCancelEvent = function(error2, path) {
    if (this.callbackContext.hasCancelCallback) {
      return new CancelEvent(this, error2, path);
    } else {
      return null;
    }
  };
  ChildEventRegistration2.prototype.createEvent = function(change, query2) {
    assert(change.childName != null, "Child events should have a childName.");
    var childRef = child(new ReferenceImpl(query2._repo, query2._path), change.childName);
    var index = query2._queryParams.getIndex();
    return new DataEvent(change.type, this, new DataSnapshot$1(change.snapshotNode, childRef, index), change.prevName);
  };
  ChildEventRegistration2.prototype.getEventRunner = function(eventData) {
    var _this = this;
    if (eventData.getEventType() === "cancel") {
      return function() {
        return _this.callbackContext.onCancel(eventData.error);
      };
    } else {
      return function() {
        return _this.callbackContext.onValue(eventData.snapshot, eventData.prevName);
      };
    }
  };
  ChildEventRegistration2.prototype.matches = function(other) {
    if (other instanceof ChildEventRegistration2) {
      return this.eventType === other.eventType && (!this.callbackContext || !other.callbackContext || this.callbackContext.matches(other.callbackContext));
    }
    return false;
  };
  ChildEventRegistration2.prototype.hasAnyCallback = function() {
    return !!this.callbackContext;
  };
  return ChildEventRegistration2;
}();
function addEventListener(query2, eventType, callback, cancelCallbackOrListenOptions, options) {
  var cancelCallback;
  if (typeof cancelCallbackOrListenOptions === "object") {
    cancelCallback = void 0;
    options = cancelCallbackOrListenOptions;
  }
  if (typeof cancelCallbackOrListenOptions === "function") {
    cancelCallback = cancelCallbackOrListenOptions;
  }
  if (options && options.onlyOnce) {
    var userCallback_1 = callback;
    var onceCallback = function(dataSnapshot, previousChildName) {
      repoRemoveEventCallbackForQuery(query2._repo, query2, container);
      userCallback_1(dataSnapshot, previousChildName);
    };
    onceCallback.userCallback = callback.userCallback;
    onceCallback.context = callback.context;
    callback = onceCallback;
  }
  var callbackContext = new CallbackContext(callback, cancelCallback || void 0);
  var container = eventType === "value" ? new ValueEventRegistration(callbackContext) : new ChildEventRegistration(eventType, callbackContext);
  repoAddEventCallbackForQuery(query2._repo, query2, container);
  return function() {
    return repoRemoveEventCallbackForQuery(query2._repo, query2, container);
  };
}
function onValue(query2, callback, cancelCallbackOrListenOptions, options) {
  return addEventListener(query2, "value", callback, cancelCallbackOrListenOptions, options);
}
function onChildAdded(query2, callback, cancelCallbackOrListenOptions, options) {
  return addEventListener(query2, "child_added", callback, cancelCallbackOrListenOptions, options);
}
function onChildChanged(query2, callback, cancelCallbackOrListenOptions, options) {
  return addEventListener(query2, "child_changed", callback, cancelCallbackOrListenOptions, options);
}
function onChildMoved(query2, callback, cancelCallbackOrListenOptions, options) {
  return addEventListener(query2, "child_moved", callback, cancelCallbackOrListenOptions, options);
}
function onChildRemoved(query2, callback, cancelCallbackOrListenOptions, options) {
  return addEventListener(query2, "child_removed", callback, cancelCallbackOrListenOptions, options);
}
function off(query2, eventType, callback) {
  var container = null;
  var expCallback = callback ? new CallbackContext(callback) : null;
  if (eventType === "value") {
    container = new ValueEventRegistration(expCallback);
  } else if (eventType) {
    container = new ChildEventRegistration(eventType, expCallback);
  }
  repoRemoveEventCallbackForQuery(query2._repo, query2, container);
}
var QueryConstraint = function() {
  function QueryConstraint2() {
  }
  return QueryConstraint2;
}();
var QueryEndAtConstraint = function(_super) {
  __extends(QueryEndAtConstraint2, _super);
  function QueryEndAtConstraint2(_value, _key) {
    var _this = _super.call(this) || this;
    _this._value = _value;
    _this._key = _key;
    return _this;
  }
  QueryEndAtConstraint2.prototype._apply = function(query2) {
    validateFirebaseDataArg("endAt", this._value, query2._path, true);
    var newParams = queryParamsEndAt(query2._queryParams, this._value, this._key);
    validateLimit(newParams);
    validateQueryEndpoints(newParams);
    if (query2._queryParams.hasEnd()) {
      throw new Error("endAt: Starting point was already set (by another call to endAt, endBefore or equalTo).");
    }
    return new QueryImpl(query2._repo, query2._path, newParams, query2._orderByCalled);
  };
  return QueryEndAtConstraint2;
}(QueryConstraint);
function endAt(value, key) {
  validateKey("endAt", "key", key, true);
  return new QueryEndAtConstraint(value, key);
}
var QueryEndBeforeConstraint = function(_super) {
  __extends(QueryEndBeforeConstraint2, _super);
  function QueryEndBeforeConstraint2(_value, _key) {
    var _this = _super.call(this) || this;
    _this._value = _value;
    _this._key = _key;
    return _this;
  }
  QueryEndBeforeConstraint2.prototype._apply = function(query2) {
    validateFirebaseDataArg("endBefore", this._value, query2._path, false);
    var newParams = queryParamsEndBefore(query2._queryParams, this._value, this._key);
    validateLimit(newParams);
    validateQueryEndpoints(newParams);
    if (query2._queryParams.hasEnd()) {
      throw new Error("endBefore: Starting point was already set (by another call to endAt, endBefore or equalTo).");
    }
    return new QueryImpl(query2._repo, query2._path, newParams, query2._orderByCalled);
  };
  return QueryEndBeforeConstraint2;
}(QueryConstraint);
function endBefore(value, key) {
  validateKey("endBefore", "key", key, true);
  return new QueryEndBeforeConstraint(value, key);
}
var QueryStartAtConstraint = function(_super) {
  __extends(QueryStartAtConstraint2, _super);
  function QueryStartAtConstraint2(_value, _key) {
    var _this = _super.call(this) || this;
    _this._value = _value;
    _this._key = _key;
    return _this;
  }
  QueryStartAtConstraint2.prototype._apply = function(query2) {
    validateFirebaseDataArg("startAt", this._value, query2._path, true);
    var newParams = queryParamsStartAt(query2._queryParams, this._value, this._key);
    validateLimit(newParams);
    validateQueryEndpoints(newParams);
    if (query2._queryParams.hasStart()) {
      throw new Error("startAt: Starting point was already set (by another call to startAt, startBefore or equalTo).");
    }
    return new QueryImpl(query2._repo, query2._path, newParams, query2._orderByCalled);
  };
  return QueryStartAtConstraint2;
}(QueryConstraint);
function startAt(value, key) {
  if (value === void 0) {
    value = null;
  }
  validateKey("startAt", "key", key, true);
  return new QueryStartAtConstraint(value, key);
}
var QueryStartAfterConstraint = function(_super) {
  __extends(QueryStartAfterConstraint2, _super);
  function QueryStartAfterConstraint2(_value, _key) {
    var _this = _super.call(this) || this;
    _this._value = _value;
    _this._key = _key;
    return _this;
  }
  QueryStartAfterConstraint2.prototype._apply = function(query2) {
    validateFirebaseDataArg("startAfter", this._value, query2._path, false);
    var newParams = queryParamsStartAfter(query2._queryParams, this._value, this._key);
    validateLimit(newParams);
    validateQueryEndpoints(newParams);
    if (query2._queryParams.hasStart()) {
      throw new Error("startAfter: Starting point was already set (by another call to startAt, startAfter, or equalTo).");
    }
    return new QueryImpl(query2._repo, query2._path, newParams, query2._orderByCalled);
  };
  return QueryStartAfterConstraint2;
}(QueryConstraint);
function startAfter(value, key) {
  validateKey("startAfter", "key", key, true);
  return new QueryStartAfterConstraint(value, key);
}
var QueryLimitToFirstConstraint = function(_super) {
  __extends(QueryLimitToFirstConstraint2, _super);
  function QueryLimitToFirstConstraint2(_limit) {
    var _this = _super.call(this) || this;
    _this._limit = _limit;
    return _this;
  }
  QueryLimitToFirstConstraint2.prototype._apply = function(query2) {
    if (query2._queryParams.hasLimit()) {
      throw new Error("limitToFirst: Limit was already set (by another call to limitToFirst or limitToLast).");
    }
    return new QueryImpl(query2._repo, query2._path, queryParamsLimitToFirst(query2._queryParams, this._limit), query2._orderByCalled);
  };
  return QueryLimitToFirstConstraint2;
}(QueryConstraint);
function limitToFirst(limit) {
  if (typeof limit !== "number" || Math.floor(limit) !== limit || limit <= 0) {
    throw new Error("limitToFirst: First argument must be a positive integer.");
  }
  return new QueryLimitToFirstConstraint(limit);
}
var QueryLimitToLastConstraint = function(_super) {
  __extends(QueryLimitToLastConstraint2, _super);
  function QueryLimitToLastConstraint2(_limit) {
    var _this = _super.call(this) || this;
    _this._limit = _limit;
    return _this;
  }
  QueryLimitToLastConstraint2.prototype._apply = function(query2) {
    if (query2._queryParams.hasLimit()) {
      throw new Error("limitToLast: Limit was already set (by another call to limitToFirst or limitToLast).");
    }
    return new QueryImpl(query2._repo, query2._path, queryParamsLimitToLast(query2._queryParams, this._limit), query2._orderByCalled);
  };
  return QueryLimitToLastConstraint2;
}(QueryConstraint);
function limitToLast(limit) {
  if (typeof limit !== "number" || Math.floor(limit) !== limit || limit <= 0) {
    throw new Error("limitToLast: First argument must be a positive integer.");
  }
  return new QueryLimitToLastConstraint(limit);
}
var QueryOrderByChildConstraint = function(_super) {
  __extends(QueryOrderByChildConstraint2, _super);
  function QueryOrderByChildConstraint2(_path) {
    var _this = _super.call(this) || this;
    _this._path = _path;
    return _this;
  }
  QueryOrderByChildConstraint2.prototype._apply = function(query2) {
    validateNoPreviousOrderByCall(query2, "orderByChild");
    var parsedPath = new Path(this._path);
    if (pathIsEmpty(parsedPath)) {
      throw new Error("orderByChild: cannot pass in empty path. Use orderByValue() instead.");
    }
    var index = new PathIndex(parsedPath);
    var newParams = queryParamsOrderBy(query2._queryParams, index);
    validateQueryEndpoints(newParams);
    return new QueryImpl(query2._repo, query2._path, newParams, true);
  };
  return QueryOrderByChildConstraint2;
}(QueryConstraint);
function orderByChild(path) {
  if (path === "$key") {
    throw new Error('orderByChild: "$key" is invalid.  Use orderByKey() instead.');
  } else if (path === "$priority") {
    throw new Error('orderByChild: "$priority" is invalid.  Use orderByPriority() instead.');
  } else if (path === "$value") {
    throw new Error('orderByChild: "$value" is invalid.  Use orderByValue() instead.');
  }
  validatePathString("orderByChild", "path", path, false);
  return new QueryOrderByChildConstraint(path);
}
var QueryOrderByKeyConstraint = function(_super) {
  __extends(QueryOrderByKeyConstraint2, _super);
  function QueryOrderByKeyConstraint2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  QueryOrderByKeyConstraint2.prototype._apply = function(query2) {
    validateNoPreviousOrderByCall(query2, "orderByKey");
    var newParams = queryParamsOrderBy(query2._queryParams, KEY_INDEX);
    validateQueryEndpoints(newParams);
    return new QueryImpl(query2._repo, query2._path, newParams, true);
  };
  return QueryOrderByKeyConstraint2;
}(QueryConstraint);
function orderByKey() {
  return new QueryOrderByKeyConstraint();
}
var QueryOrderByPriorityConstraint = function(_super) {
  __extends(QueryOrderByPriorityConstraint2, _super);
  function QueryOrderByPriorityConstraint2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  QueryOrderByPriorityConstraint2.prototype._apply = function(query2) {
    validateNoPreviousOrderByCall(query2, "orderByPriority");
    var newParams = queryParamsOrderBy(query2._queryParams, PRIORITY_INDEX);
    validateQueryEndpoints(newParams);
    return new QueryImpl(query2._repo, query2._path, newParams, true);
  };
  return QueryOrderByPriorityConstraint2;
}(QueryConstraint);
function orderByPriority() {
  return new QueryOrderByPriorityConstraint();
}
var QueryOrderByValueConstraint = function(_super) {
  __extends(QueryOrderByValueConstraint2, _super);
  function QueryOrderByValueConstraint2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  QueryOrderByValueConstraint2.prototype._apply = function(query2) {
    validateNoPreviousOrderByCall(query2, "orderByValue");
    var newParams = queryParamsOrderBy(query2._queryParams, VALUE_INDEX);
    validateQueryEndpoints(newParams);
    return new QueryImpl(query2._repo, query2._path, newParams, true);
  };
  return QueryOrderByValueConstraint2;
}(QueryConstraint);
function orderByValue() {
  return new QueryOrderByValueConstraint();
}
var QueryEqualToValueConstraint = function(_super) {
  __extends(QueryEqualToValueConstraint2, _super);
  function QueryEqualToValueConstraint2(_value, _key) {
    var _this = _super.call(this) || this;
    _this._value = _value;
    _this._key = _key;
    return _this;
  }
  QueryEqualToValueConstraint2.prototype._apply = function(query2) {
    validateFirebaseDataArg("equalTo", this._value, query2._path, false);
    if (query2._queryParams.hasStart()) {
      throw new Error("equalTo: Starting point was already set (by another call to startAt/startAfter or equalTo).");
    }
    if (query2._queryParams.hasEnd()) {
      throw new Error("equalTo: Ending point was already set (by another call to endAt/endBefore or equalTo).");
    }
    return new QueryEndAtConstraint(this._value, this._key)._apply(new QueryStartAtConstraint(this._value, this._key)._apply(query2));
  };
  return QueryEqualToValueConstraint2;
}(QueryConstraint);
function equalTo(value, key) {
  validateKey("equalTo", "key", key, true);
  return new QueryEqualToValueConstraint(value, key);
}
function query(query2) {
  var e_1, _a8;
  var queryConstraints = [];
  for (var _i2 = 1; _i2 < arguments.length; _i2++) {
    queryConstraints[_i2 - 1] = arguments[_i2];
  }
  var queryImpl = getModularInstance(query2);
  try {
    for (var queryConstraints_1 = __values(queryConstraints), queryConstraints_1_1 = queryConstraints_1.next(); !queryConstraints_1_1.done; queryConstraints_1_1 = queryConstraints_1.next()) {
      var constraint = queryConstraints_1_1.value;
      queryImpl = constraint._apply(queryImpl);
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (queryConstraints_1_1 && !queryConstraints_1_1.done && (_a8 = queryConstraints_1.return))
        _a8.call(queryConstraints_1);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return queryImpl;
}
syncPointSetReferenceConstructor(ReferenceImpl);
syncTreeSetReferenceConstructor(ReferenceImpl);
var FIREBASE_DATABASE_EMULATOR_HOST_VAR = "FIREBASE_DATABASE_EMULATOR_HOST";
var repos = {};
var useRestClient = false;
function repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider) {
  repo.repoInfo_ = new RepoInfo(host + ":" + port, false, repo.repoInfo_.namespace, repo.repoInfo_.webSocketOnly, repo.repoInfo_.nodeAdmin, repo.repoInfo_.persistenceKey, repo.repoInfo_.includeNamespaceInQueryParams);
  if (tokenProvider) {
    repo.authTokenProvider_ = tokenProvider;
  }
}
function repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url, nodeAdmin) {
  var dbUrl = url || app.options.databaseURL;
  if (dbUrl === void 0) {
    if (!app.options.projectId) {
      fatal("Can't determine Firebase Database URL. Be sure to include  a Project ID when calling firebase.initializeApp().");
    }
    log("Using default host for project ", app.options.projectId);
    dbUrl = app.options.projectId + "-default-rtdb.firebaseio.com";
  }
  var parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);
  var repoInfo = parsedUrl.repoInfo;
  var isEmulator;
  var dbEmulatorHost = void 0;
  if (typeof process !== "undefined") {
    dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];
  }
  if (dbEmulatorHost) {
    isEmulator = true;
    dbUrl = "http://" + dbEmulatorHost + "?ns=" + repoInfo.namespace;
    parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);
    repoInfo = parsedUrl.repoInfo;
  } else {
    isEmulator = !parsedUrl.repoInfo.secure;
  }
  var authTokenProvider = nodeAdmin && isEmulator ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER) : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);
  validateUrl("Invalid Firebase Database URL", parsedUrl);
  if (!pathIsEmpty(parsedUrl.path)) {
    fatal("Database URL must point to the root of a Firebase Database (not including a child path).");
  }
  var repo = repoManagerCreateRepo(repoInfo, app, authTokenProvider, new AppCheckTokenProvider(app.name, appCheckProvider));
  return new Database$1(repo, app);
}
function repoManagerDeleteRepo(repo, appName) {
  var appRepos = repos[appName];
  if (!appRepos || appRepos[repo.key] !== repo) {
    fatal("Database " + appName + "(" + repo.repoInfo_ + ") has already been deleted.");
  }
  repoInterrupt(repo);
  delete appRepos[repo.key];
}
function repoManagerCreateRepo(repoInfo, app, authTokenProvider, appCheckProvider) {
  var appRepos = repos[app.name];
  if (!appRepos) {
    appRepos = {};
    repos[app.name] = appRepos;
  }
  var repo = appRepos[repoInfo.toURLString()];
  if (repo) {
    fatal("Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.");
  }
  repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);
  appRepos[repoInfo.toURLString()] = repo;
  return repo;
}
function repoManagerForceRestClient(forceRestClient2) {
  useRestClient = forceRestClient2;
}
var Database$1 = function() {
  function Database2(_repoInternal, app) {
    this._repoInternal = _repoInternal;
    this.app = app;
    this["type"] = "database";
    this._instanceStarted = false;
  }
  Object.defineProperty(Database2.prototype, "_repo", {
    get: function() {
      if (!this._instanceStarted) {
        repoStart(this._repoInternal, this.app.options.appId, this.app.options["databaseAuthVariableOverride"]);
        this._instanceStarted = true;
      }
      return this._repoInternal;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Database2.prototype, "_root", {
    get: function() {
      if (!this._rootInternal) {
        this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());
      }
      return this._rootInternal;
    },
    enumerable: false,
    configurable: true
  });
  Database2.prototype._delete = function() {
    if (this._rootInternal !== null) {
      repoManagerDeleteRepo(this._repo, this.app.name);
      this._repoInternal = null;
      this._rootInternal = null;
    }
    return Promise.resolve();
  };
  Database2.prototype._checkNotDeleted = function(apiName) {
    if (this._rootInternal === null) {
      fatal("Cannot call " + apiName + " on a deleted database.");
    }
  };
  return Database2;
}();
function connectDatabaseEmulator(db2, host, port, options) {
  if (options === void 0) {
    options = {};
  }
  db2 = getModularInstance(db2);
  db2._checkNotDeleted("useEmulator");
  if (db2._instanceStarted) {
    fatal("Cannot call useEmulator() after instance has already been initialized.");
  }
  var repo = db2._repoInternal;
  var tokenProvider = void 0;
  if (repo.repoInfo_.nodeAdmin) {
    if (options.mockUserToken) {
      fatal('mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the "firebase" package instead of "firebase-admin".');
    }
    tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);
  } else if (options.mockUserToken) {
    var token = typeof options.mockUserToken === "string" ? options.mockUserToken : createMockUserToken(options.mockUserToken, db2.app.options.projectId);
    tokenProvider = new EmulatorTokenProvider(token);
  }
  repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);
}
function goOffline(db2) {
  db2 = getModularInstance(db2);
  db2._checkNotDeleted("goOffline");
  repoInterrupt(db2._repo);
}
function goOnline(db2) {
  db2 = getModularInstance(db2);
  db2._checkNotDeleted("goOnline");
  repoResume(db2._repo);
}
var SERVER_TIMESTAMP = {
  ".sv": "timestamp"
};
function serverTimestamp() {
  return SERVER_TIMESTAMP;
}
function increment(delta) {
  return {
    ".sv": {
      "increment": delta
    }
  };
}
var TransactionResult$1 = function() {
  function TransactionResult2(committed, snapshot) {
    this.committed = committed;
    this.snapshot = snapshot;
  }
  TransactionResult2.prototype.toJSON = function() {
    return { committed: this.committed, snapshot: this.snapshot.toJSON() };
  };
  return TransactionResult2;
}();
function runTransaction(ref3, transactionUpdate, options) {
  var _a8;
  ref3 = getModularInstance(ref3);
  validateWritablePath("Reference.transaction", ref3._path);
  if (ref3.key === ".length" || ref3.key === ".keys") {
    throw "Reference.transaction failed: " + ref3.key + " is a read-only object.";
  }
  var applyLocally = (_a8 = options === null || options === void 0 ? void 0 : options.applyLocally) !== null && _a8 !== void 0 ? _a8 : true;
  var deferred = new Deferred();
  var promiseComplete = function(error2, committed, node) {
    var dataSnapshot = null;
    if (error2) {
      deferred.reject(error2);
    } else {
      dataSnapshot = new DataSnapshot$1(node, new ReferenceImpl(ref3._repo, ref3._path), PRIORITY_INDEX);
      deferred.resolve(new TransactionResult$1(committed, dataSnapshot));
    }
  };
  var unwatcher = onValue(ref3, function() {
  });
  repoStartTransaction(ref3._repo, ref3._path, transactionUpdate, promiseComplete, unwatcher, applyLocally);
  return deferred.promise;
}
var OnDisconnect = function() {
  function OnDisconnect2(_delegate) {
    this._delegate = _delegate;
  }
  OnDisconnect2.prototype.cancel = function(onComplete) {
    validateArgCount("OnDisconnect.cancel", 0, 1, arguments.length);
    validateCallback("OnDisconnect.cancel", "onComplete", onComplete, true);
    var result = this._delegate.cancel();
    if (onComplete) {
      result.then(function() {
        return onComplete(null);
      }, function(error2) {
        return onComplete(error2);
      });
    }
    return result;
  };
  OnDisconnect2.prototype.remove = function(onComplete) {
    validateArgCount("OnDisconnect.remove", 0, 1, arguments.length);
    validateCallback("OnDisconnect.remove", "onComplete", onComplete, true);
    var result = this._delegate.remove();
    if (onComplete) {
      result.then(function() {
        return onComplete(null);
      }, function(error2) {
        return onComplete(error2);
      });
    }
    return result;
  };
  OnDisconnect2.prototype.set = function(value, onComplete) {
    validateArgCount("OnDisconnect.set", 1, 2, arguments.length);
    validateCallback("OnDisconnect.set", "onComplete", onComplete, true);
    var result = this._delegate.set(value);
    if (onComplete) {
      result.then(function() {
        return onComplete(null);
      }, function(error2) {
        return onComplete(error2);
      });
    }
    return result;
  };
  OnDisconnect2.prototype.setWithPriority = function(value, priority, onComplete) {
    validateArgCount("OnDisconnect.setWithPriority", 2, 3, arguments.length);
    validateCallback("OnDisconnect.setWithPriority", "onComplete", onComplete, true);
    var result = this._delegate.setWithPriority(value, priority);
    if (onComplete) {
      result.then(function() {
        return onComplete(null);
      }, function(error2) {
        return onComplete(error2);
      });
    }
    return result;
  };
  OnDisconnect2.prototype.update = function(objectToMerge, onComplete) {
    validateArgCount("OnDisconnect.update", 1, 2, arguments.length);
    if (Array.isArray(objectToMerge)) {
      var newObjectToMerge = {};
      for (var i = 0; i < objectToMerge.length; ++i) {
        newObjectToMerge["" + i] = objectToMerge[i];
      }
      objectToMerge = newObjectToMerge;
      warn("Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the existing data, or an Object with integer keys if you really do want to only update some of the children.");
    }
    validateCallback("OnDisconnect.update", "onComplete", onComplete, true);
    var result = this._delegate.update(objectToMerge);
    if (onComplete) {
      result.then(function() {
        return onComplete(null);
      }, function(error2) {
        return onComplete(error2);
      });
    }
    return result;
  };
  return OnDisconnect2;
}();
var TransactionResult = function() {
  function TransactionResult2(committed, snapshot) {
    this.committed = committed;
    this.snapshot = snapshot;
  }
  TransactionResult2.prototype.toJSON = function() {
    validateArgCount("TransactionResult.toJSON", 0, 1, arguments.length);
    return { committed: this.committed, snapshot: this.snapshot.toJSON() };
  };
  return TransactionResult2;
}();
var DataSnapshot = function() {
  function DataSnapshot2(_database, _delegate) {
    this._database = _database;
    this._delegate = _delegate;
  }
  DataSnapshot2.prototype.val = function() {
    validateArgCount("DataSnapshot.val", 0, 0, arguments.length);
    return this._delegate.val();
  };
  DataSnapshot2.prototype.exportVal = function() {
    validateArgCount("DataSnapshot.exportVal", 0, 0, arguments.length);
    return this._delegate.exportVal();
  };
  DataSnapshot2.prototype.toJSON = function() {
    validateArgCount("DataSnapshot.toJSON", 0, 1, arguments.length);
    return this._delegate.toJSON();
  };
  DataSnapshot2.prototype.exists = function() {
    validateArgCount("DataSnapshot.exists", 0, 0, arguments.length);
    return this._delegate.exists();
  };
  DataSnapshot2.prototype.child = function(path) {
    validateArgCount("DataSnapshot.child", 0, 1, arguments.length);
    path = String(path);
    validatePathString("DataSnapshot.child", "path", path, false);
    return new DataSnapshot2(this._database, this._delegate.child(path));
  };
  DataSnapshot2.prototype.hasChild = function(path) {
    validateArgCount("DataSnapshot.hasChild", 1, 1, arguments.length);
    validatePathString("DataSnapshot.hasChild", "path", path, false);
    return this._delegate.hasChild(path);
  };
  DataSnapshot2.prototype.getPriority = function() {
    validateArgCount("DataSnapshot.getPriority", 0, 0, arguments.length);
    return this._delegate.priority;
  };
  DataSnapshot2.prototype.forEach = function(action) {
    var _this = this;
    validateArgCount("DataSnapshot.forEach", 1, 1, arguments.length);
    validateCallback("DataSnapshot.forEach", "action", action, false);
    return this._delegate.forEach(function(expDataSnapshot) {
      return action(new DataSnapshot2(_this._database, expDataSnapshot));
    });
  };
  DataSnapshot2.prototype.hasChildren = function() {
    validateArgCount("DataSnapshot.hasChildren", 0, 0, arguments.length);
    return this._delegate.hasChildren();
  };
  Object.defineProperty(DataSnapshot2.prototype, "key", {
    get: function() {
      return this._delegate.key;
    },
    enumerable: false,
    configurable: true
  });
  DataSnapshot2.prototype.numChildren = function() {
    validateArgCount("DataSnapshot.numChildren", 0, 0, arguments.length);
    return this._delegate.size;
  };
  DataSnapshot2.prototype.getRef = function() {
    validateArgCount("DataSnapshot.ref", 0, 0, arguments.length);
    return new Reference(this._database, this._delegate.ref);
  };
  Object.defineProperty(DataSnapshot2.prototype, "ref", {
    get: function() {
      return this.getRef();
    },
    enumerable: false,
    configurable: true
  });
  return DataSnapshot2;
}();
var Query = function() {
  function Query2(database, _delegate) {
    this.database = database;
    this._delegate = _delegate;
  }
  Query2.prototype.on = function(eventType, callback, cancelCallbackOrContext, context) {
    var _this = this;
    var _a8;
    validateArgCount("Query.on", 2, 4, arguments.length);
    validateCallback("Query.on", "callback", callback, false);
    var ret = Query2.getCancelAndContextArgs_("Query.on", cancelCallbackOrContext, context);
    var valueCallback = function(expSnapshot, previousChildName) {
      callback.call(ret.context, new DataSnapshot(_this.database, expSnapshot), previousChildName);
    };
    valueCallback.userCallback = callback;
    valueCallback.context = ret.context;
    var cancelCallback = (_a8 = ret.cancel) === null || _a8 === void 0 ? void 0 : _a8.bind(ret.context);
    switch (eventType) {
      case "value":
        onValue(this._delegate, valueCallback, cancelCallback);
        return callback;
      case "child_added":
        onChildAdded(this._delegate, valueCallback, cancelCallback);
        return callback;
      case "child_removed":
        onChildRemoved(this._delegate, valueCallback, cancelCallback);
        return callback;
      case "child_changed":
        onChildChanged(this._delegate, valueCallback, cancelCallback);
        return callback;
      case "child_moved":
        onChildMoved(this._delegate, valueCallback, cancelCallback);
        return callback;
      default:
        throw new Error(errorPrefix("Query.on", "eventType") + 'must be a valid event type = "value", "child_added", "child_removed", "child_changed", or "child_moved".');
    }
  };
  Query2.prototype.off = function(eventType, callback, context) {
    validateArgCount("Query.off", 0, 3, arguments.length);
    validateEventType("Query.off", eventType, true);
    validateCallback("Query.off", "callback", callback, true);
    validateContextObject("Query.off", "context", context, true);
    if (callback) {
      var valueCallback = function() {
      };
      valueCallback.userCallback = callback;
      valueCallback.context = context;
      off(this._delegate, eventType, valueCallback);
    } else {
      off(this._delegate, eventType);
    }
  };
  Query2.prototype.get = function() {
    var _this = this;
    return get(this._delegate).then(function(expSnapshot) {
      return new DataSnapshot(_this.database, expSnapshot);
    });
  };
  Query2.prototype.once = function(eventType, callback, failureCallbackOrContext, context) {
    var _this = this;
    validateArgCount("Query.once", 1, 4, arguments.length);
    validateCallback("Query.once", "callback", callback, true);
    var ret = Query2.getCancelAndContextArgs_("Query.once", failureCallbackOrContext, context);
    var deferred = new Deferred();
    var valueCallback = function(expSnapshot, previousChildName) {
      var result = new DataSnapshot(_this.database, expSnapshot);
      if (callback) {
        callback.call(ret.context, result, previousChildName);
      }
      deferred.resolve(result);
    };
    valueCallback.userCallback = callback;
    valueCallback.context = ret.context;
    var cancelCallback = function(error2) {
      if (ret.cancel) {
        ret.cancel.call(ret.context, error2);
      }
      deferred.reject(error2);
    };
    switch (eventType) {
      case "value":
        onValue(this._delegate, valueCallback, cancelCallback, {
          onlyOnce: true
        });
        break;
      case "child_added":
        onChildAdded(this._delegate, valueCallback, cancelCallback, {
          onlyOnce: true
        });
        break;
      case "child_removed":
        onChildRemoved(this._delegate, valueCallback, cancelCallback, {
          onlyOnce: true
        });
        break;
      case "child_changed":
        onChildChanged(this._delegate, valueCallback, cancelCallback, {
          onlyOnce: true
        });
        break;
      case "child_moved":
        onChildMoved(this._delegate, valueCallback, cancelCallback, {
          onlyOnce: true
        });
        break;
      default:
        throw new Error(errorPrefix("Query.once", "eventType") + 'must be a valid event type = "value", "child_added", "child_removed", "child_changed", or "child_moved".');
    }
    return deferred.promise;
  };
  Query2.prototype.limitToFirst = function(limit) {
    validateArgCount("Query.limitToFirst", 1, 1, arguments.length);
    return new Query2(this.database, query(this._delegate, limitToFirst(limit)));
  };
  Query2.prototype.limitToLast = function(limit) {
    validateArgCount("Query.limitToLast", 1, 1, arguments.length);
    return new Query2(this.database, query(this._delegate, limitToLast(limit)));
  };
  Query2.prototype.orderByChild = function(path) {
    validateArgCount("Query.orderByChild", 1, 1, arguments.length);
    return new Query2(this.database, query(this._delegate, orderByChild(path)));
  };
  Query2.prototype.orderByKey = function() {
    validateArgCount("Query.orderByKey", 0, 0, arguments.length);
    return new Query2(this.database, query(this._delegate, orderByKey()));
  };
  Query2.prototype.orderByPriority = function() {
    validateArgCount("Query.orderByPriority", 0, 0, arguments.length);
    return new Query2(this.database, query(this._delegate, orderByPriority()));
  };
  Query2.prototype.orderByValue = function() {
    validateArgCount("Query.orderByValue", 0, 0, arguments.length);
    return new Query2(this.database, query(this._delegate, orderByValue()));
  };
  Query2.prototype.startAt = function(value, name10) {
    if (value === void 0) {
      value = null;
    }
    validateArgCount("Query.startAt", 0, 2, arguments.length);
    return new Query2(this.database, query(this._delegate, startAt(value, name10)));
  };
  Query2.prototype.startAfter = function(value, name10) {
    if (value === void 0) {
      value = null;
    }
    validateArgCount("Query.startAfter", 0, 2, arguments.length);
    return new Query2(this.database, query(this._delegate, startAfter(value, name10)));
  };
  Query2.prototype.endAt = function(value, name10) {
    if (value === void 0) {
      value = null;
    }
    validateArgCount("Query.endAt", 0, 2, arguments.length);
    return new Query2(this.database, query(this._delegate, endAt(value, name10)));
  };
  Query2.prototype.endBefore = function(value, name10) {
    if (value === void 0) {
      value = null;
    }
    validateArgCount("Query.endBefore", 0, 2, arguments.length);
    return new Query2(this.database, query(this._delegate, endBefore(value, name10)));
  };
  Query2.prototype.equalTo = function(value, name10) {
    validateArgCount("Query.equalTo", 1, 2, arguments.length);
    return new Query2(this.database, query(this._delegate, equalTo(value, name10)));
  };
  Query2.prototype.toString = function() {
    validateArgCount("Query.toString", 0, 0, arguments.length);
    return this._delegate.toString();
  };
  Query2.prototype.toJSON = function() {
    validateArgCount("Query.toJSON", 0, 1, arguments.length);
    return this._delegate.toJSON();
  };
  Query2.prototype.isEqual = function(other) {
    validateArgCount("Query.isEqual", 1, 1, arguments.length);
    if (!(other instanceof Query2)) {
      var error2 = "Query.isEqual failed: First argument must be an instance of firebase.database.Query.";
      throw new Error(error2);
    }
    return this._delegate.isEqual(other._delegate);
  };
  Query2.getCancelAndContextArgs_ = function(fnName, cancelOrContext, context) {
    var ret = { cancel: void 0, context: void 0 };
    if (cancelOrContext && context) {
      ret.cancel = cancelOrContext;
      validateCallback(fnName, "cancel", ret.cancel, true);
      ret.context = context;
      validateContextObject(fnName, "context", ret.context, true);
    } else if (cancelOrContext) {
      if (typeof cancelOrContext === "object" && cancelOrContext !== null) {
        ret.context = cancelOrContext;
      } else if (typeof cancelOrContext === "function") {
        ret.cancel = cancelOrContext;
      } else {
        throw new Error(errorPrefix(fnName, "cancelOrContext") + " must either be a cancel callback or a context object.");
      }
    }
    return ret;
  };
  Object.defineProperty(Query2.prototype, "ref", {
    get: function() {
      return new Reference(this.database, new ReferenceImpl(this._delegate._repo, this._delegate._path));
    },
    enumerable: false,
    configurable: true
  });
  return Query2;
}();
var Reference = function(_super) {
  __extends(Reference3, _super);
  function Reference3(database, _delegate) {
    var _this = _super.call(this, database, new QueryImpl(_delegate._repo, _delegate._path, new QueryParams(), false)) || this;
    _this.database = database;
    _this._delegate = _delegate;
    return _this;
  }
  Reference3.prototype.getKey = function() {
    validateArgCount("Reference.key", 0, 0, arguments.length);
    return this._delegate.key;
  };
  Reference3.prototype.child = function(pathString) {
    validateArgCount("Reference.child", 1, 1, arguments.length);
    if (typeof pathString === "number") {
      pathString = String(pathString);
    }
    return new Reference3(this.database, child(this._delegate, pathString));
  };
  Reference3.prototype.getParent = function() {
    validateArgCount("Reference.parent", 0, 0, arguments.length);
    var parent2 = this._delegate.parent;
    return parent2 ? new Reference3(this.database, parent2) : null;
  };
  Reference3.prototype.getRoot = function() {
    validateArgCount("Reference.root", 0, 0, arguments.length);
    return new Reference3(this.database, this._delegate.root);
  };
  Reference3.prototype.set = function(newVal, onComplete) {
    validateArgCount("Reference.set", 1, 2, arguments.length);
    validateCallback("Reference.set", "onComplete", onComplete, true);
    var result = set(this._delegate, newVal);
    if (onComplete) {
      result.then(function() {
        return onComplete(null);
      }, function(error2) {
        return onComplete(error2);
      });
    }
    return result;
  };
  Reference3.prototype.update = function(values, onComplete) {
    validateArgCount("Reference.update", 1, 2, arguments.length);
    if (Array.isArray(values)) {
      var newObjectToMerge = {};
      for (var i = 0; i < values.length; ++i) {
        newObjectToMerge["" + i] = values[i];
      }
      values = newObjectToMerge;
      warn("Passing an Array to Firebase.update() is deprecated. Use set() if you want to overwrite the existing data, or an Object with integer keys if you really do want to only update some of the children.");
    }
    validateWritablePath("Reference.update", this._delegate._path);
    validateCallback("Reference.update", "onComplete", onComplete, true);
    var result = update(this._delegate, values);
    if (onComplete) {
      result.then(function() {
        return onComplete(null);
      }, function(error2) {
        return onComplete(error2);
      });
    }
    return result;
  };
  Reference3.prototype.setWithPriority = function(newVal, newPriority, onComplete) {
    validateArgCount("Reference.setWithPriority", 2, 3, arguments.length);
    validateCallback("Reference.setWithPriority", "onComplete", onComplete, true);
    var result = setWithPriority(this._delegate, newVal, newPriority);
    if (onComplete) {
      result.then(function() {
        return onComplete(null);
      }, function(error2) {
        return onComplete(error2);
      });
    }
    return result;
  };
  Reference3.prototype.remove = function(onComplete) {
    validateArgCount("Reference.remove", 0, 1, arguments.length);
    validateCallback("Reference.remove", "onComplete", onComplete, true);
    var result = remove(this._delegate);
    if (onComplete) {
      result.then(function() {
        return onComplete(null);
      }, function(error2) {
        return onComplete(error2);
      });
    }
    return result;
  };
  Reference3.prototype.transaction = function(transactionUpdate, onComplete, applyLocally) {
    var _this = this;
    validateArgCount("Reference.transaction", 1, 3, arguments.length);
    validateCallback("Reference.transaction", "transactionUpdate", transactionUpdate, false);
    validateCallback("Reference.transaction", "onComplete", onComplete, true);
    validateBoolean("Reference.transaction", "applyLocally", applyLocally, true);
    var result = runTransaction(this._delegate, transactionUpdate, {
      applyLocally
    }).then(function(transactionResult) {
      return new TransactionResult(transactionResult.committed, new DataSnapshot(_this.database, transactionResult.snapshot));
    });
    if (onComplete) {
      result.then(function(transactionResult) {
        return onComplete(null, transactionResult.committed, transactionResult.snapshot);
      }, function(error2) {
        return onComplete(error2, false, null);
      });
    }
    return result;
  };
  Reference3.prototype.setPriority = function(priority, onComplete) {
    validateArgCount("Reference.setPriority", 1, 2, arguments.length);
    validateCallback("Reference.setPriority", "onComplete", onComplete, true);
    var result = setPriority(this._delegate, priority);
    if (onComplete) {
      result.then(function() {
        return onComplete(null);
      }, function(error2) {
        return onComplete(error2);
      });
    }
    return result;
  };
  Reference3.prototype.push = function(value, onComplete) {
    var _this = this;
    validateArgCount("Reference.push", 0, 2, arguments.length);
    validateCallback("Reference.push", "onComplete", onComplete, true);
    var expPromise = push(this._delegate, value);
    var promise = expPromise.then(function(expRef) {
      return new Reference3(_this.database, expRef);
    });
    if (onComplete) {
      promise.then(function() {
        return onComplete(null);
      }, function(error2) {
        return onComplete(error2);
      });
    }
    var result = new Reference3(this.database, expPromise);
    result.then = promise.then.bind(promise);
    result.catch = promise.catch.bind(promise, void 0);
    return result;
  };
  Reference3.prototype.onDisconnect = function() {
    validateWritablePath("Reference.onDisconnect", this._delegate._path);
    return new OnDisconnect(new OnDisconnect$1(this._delegate._repo, this._delegate._path));
  };
  Object.defineProperty(Reference3.prototype, "key", {
    get: function() {
      return this.getKey();
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Reference3.prototype, "parent", {
    get: function() {
      return this.getParent();
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Reference3.prototype, "root", {
    get: function() {
      return this.getRoot();
    },
    enumerable: false,
    configurable: true
  });
  return Reference3;
}(Query);
var Database = function() {
  function Database2(_delegate, app) {
    var _this = this;
    this._delegate = _delegate;
    this.app = app;
    this.INTERNAL = {
      delete: function() {
        return _this._delegate._delete();
      }
    };
  }
  Database2.prototype.useEmulator = function(host, port, options) {
    if (options === void 0) {
      options = {};
    }
    connectDatabaseEmulator(this._delegate, host, port, options);
  };
  Database2.prototype.ref = function(path) {
    validateArgCount("database.ref", 0, 1, arguments.length);
    if (path instanceof Reference) {
      var childRef = refFromURL(this._delegate, path.toString());
      return new Reference(this, childRef);
    } else {
      var childRef = ref(this._delegate, path);
      return new Reference(this, childRef);
    }
  };
  Database2.prototype.refFromURL = function(url) {
    var apiName = "database.refFromURL";
    validateArgCount(apiName, 1, 1, arguments.length);
    var childRef = refFromURL(this._delegate, url);
    return new Reference(this, childRef);
  };
  Database2.prototype.goOffline = function() {
    validateArgCount("database.goOffline", 0, 0, arguments.length);
    return goOffline(this._delegate);
  };
  Database2.prototype.goOnline = function() {
    validateArgCount("database.goOnline", 0, 0, arguments.length);
    return goOnline(this._delegate);
  };
  Database2.ServerValue = {
    TIMESTAMP: serverTimestamp(),
    increment: function(delta) {
      return increment(delta);
    }
  };
  return Database2;
}();
var forceLongPolling = function() {
  WebSocketConnection.forceDisallow();
  BrowserPollConnection.forceAllow();
};
var forceWebSockets = function() {
  BrowserPollConnection.forceDisallow();
};
var isWebSocketsAvailable = function() {
  return WebSocketConnection["isAvailable"]();
};
var setSecurityDebugCallback = function(ref3, callback) {
  var connection = ref3._delegate._repo.persistentConnection_;
  connection.securityDebugCallback_ = callback;
};
var stats = function(ref3, showDelta) {
  repoStats(ref3._delegate._repo, showDelta);
};
var statsIncrementCounter = function(ref3, metric) {
  repoStatsIncrementCounter(ref3._delegate._repo, metric);
};
var dataUpdateCount = function(ref3) {
  return ref3._delegate._repo.dataUpdateCount;
};
var interceptServerData = function(ref3, callback) {
  return repoInterceptServerData(ref3._delegate._repo, callback);
};
function initStandalone(_a8) {
  var app = _a8.app, url = _a8.url, version10 = _a8.version, customAuthImpl = _a8.customAuthImpl, namespace = _a8.namespace, _b = _a8.nodeAdmin, nodeAdmin = _b === void 0 ? false : _b;
  setSDKVersion(version10);
  var authProvider = new Provider("auth-internal", new ComponentContainer("database-standalone"));
  authProvider.setComponent(new Component("auth-internal", function() {
    return customAuthImpl;
  }, "PRIVATE"));
  return {
    instance: new Database(repoManagerDatabaseFromApp(app, authProvider, void 0, url, nodeAdmin), app),
    namespace
  };
}
var INTERNAL = Object.freeze({
  __proto__: null,
  forceLongPolling,
  forceWebSockets,
  isWebSocketsAvailable,
  setSecurityDebugCallback,
  stats,
  statsIncrementCounter,
  dataUpdateCount,
  interceptServerData,
  initStandalone
});
var DataConnection = PersistentConnection;
PersistentConnection.prototype.simpleListen = function(pathString, onComplete) {
  this.sendRequest("q", { p: pathString }, onComplete);
};
PersistentConnection.prototype.echo = function(data, onEcho) {
  this.sendRequest("echo", { d: data }, onEcho);
};
var RealTimeConnection = Connection;
var hijackHash = function(newHash) {
  var oldPut = PersistentConnection.prototype.put;
  PersistentConnection.prototype.put = function(pathString, data, onComplete, hash) {
    if (hash !== void 0) {
      hash = newHash();
    }
    oldPut.call(this, pathString, data, onComplete, hash);
  };
  return function() {
    PersistentConnection.prototype.put = oldPut;
  };
};
var ConnectionTarget = RepoInfo;
var queryIdentifier = function(query2) {
  return query2._delegate._queryIdentifier;
};
var forceRestClient = function(forceRestClient2) {
  repoManagerForceRestClient(forceRestClient2);
};
var TEST_ACCESS = Object.freeze({
  __proto__: null,
  DataConnection,
  RealTimeConnection,
  hijackHash,
  ConnectionTarget,
  queryIdentifier,
  forceRestClient
});
var ServerValue = Database.ServerValue;
function registerDatabase(instance) {
  setSDKVersion(instance.SDK_VERSION);
  var namespace = instance.INTERNAL.registerComponent(new Component("database", function(container, _a8) {
    var url = _a8.instanceIdentifier;
    var app = container.getProvider("app").getImmediate();
    var authProvider = container.getProvider("auth-internal");
    var appCheckProvider = container.getProvider("app-check-internal");
    return new Database(repoManagerDatabaseFromApp(app, authProvider, appCheckProvider, url), app);
  }, "PUBLIC").setServiceProps({
    Reference,
    Query,
    Database,
    DataSnapshot,
    enableLogging,
    INTERNAL,
    ServerValue,
    TEST_ACCESS
  }).setMultipleInstances(true));
  instance.registerVersion(name, version);
  if (isNodeSdk()) {
    module.exports = namespace;
  }
}
registerDatabase(index_esm_default);

// node_modules/@firebase/webchannel-wrapper/dist/index.esm.js
var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p2 in b2)
      if (Object.prototype.hasOwnProperty.call(b2, p2))
        d2[p2] = b2[p2];
  };
  return extendStatics(d, b);
};
function __extends2(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __values2(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
var k;
var goog = goog || {};
var l = commonjsGlobal || self;
function aa() {
}
function ba(a) {
  var b = typeof a;
  b = b != "object" ? b : a ? Array.isArray(a) ? "array" : b : "null";
  return b == "array" || b == "object" && typeof a.length == "number";
}
function p(a) {
  var b = typeof a;
  return b == "object" && a != null || b == "function";
}
function da(a) {
  return Object.prototype.hasOwnProperty.call(a, ea) && a[ea] || (a[ea] = ++fa);
}
var ea = "closure_uid_" + (1e9 * Math.random() >>> 0);
var fa = 0;
function ha(a, b, c) {
  return a.call.apply(a.bind, arguments);
}
function ia(a, b, c) {
  if (!a)
    throw Error();
  if (2 < arguments.length) {
    var d = Array.prototype.slice.call(arguments, 2);
    return function() {
      var e = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(e, d);
      return a.apply(b, e);
    };
  }
  return function() {
    return a.apply(b, arguments);
  };
}
function q(a, b, c) {
  Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1 ? q = ha : q = ia;
  return q.apply(null, arguments);
}
function ja(a, b) {
  var c = Array.prototype.slice.call(arguments, 1);
  return function() {
    var d = c.slice();
    d.push.apply(d, arguments);
    return a.apply(this, d);
  };
}
function t(a, b) {
  function c() {
  }
  c.prototype = b.prototype;
  a.Z = b.prototype;
  a.prototype = new c();
  a.prototype.constructor = a;
  a.Vb = function(d, e, f) {
    for (var h = Array(arguments.length - 2), n = 2; n < arguments.length; n++)
      h[n - 2] = arguments[n];
    return b.prototype[e].apply(d, h);
  };
}
function v() {
  this.s = this.s;
  this.o = this.o;
}
var ka = 0;
var la = {};
v.prototype.s = false;
v.prototype.na = function() {
  if (!this.s && (this.s = true, this.M(), ka != 0)) {
    var a = da(this);
    delete la[a];
  }
};
v.prototype.M = function() {
  if (this.o)
    for (; this.o.length; )
      this.o.shift()();
};
var ma = Array.prototype.indexOf ? function(a, b) {
  return Array.prototype.indexOf.call(a, b, void 0);
} : function(a, b) {
  if (typeof a === "string")
    return typeof b !== "string" || b.length != 1 ? -1 : a.indexOf(b, 0);
  for (var c = 0; c < a.length; c++)
    if (c in a && a[c] === b)
      return c;
  return -1;
};
var na = Array.prototype.forEach ? function(a, b, c) {
  Array.prototype.forEach.call(a, b, c);
} : function(a, b, c) {
  var d = a.length, e = typeof a === "string" ? a.split("") : a;
  for (var f = 0; f < d; f++)
    f in e && b.call(c, e[f], f, a);
};
function oa(a) {
  a: {
    var b = pa;
    var c = a.length, d = typeof a === "string" ? a.split("") : a;
    for (var e = 0; e < c; e++)
      if (e in d && b.call(void 0, d[e], e, a)) {
        b = e;
        break a;
      }
    b = -1;
  }
  return 0 > b ? null : typeof a === "string" ? a.charAt(b) : a[b];
}
function qa(a) {
  return Array.prototype.concat.apply([], arguments);
}
function ra(a) {
  var b = a.length;
  if (0 < b) {
    var c = Array(b);
    for (var d = 0; d < b; d++)
      c[d] = a[d];
    return c;
  }
  return [];
}
function sa(a) {
  return /^[\s\xa0]*$/.test(a);
}
var ta = String.prototype.trim ? function(a) {
  return a.trim();
} : function(a) {
  return /^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1];
};
function w(a, b) {
  return a.indexOf(b) != -1;
}
function ua(a, b) {
  return a < b ? -1 : a > b ? 1 : 0;
}
var x;
a: {
  va2 = l.navigator;
  if (va2) {
    wa2 = va2.userAgent;
    if (wa2) {
      x = wa2;
      break a;
    }
  }
  x = "";
}
var va2;
var wa2;
function xa(a, b, c) {
  for (var d in a)
    b.call(c, a[d], d, a);
}
function ya(a) {
  var b = {};
  for (var c in a)
    b[c] = a[c];
  return b;
}
var za = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
function Aa(a, b) {
  var c, d;
  for (var e = 1; e < arguments.length; e++) {
    d = arguments[e];
    for (c in d)
      a[c] = d[c];
    for (var f = 0; f < za.length; f++)
      c = za[f], Object.prototype.hasOwnProperty.call(d, c) && (a[c] = d[c]);
  }
}
function Ca(a) {
  Ca[" "](a);
  return a;
}
Ca[" "] = aa;
function Fa(a) {
  var b = Ga;
  return Object.prototype.hasOwnProperty.call(b, 9) ? b[9] : b[9] = a(9);
}
var Ha = w(x, "Opera");
var y = w(x, "Trident") || w(x, "MSIE");
var Ia = w(x, "Edge");
var Ja = Ia || y;
var Ka = w(x, "Gecko") && !(w(x.toLowerCase(), "webkit") && !w(x, "Edge")) && !(w(x, "Trident") || w(x, "MSIE")) && !w(x, "Edge");
var La = w(x.toLowerCase(), "webkit") && !w(x, "Edge");
function Ma() {
  var a = l.document;
  return a ? a.documentMode : void 0;
}
var Na;
a: {
  Oa2 = "", Pa2 = function() {
    var a = x;
    if (Ka)
      return /rv:([^\);]+)(\)|;)/.exec(a);
    if (Ia)
      return /Edge\/([\d\.]+)/.exec(a);
    if (y)
      return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);
    if (La)
      return /WebKit\/(\S+)/.exec(a);
    if (Ha)
      return /(?:Version)[ \/]?(\S+)/.exec(a);
  }();
  Pa2 && (Oa2 = Pa2 ? Pa2[1] : "");
  if (y) {
    Qa2 = Ma();
    if (Qa2 != null && Qa2 > parseFloat(Oa2)) {
      Na = String(Qa2);
      break a;
    }
  }
  Na = Oa2;
}
var Oa2;
var Pa2;
var Qa2;
var Ga = {};
function Ra() {
  return Fa(function() {
    var a = 0;
    var b = ta(String(Na)).split("."), c = ta("9").split("."), d = Math.max(b.length, c.length);
    for (var h = 0; a == 0 && h < d; h++) {
      var e = b[h] || "", f = c[h] || "";
      do {
        e = /(\d*)(\D*)(.*)/.exec(e) || ["", "", "", ""];
        f = /(\d*)(\D*)(.*)/.exec(f) || ["", "", "", ""];
        if (e[0].length == 0 && f[0].length == 0)
          break;
        a = ua(e[1].length == 0 ? 0 : parseInt(e[1], 10), f[1].length == 0 ? 0 : parseInt(f[1], 10)) || ua(e[2].length == 0, f[2].length == 0) || ua(e[2], f[2]);
        e = e[3];
        f = f[3];
      } while (a == 0);
    }
    return 0 <= a;
  });
}
var Sa;
if (l.document && y) {
  Ta2 = Ma();
  Sa = Ta2 ? Ta2 : parseInt(Na, 10) || void 0;
} else
  Sa = void 0;
var Ta2;
var Ua = Sa;
var Va = function() {
  if (!l.addEventListener || !Object.defineProperty)
    return false;
  var a = false, b = Object.defineProperty({}, "passive", { get: function() {
    a = true;
  } });
  try {
    l.addEventListener("test", aa, b), l.removeEventListener("test", aa, b);
  } catch (c) {
  }
  return a;
}();
function z(a, b) {
  this.type = a;
  this.g = this.target = b;
  this.defaultPrevented = false;
}
z.prototype.h = function() {
  this.defaultPrevented = true;
};
function A(a, b) {
  z.call(this, a ? a.type : "");
  this.relatedTarget = this.g = this.target = null;
  this.button = this.screenY = this.screenX = this.clientY = this.clientX = 0;
  this.key = "";
  this.metaKey = this.shiftKey = this.altKey = this.ctrlKey = false;
  this.state = null;
  this.pointerId = 0;
  this.pointerType = "";
  this.i = null;
  if (a) {
    var c = this.type = a.type, d = a.changedTouches && a.changedTouches.length ? a.changedTouches[0] : null;
    this.target = a.target || a.srcElement;
    this.g = b;
    if (b = a.relatedTarget) {
      if (Ka) {
        a: {
          try {
            Ca(b.nodeName);
            var e = true;
            break a;
          } catch (f) {
          }
          e = false;
        }
        e || (b = null);
      }
    } else
      c == "mouseover" ? b = a.fromElement : c == "mouseout" && (b = a.toElement);
    this.relatedTarget = b;
    d ? (this.clientX = d.clientX !== void 0 ? d.clientX : d.pageX, this.clientY = d.clientY !== void 0 ? d.clientY : d.pageY, this.screenX = d.screenX || 0, this.screenY = d.screenY || 0) : (this.clientX = a.clientX !== void 0 ? a.clientX : a.pageX, this.clientY = a.clientY !== void 0 ? a.clientY : a.pageY, this.screenX = a.screenX || 0, this.screenY = a.screenY || 0);
    this.button = a.button;
    this.key = a.key || "";
    this.ctrlKey = a.ctrlKey;
    this.altKey = a.altKey;
    this.shiftKey = a.shiftKey;
    this.metaKey = a.metaKey;
    this.pointerId = a.pointerId || 0;
    this.pointerType = typeof a.pointerType === "string" ? a.pointerType : Wa[a.pointerType] || "";
    this.state = a.state;
    this.i = a;
    a.defaultPrevented && A.Z.h.call(this);
  }
}
t(A, z);
var Wa = { 2: "touch", 3: "pen", 4: "mouse" };
A.prototype.h = function() {
  A.Z.h.call(this);
  var a = this.i;
  a.preventDefault ? a.preventDefault() : a.returnValue = false;
};
var B = "closure_listenable_" + (1e6 * Math.random() | 0);
var Xa = 0;
function Ya(a, b, c, d, e) {
  this.listener = a;
  this.proxy = null;
  this.src = b;
  this.type = c;
  this.capture = !!d;
  this.ia = e;
  this.key = ++Xa;
  this.ca = this.fa = false;
}
function Za(a) {
  a.ca = true;
  a.listener = null;
  a.proxy = null;
  a.src = null;
  a.ia = null;
}
function $a(a) {
  this.src = a;
  this.g = {};
  this.h = 0;
}
$a.prototype.add = function(a, b, c, d, e) {
  var f = a.toString();
  a = this.g[f];
  a || (a = this.g[f] = [], this.h++);
  var h = ab(a, b, d, e);
  -1 < h ? (b = a[h], c || (b.fa = false)) : (b = new Ya(b, this.src, f, !!d, e), b.fa = c, a.push(b));
  return b;
};
function bb(a, b) {
  var c = b.type;
  if (c in a.g) {
    var d = a.g[c], e = ma(d, b), f;
    (f = 0 <= e) && Array.prototype.splice.call(d, e, 1);
    f && (Za(b), a.g[c].length == 0 && (delete a.g[c], a.h--));
  }
}
function ab(a, b, c, d) {
  for (var e = 0; e < a.length; ++e) {
    var f = a[e];
    if (!f.ca && f.listener == b && f.capture == !!c && f.ia == d)
      return e;
  }
  return -1;
}
var cb = "closure_lm_" + (1e6 * Math.random() | 0);
var db = {};
function fb(a, b, c, d, e) {
  if (d && d.once)
    return gb(a, b, c, d, e);
  if (Array.isArray(b)) {
    for (var f = 0; f < b.length; f++)
      fb(a, b[f], c, d, e);
    return null;
  }
  c = hb(c);
  return a && a[B] ? a.N(b, c, p(d) ? !!d.capture : !!d, e) : ib(a, b, c, false, d, e);
}
function ib(a, b, c, d, e, f) {
  if (!b)
    throw Error("Invalid event type");
  var h = p(e) ? !!e.capture : !!e, n = jb(a);
  n || (a[cb] = n = new $a(a));
  c = n.add(b, c, d, h, f);
  if (c.proxy)
    return c;
  d = kb();
  c.proxy = d;
  d.src = a;
  d.listener = c;
  if (a.addEventListener)
    Va || (e = h), e === void 0 && (e = false), a.addEventListener(b.toString(), d, e);
  else if (a.attachEvent)
    a.attachEvent(lb(b.toString()), d);
  else if (a.addListener && a.removeListener)
    a.addListener(d);
  else
    throw Error("addEventListener and attachEvent are unavailable.");
  return c;
}
function kb() {
  function a(c) {
    return b.call(a.src, a.listener, c);
  }
  var b = mb;
  return a;
}
function gb(a, b, c, d, e) {
  if (Array.isArray(b)) {
    for (var f = 0; f < b.length; f++)
      gb(a, b[f], c, d, e);
    return null;
  }
  c = hb(c);
  return a && a[B] ? a.O(b, c, p(d) ? !!d.capture : !!d, e) : ib(a, b, c, true, d, e);
}
function nb(a, b, c, d, e) {
  if (Array.isArray(b))
    for (var f = 0; f < b.length; f++)
      nb(a, b[f], c, d, e);
  else
    (d = p(d) ? !!d.capture : !!d, c = hb(c), a && a[B]) ? (a = a.i, b = String(b).toString(), b in a.g && (f = a.g[b], c = ab(f, c, d, e), -1 < c && (Za(f[c]), Array.prototype.splice.call(f, c, 1), f.length == 0 && (delete a.g[b], a.h--)))) : a && (a = jb(a)) && (b = a.g[b.toString()], a = -1, b && (a = ab(b, c, d, e)), (c = -1 < a ? b[a] : null) && ob(c));
}
function ob(a) {
  if (typeof a !== "number" && a && !a.ca) {
    var b = a.src;
    if (b && b[B])
      bb(b.i, a);
    else {
      var c = a.type, d = a.proxy;
      b.removeEventListener ? b.removeEventListener(c, d, a.capture) : b.detachEvent ? b.detachEvent(lb(c), d) : b.addListener && b.removeListener && b.removeListener(d);
      (c = jb(b)) ? (bb(c, a), c.h == 0 && (c.src = null, b[cb] = null)) : Za(a);
    }
  }
}
function lb(a) {
  return a in db ? db[a] : db[a] = "on" + a;
}
function mb(a, b) {
  if (a.ca)
    a = true;
  else {
    b = new A(b, this);
    var c = a.listener, d = a.ia || a.src;
    a.fa && ob(a);
    a = c.call(d, b);
  }
  return a;
}
function jb(a) {
  a = a[cb];
  return a instanceof $a ? a : null;
}
var pb = "__closure_events_fn_" + (1e9 * Math.random() >>> 0);
function hb(a) {
  if (typeof a === "function")
    return a;
  a[pb] || (a[pb] = function(b) {
    return a.handleEvent(b);
  });
  return a[pb];
}
function C() {
  v.call(this);
  this.i = new $a(this);
  this.P = this;
  this.I = null;
}
t(C, v);
C.prototype[B] = true;
C.prototype.removeEventListener = function(a, b, c, d) {
  nb(this, a, b, c, d);
};
function D(a, b) {
  var c, d = a.I;
  if (d)
    for (c = []; d; d = d.I)
      c.push(d);
  a = a.P;
  d = b.type || b;
  if (typeof b === "string")
    b = new z(b, a);
  else if (b instanceof z)
    b.target = b.target || a;
  else {
    var e = b;
    b = new z(d, a);
    Aa(b, e);
  }
  e = true;
  if (c)
    for (var f = c.length - 1; 0 <= f; f--) {
      var h = b.g = c[f];
      e = qb(h, d, true, b) && e;
    }
  h = b.g = a;
  e = qb(h, d, true, b) && e;
  e = qb(h, d, false, b) && e;
  if (c)
    for (f = 0; f < c.length; f++)
      h = b.g = c[f], e = qb(h, d, false, b) && e;
}
C.prototype.M = function() {
  C.Z.M.call(this);
  if (this.i) {
    var a = this.i, c;
    for (c in a.g) {
      for (var d = a.g[c], e = 0; e < d.length; e++)
        Za(d[e]);
      delete a.g[c];
      a.h--;
    }
  }
  this.I = null;
};
C.prototype.N = function(a, b, c, d) {
  return this.i.add(String(a), b, false, c, d);
};
C.prototype.O = function(a, b, c, d) {
  return this.i.add(String(a), b, true, c, d);
};
function qb(a, b, c, d) {
  b = a.i.g[String(b)];
  if (!b)
    return true;
  b = b.concat();
  for (var e = true, f = 0; f < b.length; ++f) {
    var h = b[f];
    if (h && !h.ca && h.capture == c) {
      var n = h.listener, u = h.ia || h.src;
      h.fa && bb(a.i, h);
      e = n.call(u, d) !== false && e;
    }
  }
  return e && !d.defaultPrevented;
}
var rb = l.JSON.stringify;
function sb() {
  var a = tb;
  var b = null;
  a.g && (b = a.g, a.g = a.g.next, a.g || (a.h = null), b.next = null);
  return b;
}
var ub = function() {
  function ub2() {
    this.h = this.g = null;
  }
  ub2.prototype.add = function(a, b) {
    var c = vb.get();
    c.set(a, b);
    this.h ? this.h.next = c : this.g = c;
    this.h = c;
  };
  return ub2;
}();
var vb = new (function() {
  function class_2(a, b) {
    this.i = a;
    this.j = b;
    this.h = 0;
    this.g = null;
  }
  class_2.prototype.get = function() {
    var a;
    0 < this.h ? (this.h--, a = this.g, this.g = a.next, a.next = null) : a = this.i();
    return a;
  };
  return class_2;
}())(function() {
  return new wb();
}, function(a) {
  return a.reset();
});
var wb = function() {
  function wb2() {
    this.next = this.g = this.h = null;
  }
  wb2.prototype.set = function(a, b) {
    this.h = a;
    this.g = b;
    this.next = null;
  };
  wb2.prototype.reset = function() {
    this.next = this.g = this.h = null;
  };
  return wb2;
}();
function yb(a) {
  l.setTimeout(function() {
    throw a;
  }, 0);
}
function zb(a, b) {
  Ab || Bb();
  Cb || (Ab(), Cb = true);
  tb.add(a, b);
}
var Ab;
function Bb() {
  var a = l.Promise.resolve(void 0);
  Ab = function() {
    a.then(Db);
  };
}
var Cb = false;
var tb = new ub();
function Db() {
  for (var a; a = sb(); ) {
    try {
      a.h.call(a.g);
    } catch (c) {
      yb(c);
    }
    var b = vb;
    b.j(a);
    100 > b.h && (b.h++, a.next = b.g, b.g = a);
  }
  Cb = false;
}
function Eb(a, b) {
  C.call(this);
  this.h = a || 1;
  this.g = b || l;
  this.j = q(this.kb, this);
  this.l = Date.now();
}
t(Eb, C);
k = Eb.prototype;
k.da = false;
k.S = null;
k.kb = function() {
  if (this.da) {
    var a = Date.now() - this.l;
    0 < a && a < 0.8 * this.h ? this.S = this.g.setTimeout(this.j, this.h - a) : (this.S && (this.g.clearTimeout(this.S), this.S = null), D(this, "tick"), this.da && (Fb(this), this.start()));
  }
};
k.start = function() {
  this.da = true;
  this.S || (this.S = this.g.setTimeout(this.j, this.h), this.l = Date.now());
};
function Fb(a) {
  a.da = false;
  a.S && (a.g.clearTimeout(a.S), a.S = null);
}
k.M = function() {
  Eb.Z.M.call(this);
  Fb(this);
  delete this.g;
};
function Gb(a, b, c) {
  if (typeof a === "function")
    c && (a = q(a, c));
  else if (a && typeof a.handleEvent == "function")
    a = q(a.handleEvent, a);
  else
    throw Error("Invalid listener argument");
  return 2147483647 < Number(b) ? -1 : l.setTimeout(a, b || 0);
}
function Hb(a) {
  a.g = Gb(function() {
    a.g = null;
    a.i && (a.i = false, Hb(a));
  }, a.j);
  var b = a.h;
  a.h = null;
  a.m.apply(null, b);
}
var Ib = function(_super) {
  __extends2(Ib2, _super);
  function Ib2(a, b) {
    var _this = _super.call(this) || this;
    _this.m = a;
    _this.j = b;
    _this.h = null;
    _this.i = false;
    _this.g = null;
    return _this;
  }
  Ib2.prototype.l = function(a) {
    this.h = arguments;
    this.g ? this.i = true : Hb(this);
  };
  Ib2.prototype.M = function() {
    _super.prototype.M.call(this);
    this.g && (l.clearTimeout(this.g), this.g = null, this.i = false, this.h = null);
  };
  return Ib2;
}(v);
function E(a) {
  v.call(this);
  this.h = a;
  this.g = {};
}
t(E, v);
var Jb = [];
function Kb(a, b, c, d) {
  Array.isArray(c) || (c && (Jb[0] = c.toString()), c = Jb);
  for (var e = 0; e < c.length; e++) {
    var f = fb(b, c[e], d || a.handleEvent, false, a.h || a);
    if (!f)
      break;
    a.g[f.key] = f;
  }
}
function Lb(a) {
  xa(a.g, function(b, c) {
    this.g.hasOwnProperty(c) && ob(b);
  }, a);
  a.g = {};
}
E.prototype.M = function() {
  E.Z.M.call(this);
  Lb(this);
};
E.prototype.handleEvent = function() {
  throw Error("EventHandler.handleEvent not implemented");
};
function Mb() {
  this.g = true;
}
Mb.prototype.Aa = function() {
  this.g = false;
};
function Nb(a, b, c, d, e, f) {
  a.info(function() {
    if (a.g)
      if (f) {
        var h = "";
        for (var n = f.split("&"), u = 0; u < n.length; u++) {
          var m = n[u].split("=");
          if (1 < m.length) {
            var r = m[0];
            m = m[1];
            var G2 = r.split("_");
            h = 2 <= G2.length && G2[1] == "type" ? h + (r + "=" + m + "&") : h + (r + "=redacted&");
          }
        }
      } else
        h = null;
    else
      h = f;
    return "XMLHTTP REQ (" + d + ") [attempt " + e + "]: " + b + "\n" + c + "\n" + h;
  });
}
function Ob(a, b, c, d, e, f, h) {
  a.info(function() {
    return "XMLHTTP RESP (" + d + ") [ attempt " + e + "]: " + b + "\n" + c + "\n" + f + " " + h;
  });
}
function F(a, b, c, d) {
  a.info(function() {
    return "XMLHTTP TEXT (" + b + "): " + Pb(a, c) + (d ? " " + d : "");
  });
}
function Qb(a, b) {
  a.info(function() {
    return "TIMEOUT: " + b;
  });
}
Mb.prototype.info = function() {
};
function Pb(a, b) {
  if (!a.g)
    return b;
  if (!b)
    return null;
  try {
    var c = JSON.parse(b);
    if (c) {
      for (a = 0; a < c.length; a++)
        if (Array.isArray(c[a])) {
          var d = c[a];
          if (!(2 > d.length)) {
            var e = d[1];
            if (Array.isArray(e) && !(1 > e.length)) {
              var f = e[0];
              if (f != "noop" && f != "stop" && f != "close")
                for (var h = 1; h < e.length; h++)
                  e[h] = "";
            }
          }
        }
    }
    return rb(c);
  } catch (n) {
    return b;
  }
}
var H = {};
var Rb = null;
function Sb() {
  return Rb = Rb || new C();
}
H.Ma = "serverreachability";
function Tb(a) {
  z.call(this, H.Ma, a);
}
t(Tb, z);
function I(a) {
  var b = Sb();
  D(b, new Tb(b, a));
}
H.STAT_EVENT = "statevent";
function Ub(a, b) {
  z.call(this, H.STAT_EVENT, a);
  this.stat = b;
}
t(Ub, z);
function J(a) {
  var b = Sb();
  D(b, new Ub(b, a));
}
H.Na = "timingevent";
function Vb(a, b) {
  z.call(this, H.Na, a);
  this.size = b;
}
t(Vb, z);
function K(a, b) {
  if (typeof a !== "function")
    throw Error("Fn must not be null and must be a function");
  return l.setTimeout(function() {
    a();
  }, b);
}
var Wb = { NO_ERROR: 0, lb: 1, yb: 2, xb: 3, sb: 4, wb: 5, zb: 6, Ja: 7, TIMEOUT: 8, Cb: 9 };
var Xb = { qb: "complete", Mb: "success", Ka: "error", Ja: "abort", Eb: "ready", Fb: "readystatechange", TIMEOUT: "timeout", Ab: "incrementaldata", Db: "progress", tb: "downloadprogress", Ub: "uploadprogress" };
function Yb() {
}
Yb.prototype.h = null;
function Zb(a) {
  return a.h || (a.h = a.i());
}
function $b() {
}
var L = { OPEN: "a", pb: "b", Ka: "c", Bb: "d" };
function ac() {
  z.call(this, "d");
}
t(ac, z);
function bc() {
  z.call(this, "c");
}
t(bc, z);
var cc;
function dc() {
}
t(dc, Yb);
dc.prototype.g = function() {
  return new XMLHttpRequest();
};
dc.prototype.i = function() {
  return {};
};
cc = new dc();
function M(a, b, c, d) {
  this.l = a;
  this.j = b;
  this.m = c;
  this.X = d || 1;
  this.V = new E(this);
  this.P = ec;
  a = Ja ? 125 : void 0;
  this.W = new Eb(a);
  this.H = null;
  this.i = false;
  this.s = this.A = this.v = this.K = this.F = this.Y = this.B = null;
  this.D = [];
  this.g = null;
  this.C = 0;
  this.o = this.u = null;
  this.N = -1;
  this.I = false;
  this.O = 0;
  this.L = null;
  this.aa = this.J = this.$ = this.U = false;
  this.h = new fc();
}
function fc() {
  this.i = null;
  this.g = "";
  this.h = false;
}
var ec = 45e3;
var gc = {};
var hc = {};
k = M.prototype;
k.setTimeout = function(a) {
  this.P = a;
};
function ic(a, b, c) {
  a.K = 1;
  a.v = jc(N(b));
  a.s = c;
  a.U = true;
  kc(a, null);
}
function kc(a, b) {
  a.F = Date.now();
  lc(a);
  a.A = N(a.v);
  var c = a.A, d = a.X;
  Array.isArray(d) || (d = [String(d)]);
  mc(c.h, "t", d);
  a.C = 0;
  c = a.l.H;
  a.h = new fc();
  a.g = nc(a.l, c ? b : null, !a.s);
  0 < a.O && (a.L = new Ib(q(a.Ia, a, a.g), a.O));
  Kb(a.V, a.g, "readystatechange", a.gb);
  b = a.H ? ya(a.H) : {};
  a.s ? (a.u || (a.u = "POST"), b["Content-Type"] = "application/x-www-form-urlencoded", a.g.ea(a.A, a.u, a.s, b)) : (a.u = "GET", a.g.ea(a.A, a.u, null, b));
  I(1);
  Nb(a.j, a.u, a.A, a.m, a.X, a.s);
}
k.gb = function(a) {
  a = a.target;
  var b = this.L;
  b && O(a) == 3 ? b.l() : this.Ia(a);
};
k.Ia = function(a) {
  try {
    if (a == this.g)
      a: {
        var r = O(this.g);
        var b = this.g.Da();
        var G2 = this.g.ba();
        if (!(3 > r) && (r != 3 || Ja || this.g && (this.h.h || this.g.ga() || oc(this.g)))) {
          this.I || r != 4 || b == 7 || (b == 8 || 0 >= G2 ? I(3) : I(2));
          pc(this);
          var c = this.g.ba();
          this.N = c;
          b:
            if (qc(this)) {
              var d = oc(this.g);
              a = "";
              var e = d.length, f = O(this.g) == 4;
              if (!this.h.i) {
                if (typeof TextDecoder === "undefined") {
                  P(this);
                  rc(this);
                  var h = "";
                  break b;
                }
                this.h.i = new l.TextDecoder();
              }
              for (b = 0; b < e; b++)
                this.h.h = true, a += this.h.i.decode(d[b], { stream: f && b == e - 1 });
              d.splice(0, e);
              this.h.g += a;
              this.C = 0;
              h = this.h.g;
            } else
              h = this.g.ga();
          this.i = c == 200;
          Ob(this.j, this.u, this.A, this.m, this.X, r, c);
          if (this.i) {
            if (this.$ && !this.J) {
              b: {
                if (this.g) {
                  var n, u = this.g;
                  if ((n = u.g ? u.g.getResponseHeader("X-HTTP-Initial-Response") : null) && !sa(n)) {
                    var m = n;
                    break b;
                  }
                }
                m = null;
              }
              if (c = m)
                F(this.j, this.m, c, "Initial handshake response via X-HTTP-Initial-Response"), this.J = true, sc(this, c);
              else {
                this.i = false;
                this.o = 3;
                J(12);
                P(this);
                rc(this);
                break a;
              }
            }
            this.U ? (tc(this, r, h), Ja && this.i && r == 3 && (Kb(this.V, this.W, "tick", this.fb), this.W.start())) : (F(this.j, this.m, h, null), sc(this, h));
            r == 4 && P(this);
            this.i && !this.I && (r == 4 ? uc(this.l, this) : (this.i = false, lc(this)));
          } else
            c == 400 && 0 < h.indexOf("Unknown SID") ? (this.o = 3, J(12)) : (this.o = 0, J(13)), P(this), rc(this);
        }
      }
  } catch (r2) {
  } finally {
  }
};
function qc(a) {
  return a.g ? a.u == "GET" && a.K != 2 && a.l.Ba : false;
}
function tc(a, b, c) {
  var d = true, e;
  for (; !a.I && a.C < c.length; )
    if (e = vc(a, c), e == hc) {
      b == 4 && (a.o = 4, J(14), d = false);
      F(a.j, a.m, null, "[Incomplete Response]");
      break;
    } else if (e == gc) {
      a.o = 4;
      J(15);
      F(a.j, a.m, c, "[Invalid Chunk]");
      d = false;
      break;
    } else
      F(a.j, a.m, e, null), sc(a, e);
  qc(a) && e != hc && e != gc && (a.h.g = "", a.C = 0);
  b != 4 || c.length != 0 || a.h.h || (a.o = 1, J(16), d = false);
  a.i = a.i && d;
  d ? 0 < c.length && !a.aa && (a.aa = true, b = a.l, b.g == a && b.$ && !b.L && (b.h.info("Great, no buffering proxy detected. Bytes received: " + c.length), wc(b), b.L = true, J(11))) : (F(a.j, a.m, c, "[Invalid Chunked Response]"), P(a), rc(a));
}
k.fb = function() {
  if (this.g) {
    var a = O(this.g), b = this.g.ga();
    this.C < b.length && (pc(this), tc(this, a, b), this.i && a != 4 && lc(this));
  }
};
function vc(a, b) {
  var c = a.C, d = b.indexOf("\n", c);
  if (d == -1)
    return hc;
  c = Number(b.substring(c, d));
  if (isNaN(c))
    return gc;
  d += 1;
  if (d + c > b.length)
    return hc;
  b = b.substr(d, c);
  a.C = d + c;
  return b;
}
k.cancel = function() {
  this.I = true;
  P(this);
};
function lc(a) {
  a.Y = Date.now() + a.P;
  xc(a, a.P);
}
function xc(a, b) {
  if (a.B != null)
    throw Error("WatchDog timer not null");
  a.B = K(q(a.eb, a), b);
}
function pc(a) {
  a.B && (l.clearTimeout(a.B), a.B = null);
}
k.eb = function() {
  this.B = null;
  var a = Date.now();
  0 <= a - this.Y ? (Qb(this.j, this.A), this.K != 2 && (I(3), J(17)), P(this), this.o = 2, rc(this)) : xc(this, this.Y - a);
};
function rc(a) {
  a.l.G == 0 || a.I || uc(a.l, a);
}
function P(a) {
  pc(a);
  var b = a.L;
  b && typeof b.na == "function" && b.na();
  a.L = null;
  Fb(a.W);
  Lb(a.V);
  a.g && (b = a.g, a.g = null, b.abort(), b.na());
}
function sc(a, b) {
  try {
    var c = a.l;
    if (c.G != 0 && (c.g == a || yc(c.i, a))) {
      if (c.I = a.N, !a.J && yc(c.i, a) && c.G == 3) {
        try {
          var d = c.Ca.g.parse(b);
        } catch (m2) {
          d = null;
        }
        if (Array.isArray(d) && d.length == 3) {
          var e = d;
          if (e[0] == 0)
            a: {
              if (!c.u) {
                if (c.g)
                  if (c.g.F + 3e3 < a.F)
                    zc(c), Ac(c);
                  else
                    break a;
                Bc(c);
                J(18);
              }
            }
          else
            c.ta = e[1], 0 < c.ta - c.U && 37500 > e[2] && c.N && c.A == 0 && !c.v && (c.v = K(q(c.ab, c), 6e3));
          if (1 >= Cc(c.i) && c.ka) {
            try {
              c.ka();
            } catch (m2) {
            }
            c.ka = void 0;
          }
        } else
          Q(c, 11);
      } else if ((a.J || c.g == a) && zc(c), !sa(b))
        for (e = c.Ca.g.parse(b), b = 0; b < e.length; b++) {
          var m = e[b];
          c.U = m[0];
          m = m[1];
          if (c.G == 2)
            if (m[0] == "c") {
              c.J = m[1];
              c.la = m[2];
              var r = m[3];
              r != null && (c.ma = r, c.h.info("VER=" + c.ma));
              var G2 = m[4];
              G2 != null && (c.za = G2, c.h.info("SVER=" + c.za));
              var Da2 = m[5];
              Da2 != null && typeof Da2 === "number" && 0 < Da2 && (d = 1.5 * Da2, c.K = d, c.h.info("backChannelRequestTimeoutMs_=" + d));
              d = c;
              var ca2 = a.g;
              if (ca2) {
                var Ea2 = ca2.g ? ca2.g.getResponseHeader("X-Client-Wire-Protocol") : null;
                if (Ea2) {
                  var f = d.i;
                  !f.g && (w(Ea2, "spdy") || w(Ea2, "quic") || w(Ea2, "h2")) && (f.j = f.l, f.g = new Set(), f.h && (Dc(f, f.h), f.h = null));
                }
                if (d.D) {
                  var xb = ca2.g ? ca2.g.getResponseHeader("X-HTTP-Session-Id") : null;
                  xb && (d.sa = xb, R(d.F, d.D, xb));
                }
              }
              c.G = 3;
              c.j && c.j.xa();
              c.$ && (c.O = Date.now() - a.F, c.h.info("Handshake RTT: " + c.O + "ms"));
              d = c;
              var h = a;
              d.oa = Ec(d, d.H ? d.la : null, d.W);
              if (h.J) {
                Fc(d.i, h);
                var n = h, u = d.K;
                u && n.setTimeout(u);
                n.B && (pc(n), lc(n));
                d.g = h;
              } else
                Gc(d);
              0 < c.l.length && Hc(c);
            } else
              m[0] != "stop" && m[0] != "close" || Q(c, 7);
          else
            c.G == 3 && (m[0] == "stop" || m[0] == "close" ? m[0] == "stop" ? Q(c, 7) : Ic(c) : m[0] != "noop" && c.j && c.j.wa(m), c.A = 0);
        }
    }
    I(4);
  } catch (m2) {
  }
}
function Jc(a) {
  if (a.R && typeof a.R == "function")
    return a.R();
  if (typeof a === "string")
    return a.split("");
  if (ba(a)) {
    for (var b = [], c = a.length, d = 0; d < c; d++)
      b.push(a[d]);
    return b;
  }
  b = [];
  c = 0;
  for (d in a)
    b[c++] = a[d];
  return b;
}
function Kc(a, b) {
  if (a.forEach && typeof a.forEach == "function")
    a.forEach(b, void 0);
  else if (ba(a) || typeof a === "string")
    na(a, b, void 0);
  else {
    if (a.T && typeof a.T == "function")
      var c = a.T();
    else if (a.R && typeof a.R == "function")
      c = void 0;
    else if (ba(a) || typeof a === "string") {
      c = [];
      for (var d = a.length, e = 0; e < d; e++)
        c.push(e);
    } else
      for (e in c = [], d = 0, a)
        c[d++] = e;
    d = Jc(a);
    e = d.length;
    for (var f = 0; f < e; f++)
      b.call(void 0, d[f], c && c[f], a);
  }
}
function S(a, b) {
  this.h = {};
  this.g = [];
  this.i = 0;
  var c = arguments.length;
  if (1 < c) {
    if (c % 2)
      throw Error("Uneven number of arguments");
    for (var d = 0; d < c; d += 2)
      this.set(arguments[d], arguments[d + 1]);
  } else if (a)
    if (a instanceof S)
      for (c = a.T(), d = 0; d < c.length; d++)
        this.set(c[d], a.get(c[d]));
    else
      for (d in a)
        this.set(d, a[d]);
}
k = S.prototype;
k.R = function() {
  Lc(this);
  for (var a = [], b = 0; b < this.g.length; b++)
    a.push(this.h[this.g[b]]);
  return a;
};
k.T = function() {
  Lc(this);
  return this.g.concat();
};
function Lc(a) {
  if (a.i != a.g.length) {
    for (var b = 0, c = 0; b < a.g.length; ) {
      var d = a.g[b];
      T(a.h, d) && (a.g[c++] = d);
      b++;
    }
    a.g.length = c;
  }
  if (a.i != a.g.length) {
    var e = {};
    for (c = b = 0; b < a.g.length; )
      d = a.g[b], T(e, d) || (a.g[c++] = d, e[d] = 1), b++;
    a.g.length = c;
  }
}
k.get = function(a, b) {
  return T(this.h, a) ? this.h[a] : b;
};
k.set = function(a, b) {
  T(this.h, a) || (this.i++, this.g.push(a));
  this.h[a] = b;
};
k.forEach = function(a, b) {
  for (var c = this.T(), d = 0; d < c.length; d++) {
    var e = c[d], f = this.get(e);
    a.call(b, f, e, this);
  }
};
function T(a, b) {
  return Object.prototype.hasOwnProperty.call(a, b);
}
var Mc = /^(?:([^:/?#.]+):)?(?:\/\/(?:([^\\/?#]*)@)?([^\\/?#]*?)(?::([0-9]+))?(?=[\\/?#]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;
function Nc(a, b) {
  if (a) {
    a = a.split("&");
    for (var c = 0; c < a.length; c++) {
      var d = a[c].indexOf("="), e = null;
      if (0 <= d) {
        var f = a[c].substring(0, d);
        e = a[c].substring(d + 1);
      } else
        f = a[c];
      b(f, e ? decodeURIComponent(e.replace(/\+/g, " ")) : "");
    }
  }
}
function U(a, b) {
  this.i = this.s = this.j = "";
  this.m = null;
  this.o = this.l = "";
  this.g = false;
  if (a instanceof U) {
    this.g = b !== void 0 ? b : a.g;
    Oc(this, a.j);
    this.s = a.s;
    Pc(this, a.i);
    Qc(this, a.m);
    this.l = a.l;
    b = a.h;
    var c = new Rc();
    c.i = b.i;
    b.g && (c.g = new S(b.g), c.h = b.h);
    Sc(this, c);
    this.o = a.o;
  } else
    a && (c = String(a).match(Mc)) ? (this.g = !!b, Oc(this, c[1] || "", true), this.s = Tc(c[2] || ""), Pc(this, c[3] || "", true), Qc(this, c[4]), this.l = Tc(c[5] || "", true), Sc(this, c[6] || "", true), this.o = Tc(c[7] || "")) : (this.g = !!b, this.h = new Rc(null, this.g));
}
U.prototype.toString = function() {
  var a = [], b = this.j;
  b && a.push(Uc(b, Vc, true), ":");
  var c = this.i;
  if (c || b == "file")
    a.push("//"), (b = this.s) && a.push(Uc(b, Vc, true), "@"), a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g, "%$1")), c = this.m, c != null && a.push(":", String(c));
  if (c = this.l)
    this.i && c.charAt(0) != "/" && a.push("/"), a.push(Uc(c, c.charAt(0) == "/" ? Wc : Xc, true));
  (c = this.h.toString()) && a.push("?", c);
  (c = this.o) && a.push("#", Uc(c, Yc));
  return a.join("");
};
function N(a) {
  return new U(a);
}
function Oc(a, b, c) {
  a.j = c ? Tc(b, true) : b;
  a.j && (a.j = a.j.replace(/:$/, ""));
}
function Pc(a, b, c) {
  a.i = c ? Tc(b, true) : b;
}
function Qc(a, b) {
  if (b) {
    b = Number(b);
    if (isNaN(b) || 0 > b)
      throw Error("Bad port number " + b);
    a.m = b;
  } else
    a.m = null;
}
function Sc(a, b, c) {
  b instanceof Rc ? (a.h = b, Zc(a.h, a.g)) : (c || (b = Uc(b, $c)), a.h = new Rc(b, a.g));
}
function R(a, b, c) {
  a.h.set(b, c);
}
function jc(a) {
  R(a, "zx", Math.floor(2147483648 * Math.random()).toString(36) + Math.abs(Math.floor(2147483648 * Math.random()) ^ Date.now()).toString(36));
  return a;
}
function ad(a) {
  return a instanceof U ? N(a) : new U(a, void 0);
}
function bd(a, b, c, d) {
  var e = new U(null, void 0);
  a && Oc(e, a);
  b && Pc(e, b);
  c && Qc(e, c);
  d && (e.l = d);
  return e;
}
function Tc(a, b) {
  return a ? b ? decodeURI(a.replace(/%25/g, "%2525")) : decodeURIComponent(a) : "";
}
function Uc(a, b, c) {
  return typeof a === "string" ? (a = encodeURI(a).replace(b, cd), c && (a = a.replace(/%25([0-9a-fA-F]{2})/g, "%$1")), a) : null;
}
function cd(a) {
  a = a.charCodeAt(0);
  return "%" + (a >> 4 & 15).toString(16) + (a & 15).toString(16);
}
var Vc = /[#\/\?@]/g;
var Xc = /[#\?:]/g;
var Wc = /[#\?]/g;
var $c = /[#\?@]/g;
var Yc = /#/g;
function Rc(a, b) {
  this.h = this.g = null;
  this.i = a || null;
  this.j = !!b;
}
function V(a) {
  a.g || (a.g = new S(), a.h = 0, a.i && Nc(a.i, function(b, c) {
    a.add(decodeURIComponent(b.replace(/\+/g, " ")), c);
  }));
}
k = Rc.prototype;
k.add = function(a, b) {
  V(this);
  this.i = null;
  a = W(this, a);
  var c = this.g.get(a);
  c || this.g.set(a, c = []);
  c.push(b);
  this.h += 1;
  return this;
};
function dd(a, b) {
  V(a);
  b = W(a, b);
  T(a.g.h, b) && (a.i = null, a.h -= a.g.get(b).length, a = a.g, T(a.h, b) && (delete a.h[b], a.i--, a.g.length > 2 * a.i && Lc(a)));
}
function ed(a, b) {
  V(a);
  b = W(a, b);
  return T(a.g.h, b);
}
k.forEach = function(a, b) {
  V(this);
  this.g.forEach(function(c, d) {
    na(c, function(e) {
      a.call(b, e, d, this);
    }, this);
  }, this);
};
k.T = function() {
  V(this);
  for (var a = this.g.R(), b = this.g.T(), c = [], d = 0; d < b.length; d++)
    for (var e = a[d], f = 0; f < e.length; f++)
      c.push(b[d]);
  return c;
};
k.R = function(a) {
  V(this);
  var b = [];
  if (typeof a === "string")
    ed(this, a) && (b = qa(b, this.g.get(W(this, a))));
  else {
    a = this.g.R();
    for (var c = 0; c < a.length; c++)
      b = qa(b, a[c]);
  }
  return b;
};
k.set = function(a, b) {
  V(this);
  this.i = null;
  a = W(this, a);
  ed(this, a) && (this.h -= this.g.get(a).length);
  this.g.set(a, [b]);
  this.h += 1;
  return this;
};
k.get = function(a, b) {
  if (!a)
    return b;
  a = this.R(a);
  return 0 < a.length ? String(a[0]) : b;
};
function mc(a, b, c) {
  dd(a, b);
  0 < c.length && (a.i = null, a.g.set(W(a, b), ra(c)), a.h += c.length);
}
k.toString = function() {
  if (this.i)
    return this.i;
  if (!this.g)
    return "";
  for (var a = [], b = this.g.T(), c = 0; c < b.length; c++) {
    var d = b[c], e = encodeURIComponent(String(d));
    d = this.R(d);
    for (var f = 0; f < d.length; f++) {
      var h = e;
      d[f] !== "" && (h += "=" + encodeURIComponent(String(d[f])));
      a.push(h);
    }
  }
  return this.i = a.join("&");
};
function W(a, b) {
  b = String(b);
  a.j && (b = b.toLowerCase());
  return b;
}
function Zc(a, b) {
  b && !a.j && (V(a), a.i = null, a.g.forEach(function(c, d) {
    var e = d.toLowerCase();
    d != e && (dd(this, d), mc(this, e, c));
  }, a));
  a.j = b;
}
var fd = function() {
  function fd2(a, b) {
    this.h = a;
    this.g = b;
  }
  return fd2;
}();
function gd(a) {
  this.l = a || hd;
  l.PerformanceNavigationTiming ? (a = l.performance.getEntriesByType("navigation"), a = 0 < a.length && (a[0].nextHopProtocol == "hq" || a[0].nextHopProtocol == "h2")) : a = !!(l.g && l.g.Ea && l.g.Ea() && l.g.Ea().Zb);
  this.j = a ? this.l : 1;
  this.g = null;
  1 < this.j && (this.g = new Set());
  this.h = null;
  this.i = [];
}
var hd = 10;
function id(a) {
  return a.h ? true : a.g ? a.g.size >= a.j : false;
}
function Cc(a) {
  return a.h ? 1 : a.g ? a.g.size : 0;
}
function yc(a, b) {
  return a.h ? a.h == b : a.g ? a.g.has(b) : false;
}
function Dc(a, b) {
  a.g ? a.g.add(b) : a.h = b;
}
function Fc(a, b) {
  a.h && a.h == b ? a.h = null : a.g && a.g.has(b) && a.g.delete(b);
}
gd.prototype.cancel = function() {
  var e_1, _a8;
  this.i = jd(this);
  if (this.h)
    this.h.cancel(), this.h = null;
  else if (this.g && this.g.size !== 0) {
    try {
      for (var _b = __values2(this.g.values()), _c2 = _b.next(); !_c2.done; _c2 = _b.next()) {
        var a = _c2.value;
        a.cancel();
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (_c2 && !_c2.done && (_a8 = _b.return))
          _a8.call(_b);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
    this.g.clear();
  }
};
function jd(a) {
  var e_2, _a8;
  if (a.h != null)
    return a.i.concat(a.h.D);
  if (a.g != null && a.g.size !== 0) {
    var b = a.i;
    try {
      for (var _b = __values2(a.g.values()), _c2 = _b.next(); !_c2.done; _c2 = _b.next()) {
        var c = _c2.value;
        b = b.concat(c.D);
      }
    } catch (e_2_1) {
      e_2 = { error: e_2_1 };
    } finally {
      try {
        if (_c2 && !_c2.done && (_a8 = _b.return))
          _a8.call(_b);
      } finally {
        if (e_2)
          throw e_2.error;
      }
    }
    return b;
  }
  return ra(a.i);
}
function kd() {
}
kd.prototype.stringify = function(a) {
  return l.JSON.stringify(a, void 0);
};
kd.prototype.parse = function(a) {
  return l.JSON.parse(a, void 0);
};
function ld() {
  this.g = new kd();
}
function md(a, b, c) {
  var d = c || "";
  try {
    Kc(a, function(e, f) {
      var h = e;
      p(e) && (h = rb(e));
      b.push(d + f + "=" + encodeURIComponent(h));
    });
  } catch (e) {
    throw b.push(d + "type=" + encodeURIComponent("_badmap")), e;
  }
}
function nd(a, b) {
  var c = new Mb();
  if (l.Image) {
    var d_1 = new Image();
    d_1.onload = ja(od, c, d_1, "TestLoadImage: loaded", true, b);
    d_1.onerror = ja(od, c, d_1, "TestLoadImage: error", false, b);
    d_1.onabort = ja(od, c, d_1, "TestLoadImage: abort", false, b);
    d_1.ontimeout = ja(od, c, d_1, "TestLoadImage: timeout", false, b);
    l.setTimeout(function() {
      if (d_1.ontimeout)
        d_1.ontimeout();
    }, 1e4);
    d_1.src = a;
  } else
    b(false);
}
function od(a, b, c, d, e) {
  try {
    b.onload = null, b.onerror = null, b.onabort = null, b.ontimeout = null, e(d);
  } catch (f) {
  }
}
function pd(a) {
  this.l = a.$b || null;
  this.j = a.ib || false;
}
t(pd, Yb);
pd.prototype.g = function() {
  return new qd(this.l, this.j);
};
pd.prototype.i = function(a) {
  return function() {
    return a;
  };
}({});
function qd(a, b) {
  C.call(this);
  this.D = a;
  this.u = b;
  this.m = void 0;
  this.readyState = rd;
  this.status = 0;
  this.responseType = this.responseText = this.response = this.statusText = "";
  this.onreadystatechange = null;
  this.v = new Headers();
  this.h = null;
  this.C = "GET";
  this.B = "";
  this.g = false;
  this.A = this.j = this.l = null;
}
t(qd, C);
var rd = 0;
k = qd.prototype;
k.open = function(a, b) {
  if (this.readyState != rd)
    throw this.abort(), Error("Error reopening a connection");
  this.C = a;
  this.B = b;
  this.readyState = 1;
  sd(this);
};
k.send = function(a) {
  if (this.readyState != 1)
    throw this.abort(), Error("need to call open() first. ");
  this.g = true;
  var b = { headers: this.v, method: this.C, credentials: this.m, cache: void 0 };
  a && (b.body = a);
  (this.D || l).fetch(new Request(this.B, b)).then(this.Va.bind(this), this.ha.bind(this));
};
k.abort = function() {
  this.response = this.responseText = "";
  this.v = new Headers();
  this.status = 0;
  this.j && this.j.cancel("Request was aborted.");
  1 <= this.readyState && this.g && this.readyState != 4 && (this.g = false, td(this));
  this.readyState = rd;
};
k.Va = function(a) {
  if (this.g && (this.l = a, this.h || (this.status = this.l.status, this.statusText = this.l.statusText, this.h = a.headers, this.readyState = 2, sd(this)), this.g && (this.readyState = 3, sd(this), this.g)))
    if (this.responseType === "arraybuffer")
      a.arrayBuffer().then(this.Ta.bind(this), this.ha.bind(this));
    else if (typeof l.ReadableStream !== "undefined" && "body" in a) {
      this.j = a.body.getReader();
      if (this.u) {
        if (this.responseType)
          throw Error('responseType must be empty for "streamBinaryChunks" mode responses.');
        this.response = [];
      } else
        this.response = this.responseText = "", this.A = new TextDecoder();
      ud(this);
    } else
      a.text().then(this.Ua.bind(this), this.ha.bind(this));
};
function ud(a) {
  a.j.read().then(a.Sa.bind(a)).catch(a.ha.bind(a));
}
k.Sa = function(a) {
  if (this.g) {
    if (this.u && a.value)
      this.response.push(a.value);
    else if (!this.u) {
      var b = a.value ? a.value : new Uint8Array(0);
      if (b = this.A.decode(b, { stream: !a.done }))
        this.response = this.responseText += b;
    }
    a.done ? td(this) : sd(this);
    this.readyState == 3 && ud(this);
  }
};
k.Ua = function(a) {
  this.g && (this.response = this.responseText = a, td(this));
};
k.Ta = function(a) {
  this.g && (this.response = a, td(this));
};
k.ha = function() {
  this.g && td(this);
};
function td(a) {
  a.readyState = 4;
  a.l = null;
  a.j = null;
  a.A = null;
  sd(a);
}
k.setRequestHeader = function(a, b) {
  this.v.append(a, b);
};
k.getResponseHeader = function(a) {
  return this.h ? this.h.get(a.toLowerCase()) || "" : "";
};
k.getAllResponseHeaders = function() {
  if (!this.h)
    return "";
  var a = [], b = this.h.entries();
  for (var c = b.next(); !c.done; )
    c = c.value, a.push(c[0] + ": " + c[1]), c = b.next();
  return a.join("\r\n");
};
function sd(a) {
  a.onreadystatechange && a.onreadystatechange.call(a);
}
Object.defineProperty(qd.prototype, "withCredentials", { get: function() {
  return this.m === "include";
}, set: function(a) {
  this.m = a ? "include" : "same-origin";
} });
var vd = l.JSON.parse;
function X(a) {
  C.call(this);
  this.headers = new S();
  this.u = a || null;
  this.h = false;
  this.C = this.g = null;
  this.H = "";
  this.m = 0;
  this.j = "";
  this.l = this.F = this.v = this.D = false;
  this.B = 0;
  this.A = null;
  this.J = wd;
  this.K = this.L = false;
}
t(X, C);
var wd = "";
var xd = /^https?$/i;
var yd = ["POST", "PUT"];
k = X.prototype;
k.ea = function(a, b, c, d) {
  if (this.g)
    throw Error("[goog.net.XhrIo] Object is active with another request=" + this.H + "; newUri=" + a);
  b = b ? b.toUpperCase() : "GET";
  this.H = a;
  this.j = "";
  this.m = 0;
  this.D = false;
  this.h = true;
  this.g = this.u ? this.u.g() : cc.g();
  this.C = this.u ? Zb(this.u) : Zb(cc);
  this.g.onreadystatechange = q(this.Fa, this);
  try {
    this.F = true, this.g.open(b, String(a), true), this.F = false;
  } catch (f) {
    zd(this, f);
    return;
  }
  a = c || "";
  var e = new S(this.headers);
  d && Kc(d, function(f, h) {
    e.set(h, f);
  });
  d = oa(e.T());
  c = l.FormData && a instanceof l.FormData;
  !(0 <= ma(yd, b)) || d || c || e.set("Content-Type", "application/x-www-form-urlencoded;charset=utf-8");
  e.forEach(function(f, h) {
    this.g.setRequestHeader(h, f);
  }, this);
  this.J && (this.g.responseType = this.J);
  "withCredentials" in this.g && this.g.withCredentials !== this.L && (this.g.withCredentials = this.L);
  try {
    Ad(this), 0 < this.B && ((this.K = Bd(this.g)) ? (this.g.timeout = this.B, this.g.ontimeout = q(this.pa, this)) : this.A = Gb(this.pa, this.B, this)), this.v = true, this.g.send(a), this.v = false;
  } catch (f) {
    zd(this, f);
  }
};
function Bd(a) {
  return y && Ra() && typeof a.timeout === "number" && a.ontimeout !== void 0;
}
function pa(a) {
  return a.toLowerCase() == "content-type";
}
k.pa = function() {
  typeof goog != "undefined" && this.g && (this.j = "Timed out after " + this.B + "ms, aborting", this.m = 8, D(this, "timeout"), this.abort(8));
};
function zd(a, b) {
  a.h = false;
  a.g && (a.l = true, a.g.abort(), a.l = false);
  a.j = b;
  a.m = 5;
  Cd(a);
  Dd(a);
}
function Cd(a) {
  a.D || (a.D = true, D(a, "complete"), D(a, "error"));
}
k.abort = function(a) {
  this.g && this.h && (this.h = false, this.l = true, this.g.abort(), this.l = false, this.m = a || 7, D(this, "complete"), D(this, "abort"), Dd(this));
};
k.M = function() {
  this.g && (this.h && (this.h = false, this.l = true, this.g.abort(), this.l = false), Dd(this, true));
  X.Z.M.call(this);
};
k.Fa = function() {
  this.s || (this.F || this.v || this.l ? Ed(this) : this.cb());
};
k.cb = function() {
  Ed(this);
};
function Ed(a) {
  if (a.h && typeof goog != "undefined" && (!a.C[1] || O(a) != 4 || a.ba() != 2)) {
    if (a.v && O(a) == 4)
      Gb(a.Fa, 0, a);
    else if (D(a, "readystatechange"), O(a) == 4) {
      a.h = false;
      try {
        var n = a.ba();
        a:
          switch (n) {
            case 200:
            case 201:
            case 202:
            case 204:
            case 206:
            case 304:
            case 1223:
              var b = true;
              break a;
            default:
              b = false;
          }
        var c;
        if (!(c = b)) {
          var d;
          if (d = n === 0) {
            var e = String(a.H).match(Mc)[1] || null;
            if (!e && l.self && l.self.location) {
              var f = l.self.location.protocol;
              e = f.substr(0, f.length - 1);
            }
            d = !xd.test(e ? e.toLowerCase() : "");
          }
          c = d;
        }
        if (c)
          D(a, "complete"), D(a, "success");
        else {
          a.m = 6;
          try {
            var h = 2 < O(a) ? a.g.statusText : "";
          } catch (u) {
            h = "";
          }
          a.j = h + " [" + a.ba() + "]";
          Cd(a);
        }
      } finally {
        Dd(a);
      }
    }
  }
}
function Dd(a, b) {
  if (a.g) {
    Ad(a);
    var c = a.g, d = a.C[0] ? aa : null;
    a.g = null;
    a.C = null;
    b || D(a, "ready");
    try {
      c.onreadystatechange = d;
    } catch (e) {
    }
  }
}
function Ad(a) {
  a.g && a.K && (a.g.ontimeout = null);
  a.A && (l.clearTimeout(a.A), a.A = null);
}
function O(a) {
  return a.g ? a.g.readyState : 0;
}
k.ba = function() {
  try {
    return 2 < O(this) ? this.g.status : -1;
  } catch (a) {
    return -1;
  }
};
k.ga = function() {
  try {
    return this.g ? this.g.responseText : "";
  } catch (a) {
    return "";
  }
};
k.Qa = function(a) {
  if (this.g) {
    var b = this.g.responseText;
    a && b.indexOf(a) == 0 && (b = b.substring(a.length));
    return vd(b);
  }
};
function oc(a) {
  try {
    if (!a.g)
      return null;
    if ("response" in a.g)
      return a.g.response;
    switch (a.J) {
      case wd:
      case "text":
        return a.g.responseText;
      case "arraybuffer":
        if ("mozResponseArrayBuffer" in a.g)
          return a.g.mozResponseArrayBuffer;
    }
    return null;
  } catch (b) {
    return null;
  }
}
k.Da = function() {
  return this.m;
};
k.La = function() {
  return typeof this.j === "string" ? this.j : String(this.j);
};
function Fd(a) {
  var b = "";
  xa(a, function(c, d) {
    b += d;
    b += ":";
    b += c;
    b += "\r\n";
  });
  return b;
}
function Gd(a, b, c) {
  a: {
    for (d in c) {
      var d = false;
      break a;
    }
    d = true;
  }
  d || (c = Fd(c), typeof a === "string" ? c != null && encodeURIComponent(String(c)) : R(a, b, c));
}
function Hd(a, b, c) {
  return c && c.internalChannelParams ? c.internalChannelParams[a] || b : b;
}
function Id(a) {
  this.za = 0;
  this.l = [];
  this.h = new Mb();
  this.la = this.oa = this.F = this.W = this.g = this.sa = this.D = this.aa = this.o = this.P = this.s = null;
  this.Za = this.V = 0;
  this.Xa = Hd("failFast", false, a);
  this.N = this.v = this.u = this.m = this.j = null;
  this.X = true;
  this.I = this.ta = this.U = -1;
  this.Y = this.A = this.C = 0;
  this.Pa = Hd("baseRetryDelayMs", 5e3, a);
  this.$a = Hd("retryDelaySeedMs", 1e4, a);
  this.Ya = Hd("forwardChannelMaxRetries", 2, a);
  this.ra = Hd("forwardChannelRequestTimeoutMs", 2e4, a);
  this.qa = a && a.xmlHttpFactory || void 0;
  this.Ba = a && a.Yb || false;
  this.K = void 0;
  this.H = a && a.supportsCrossDomainXhr || false;
  this.J = "";
  this.i = new gd(a && a.concurrentRequestLimit);
  this.Ca = new ld();
  this.ja = a && a.fastHandshake || false;
  this.Ra = a && a.Wb || false;
  a && a.Aa && this.h.Aa();
  a && a.forceLongPolling && (this.X = false);
  this.$ = !this.ja && this.X && a && a.detectBufferingProxy || false;
  this.ka = void 0;
  this.O = 0;
  this.L = false;
  this.B = null;
  this.Wa = !a || a.Xb !== false;
}
k = Id.prototype;
k.ma = 8;
k.G = 1;
function Ic(a) {
  Jd(a);
  if (a.G == 3) {
    var b = a.V++, c = N(a.F);
    R(c, "SID", a.J);
    R(c, "RID", b);
    R(c, "TYPE", "terminate");
    Kd(a, c);
    b = new M(a, a.h, b, void 0);
    b.K = 2;
    b.v = jc(N(c));
    c = false;
    l.navigator && l.navigator.sendBeacon && (c = l.navigator.sendBeacon(b.v.toString(), ""));
    !c && l.Image && (new Image().src = b.v, c = true);
    c || (b.g = nc(b.l, null), b.g.ea(b.v));
    b.F = Date.now();
    lc(b);
  }
  Ld(a);
}
k.hb = function(a) {
  try {
    this.h.info("Origin Trials invoked: " + a);
  } catch (b) {
  }
};
function Ac(a) {
  a.g && (wc(a), a.g.cancel(), a.g = null);
}
function Jd(a) {
  Ac(a);
  a.u && (l.clearTimeout(a.u), a.u = null);
  zc(a);
  a.i.cancel();
  a.m && (typeof a.m === "number" && l.clearTimeout(a.m), a.m = null);
}
function Md(a, b) {
  a.l.push(new fd(a.Za++, b));
  a.G == 3 && Hc(a);
}
function Hc(a) {
  id(a.i) || a.m || (a.m = true, zb(a.Ha, a), a.C = 0);
}
function Nd(a, b) {
  if (Cc(a.i) >= a.i.j - (a.m ? 1 : 0))
    return false;
  if (a.m)
    return a.l = b.D.concat(a.l), true;
  if (a.G == 1 || a.G == 2 || a.C >= (a.Xa ? 0 : a.Ya))
    return false;
  a.m = K(q(a.Ha, a, b), Od(a, a.C));
  a.C++;
  return true;
}
k.Ha = function(a) {
  if (this.m)
    if (this.m = null, this.G == 1) {
      if (!a) {
        this.V = Math.floor(1e5 * Math.random());
        a = this.V++;
        var e = new M(this, this.h, a, void 0);
        var f = this.s;
        this.P && (f ? (f = ya(f), Aa(f, this.P)) : f = this.P);
        this.o === null && (e.H = f);
        if (this.ja)
          a: {
            var b = 0;
            for (var c = 0; c < this.l.length; c++) {
              b: {
                var d = this.l[c];
                if ("__data__" in d.g && (d = d.g.__data__, typeof d === "string")) {
                  d = d.length;
                  break b;
                }
                d = void 0;
              }
              if (d === void 0)
                break;
              b += d;
              if (4096 < b) {
                b = c;
                break a;
              }
              if (b === 4096 || c === this.l.length - 1) {
                b = c + 1;
                break a;
              }
            }
            b = 1e3;
          }
        else
          b = 1e3;
        b = Pd(this, e, b);
        c = N(this.F);
        R(c, "RID", a);
        R(c, "CVER", 22);
        this.D && R(c, "X-HTTP-Session-Id", this.D);
        Kd(this, c);
        this.o && f && Gd(c, this.o, f);
        Dc(this.i, e);
        this.Ra && R(c, "TYPE", "init");
        this.ja ? (R(c, "$req", b), R(c, "SID", "null"), e.$ = true, ic(e, c, null)) : ic(e, c, b);
        this.G = 2;
      }
    } else
      this.G == 3 && (a ? Qd(this, a) : this.l.length == 0 || id(this.i) || Qd(this));
};
function Qd(a, b) {
  var c;
  b ? c = b.m : c = a.V++;
  var d = N(a.F);
  R(d, "SID", a.J);
  R(d, "RID", c);
  R(d, "AID", a.U);
  Kd(a, d);
  a.o && a.s && Gd(d, a.o, a.s);
  c = new M(a, a.h, c, a.C + 1);
  a.o === null && (c.H = a.s);
  b && (a.l = b.D.concat(a.l));
  b = Pd(a, c, 1e3);
  c.setTimeout(Math.round(0.5 * a.ra) + Math.round(0.5 * a.ra * Math.random()));
  Dc(a.i, c);
  ic(c, d, b);
}
function Kd(a, b) {
  a.j && Kc({}, function(c, d) {
    R(b, d, c);
  });
}
function Pd(a, b, c) {
  c = Math.min(a.l.length, c);
  var d = a.j ? q(a.j.Oa, a.j, a) : null;
  a: {
    var e = a.l;
    var f = -1;
    for (; ; ) {
      var h = ["count=" + c];
      f == -1 ? 0 < c ? (f = e[0].h, h.push("ofs=" + f)) : f = 0 : h.push("ofs=" + f);
      var n = true;
      for (var u = 0; u < c; u++) {
        var m = e[u].h;
        var r = e[u].g;
        m -= f;
        if (0 > m)
          f = Math.max(0, e[u].h - 100), n = false;
        else
          try {
            md(r, h, "req" + m + "_");
          } catch (G2) {
            d && d(r);
          }
      }
      if (n) {
        d = h.join("&");
        break a;
      }
    }
  }
  a = a.l.splice(0, c);
  b.D = a;
  return d;
}
function Gc(a) {
  a.g || a.u || (a.Y = 1, zb(a.Ga, a), a.A = 0);
}
function Bc(a) {
  if (a.g || a.u || 3 <= a.A)
    return false;
  a.Y++;
  a.u = K(q(a.Ga, a), Od(a, a.A));
  a.A++;
  return true;
}
k.Ga = function() {
  this.u = null;
  Rd(this);
  if (this.$ && !(this.L || this.g == null || 0 >= this.O)) {
    var a = 2 * this.O;
    this.h.info("BP detection timer enabled: " + a);
    this.B = K(q(this.bb, this), a);
  }
};
k.bb = function() {
  this.B && (this.B = null, this.h.info("BP detection timeout reached."), this.h.info("Buffering proxy detected and switch to long-polling!"), this.N = false, this.L = true, J(10), Ac(this), Rd(this));
};
function wc(a) {
  a.B != null && (l.clearTimeout(a.B), a.B = null);
}
function Rd(a) {
  a.g = new M(a, a.h, "rpc", a.Y);
  a.o === null && (a.g.H = a.s);
  a.g.O = 0;
  var b = N(a.oa);
  R(b, "RID", "rpc");
  R(b, "SID", a.J);
  R(b, "CI", a.N ? "0" : "1");
  R(b, "AID", a.U);
  Kd(a, b);
  R(b, "TYPE", "xmlhttp");
  a.o && a.s && Gd(b, a.o, a.s);
  a.K && a.g.setTimeout(a.K);
  var c = a.g;
  a = a.la;
  c.K = 1;
  c.v = jc(N(b));
  c.s = null;
  c.U = true;
  kc(c, a);
}
k.ab = function() {
  this.v != null && (this.v = null, Ac(this), Bc(this), J(19));
};
function zc(a) {
  a.v != null && (l.clearTimeout(a.v), a.v = null);
}
function uc(a, b) {
  var c = null;
  if (a.g == b) {
    zc(a);
    wc(a);
    a.g = null;
    var d = 2;
  } else if (yc(a.i, b))
    c = b.D, Fc(a.i, b), d = 1;
  else
    return;
  a.I = b.N;
  if (a.G != 0) {
    if (b.i)
      if (d == 1) {
        c = b.s ? b.s.length : 0;
        b = Date.now() - b.F;
        var e = a.C;
        d = Sb();
        D(d, new Vb(d, c, b, e));
        Hc(a);
      } else
        Gc(a);
    else if (e = b.o, e == 3 || e == 0 && 0 < a.I || !(d == 1 && Nd(a, b) || d == 2 && Bc(a)))
      switch (c && 0 < c.length && (b = a.i, b.i = b.i.concat(c)), e) {
        case 1:
          Q(a, 5);
          break;
        case 4:
          Q(a, 10);
          break;
        case 3:
          Q(a, 6);
          break;
        default:
          Q(a, 2);
      }
  }
}
function Od(a, b) {
  var c = a.Pa + Math.floor(Math.random() * a.$a);
  a.j || (c *= 2);
  return c * b;
}
function Q(a, b) {
  a.h.info("Error code " + b);
  if (b == 2) {
    var c = null;
    a.j && (c = null);
    var d = q(a.jb, a);
    c || (c = new U("//www.google.com/images/cleardot.gif"), l.location && l.location.protocol == "http" || Oc(c, "https"), jc(c));
    nd(c.toString(), d);
  } else
    J(2);
  a.G = 0;
  a.j && a.j.va(b);
  Ld(a);
  Jd(a);
}
k.jb = function(a) {
  a ? (this.h.info("Successfully pinged google.com"), J(2)) : (this.h.info("Failed to ping google.com"), J(1));
};
function Ld(a) {
  a.G = 0;
  a.I = -1;
  if (a.j) {
    if (jd(a.i).length != 0 || a.l.length != 0)
      a.i.i.length = 0, ra(a.l), a.l.length = 0;
    a.j.ua();
  }
}
function Ec(a, b, c) {
  var d = ad(c);
  if (d.i != "")
    b && Pc(d, b + "." + d.i), Qc(d, d.m);
  else {
    var e = l.location;
    d = bd(e.protocol, b ? b + "." + e.hostname : e.hostname, +e.port, c);
  }
  a.aa && xa(a.aa, function(e2, f) {
    R(d, f, e2);
  });
  b = a.D;
  c = a.sa;
  b && c && R(d, b, c);
  R(d, "VER", a.ma);
  Kd(a, d);
  return d;
}
function nc(a, b, c) {
  if (b && !a.H)
    throw Error("Can't create secondary domain capable XhrIo object.");
  b = c && a.Ba && !a.qa ? new X(new pd({ ib: true })) : new X(a.qa);
  b.L = a.H;
  return b;
}
function Sd() {
}
k = Sd.prototype;
k.xa = function() {
};
k.wa = function() {
};
k.va = function() {
};
k.ua = function() {
};
k.Oa = function() {
};
function Td() {
  if (y && !(10 <= Number(Ua)))
    throw Error("Environmental error: no available transport.");
}
Td.prototype.g = function(a, b) {
  return new Y(a, b);
};
function Y(a, b) {
  C.call(this);
  this.g = new Id(b);
  this.l = a;
  this.h = b && b.messageUrlParams || null;
  a = b && b.messageHeaders || null;
  b && b.clientProtocolHeaderRequired && (a ? a["X-Client-Protocol"] = "webchannel" : a = { "X-Client-Protocol": "webchannel" });
  this.g.s = a;
  a = b && b.initMessageHeaders || null;
  b && b.messageContentType && (a ? a["X-WebChannel-Content-Type"] = b.messageContentType : a = { "X-WebChannel-Content-Type": b.messageContentType });
  b && b.ya && (a ? a["X-WebChannel-Client-Profile"] = b.ya : a = { "X-WebChannel-Client-Profile": b.ya });
  this.g.P = a;
  (a = b && b.httpHeadersOverwriteParam) && !sa(a) && (this.g.o = a);
  this.A = b && b.supportsCrossDomainXhr || false;
  this.v = b && b.sendRawJson || false;
  (b = b && b.httpSessionIdParam) && !sa(b) && (this.g.D = b, a = this.h, a !== null && b in a && (a = this.h, b in a && delete a[b]));
  this.j = new Z(this);
}
t(Y, C);
Y.prototype.m = function() {
  this.g.j = this.j;
  this.A && (this.g.H = true);
  var a = this.g, b = this.l, c = this.h || void 0;
  a.Wa && (a.h.info("Origin Trials enabled."), zb(q(a.hb, a, b)));
  J(0);
  a.W = b;
  a.aa = c || {};
  a.N = a.X;
  a.F = Ec(a, null, a.W);
  Hc(a);
};
Y.prototype.close = function() {
  Ic(this.g);
};
Y.prototype.u = function(a) {
  if (typeof a === "string") {
    var b = {};
    b.__data__ = a;
    Md(this.g, b);
  } else
    this.v ? (b = {}, b.__data__ = rb(a), Md(this.g, b)) : Md(this.g, a);
};
Y.prototype.M = function() {
  this.g.j = null;
  delete this.j;
  Ic(this.g);
  delete this.g;
  Y.Z.M.call(this);
};
function Ud(a) {
  ac.call(this);
  var b = a.__sm__;
  if (b) {
    a: {
      for (var c in b) {
        a = c;
        break a;
      }
      a = void 0;
    }
    if (this.i = a)
      a = this.i, b = b !== null && a in b ? b[a] : void 0;
    this.data = b;
  } else
    this.data = a;
}
t(Ud, ac);
function Vd() {
  bc.call(this);
  this.status = 1;
}
t(Vd, bc);
function Z(a) {
  this.g = a;
}
t(Z, Sd);
Z.prototype.xa = function() {
  D(this.g, "a");
};
Z.prototype.wa = function(a) {
  D(this.g, new Ud(a));
};
Z.prototype.va = function(a) {
  D(this.g, new Vd(a));
};
Z.prototype.ua = function() {
  D(this.g, "b");
};
Td.prototype.createWebChannel = Td.prototype.g;
Y.prototype.send = Y.prototype.u;
Y.prototype.open = Y.prototype.m;
Y.prototype.close = Y.prototype.close;
Wb.NO_ERROR = 0;
Wb.TIMEOUT = 8;
Wb.HTTP_ERROR = 6;
Xb.COMPLETE = "complete";
$b.EventType = L;
L.OPEN = "a";
L.CLOSE = "b";
L.ERROR = "c";
L.MESSAGE = "d";
C.prototype.listen = C.prototype.N;
X.prototype.listenOnce = X.prototype.O;
X.prototype.getLastError = X.prototype.La;
X.prototype.getLastErrorCode = X.prototype.Da;
X.prototype.getStatus = X.prototype.ba;
X.prototype.getResponseJson = X.prototype.Qa;
X.prototype.getResponseText = X.prototype.ga;
X.prototype.send = X.prototype.ea;
var createWebChannelTransport = function() {
  return new Td();
};
var getStatEventTarget = function() {
  return Sb();
};
var ErrorCode = Wb;
var EventType = Xb;
var Event = H;
var Stat = { rb: 0, ub: 1, vb: 2, Ob: 3, Tb: 4, Qb: 5, Rb: 6, Pb: 7, Nb: 8, Sb: 9, PROXY: 10, NOPROXY: 11, Lb: 12, Hb: 13, Ib: 14, Gb: 15, Jb: 16, Kb: 17, nb: 18, mb: 19, ob: 20 };
var FetchXmlHttpFactory = pd;
var WebChannel = $b;
var XhrIo = X;

// node_modules/@firebase/firestore/dist/esm5/prebuilt-306f43d8-45d6f0b9.js
var S2 = function() {
  function t3(t4, e) {
    var n = this;
    this.previousValue = t4, e && (e.sequenceNumberHandler = function(t5) {
      return n.t(t5);
    }, this.i = function(t5) {
      return e.writeSequenceNumber(t5);
    });
  }
  return t3.prototype.t = function(t4) {
    return this.previousValue = Math.max(t4, this.previousValue), this.previousValue;
  }, t3.prototype.next = function() {
    var t4 = ++this.previousValue;
    return this.i && this.i(t4), t4;
  }, t3;
}();
S2.o = -1;
var N2 = {
  OK: "ok",
  CANCELLED: "cancelled",
  UNKNOWN: "unknown",
  INVALID_ARGUMENT: "invalid-argument",
  DEADLINE_EXCEEDED: "deadline-exceeded",
  NOT_FOUND: "not-found",
  ALREADY_EXISTS: "already-exists",
  PERMISSION_DENIED: "permission-denied",
  UNAUTHENTICATED: "unauthenticated",
  RESOURCE_EXHAUSTED: "resource-exhausted",
  FAILED_PRECONDITION: "failed-precondition",
  ABORTED: "aborted",
  OUT_OF_RANGE: "out-of-range",
  UNIMPLEMENTED: "unimplemented",
  INTERNAL: "internal",
  UNAVAILABLE: "unavailable",
  DATA_LOSS: "data-loss"
};
var D2 = function(e) {
  function n(t3, n2) {
    var r = this;
    return (r = e.call(this, n2) || this).code = t3, r.message = n2, r.name = "FirebaseError", r.toString = function() {
      return r.name + ": [code=" + r.code + "]: " + r.message;
    }, r;
  }
  return __extends(n, e), n;
}(Error);
var A2 = new Logger("@firebase/firestore");
function k2() {
  return A2.logLevel;
}
function C2(t3) {
  for (var n = [], r = 1; r < arguments.length; r++)
    n[r - 1] = arguments[r];
  if (A2.logLevel <= LogLevel.DEBUG) {
    var i = n.map(L2);
    A2.debug.apply(A2, __spreadArray(["Firestore (8.10.0): " + t3], i));
  }
}
function x2(t3) {
  for (var n = [], r = 1; r < arguments.length; r++)
    n[r - 1] = arguments[r];
  if (A2.logLevel <= LogLevel.ERROR) {
    var i = n.map(L2);
    A2.error.apply(A2, __spreadArray(["Firestore (8.10.0): " + t3], i));
  }
}
function R2(t3) {
  for (var n = [], r = 1; r < arguments.length; r++)
    n[r - 1] = arguments[r];
  if (A2.logLevel <= LogLevel.WARN) {
    var i = n.map(L2);
    A2.warn.apply(A2, __spreadArray(["Firestore (8.10.0): " + t3], i));
  }
}
function L2(t3) {
  if (typeof t3 == "string")
    return t3;
  try {
    return e = t3, JSON.stringify(e);
  } catch (e2) {
    return t3;
  }
  var e;
}
function O2(t3) {
  t3 === void 0 && (t3 = "Unexpected state");
  var e = "FIRESTORE (8.10.0) INTERNAL ASSERTION FAILED: " + t3;
  throw x2(e), new Error(e);
}
function P2(t3, e) {
  t3 || O2();
}
function F2(t3, e) {
  return t3;
}
function M2(t3) {
  var e = typeof self != "undefined" && (self.crypto || self.msCrypto), n = new Uint8Array(t3);
  if (e && typeof e.getRandomValues == "function")
    e.getRandomValues(n);
  else
    for (var r = 0; r < t3; r++)
      n[r] = Math.floor(256 * Math.random());
  return n;
}
var V2 = function() {
  function t3() {
  }
  return t3.u = function() {
    for (var t4 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", e = Math.floor(256 / t4.length) * t4.length, n = ""; n.length < 20; )
      for (var r = M2(40), i = 0; i < r.length; ++i)
        n.length < 20 && r[i] < e && (n += t4.charAt(r[i] % t4.length));
    return n;
  }, t3;
}();
function q2(t3, e) {
  return t3 < e ? -1 : t3 > e ? 1 : 0;
}
function U2(t3, e, n) {
  return t3.length === e.length && t3.every(function(t4, r) {
    return n(t4, e[r]);
  });
}
function B2(t3) {
  return t3 + "\0";
}
var j = function() {
  function t3(t4, e) {
    if (this.seconds = t4, this.nanoseconds = e, e < 0)
      throw new D2(N2.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + e);
    if (e >= 1e9)
      throw new D2(N2.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + e);
    if (t4 < -62135596800)
      throw new D2(N2.INVALID_ARGUMENT, "Timestamp seconds out of range: " + t4);
    if (t4 >= 253402300800)
      throw new D2(N2.INVALID_ARGUMENT, "Timestamp seconds out of range: " + t4);
  }
  return t3.now = function() {
    return t3.fromMillis(Date.now());
  }, t3.fromDate = function(e) {
    return t3.fromMillis(e.getTime());
  }, t3.fromMillis = function(e) {
    var n = Math.floor(e / 1e3);
    return new t3(n, Math.floor(1e6 * (e - 1e3 * n)));
  }, t3.prototype.toDate = function() {
    return new Date(this.toMillis());
  }, t3.prototype.toMillis = function() {
    return 1e3 * this.seconds + this.nanoseconds / 1e6;
  }, t3.prototype._compareTo = function(t4) {
    return this.seconds === t4.seconds ? q2(this.nanoseconds, t4.nanoseconds) : q2(this.seconds, t4.seconds);
  }, t3.prototype.isEqual = function(t4) {
    return t4.seconds === this.seconds && t4.nanoseconds === this.nanoseconds;
  }, t3.prototype.toString = function() {
    return "Timestamp(seconds=" + this.seconds + ", nanoseconds=" + this.nanoseconds + ")";
  }, t3.prototype.toJSON = function() {
    return {
      seconds: this.seconds,
      nanoseconds: this.nanoseconds
    };
  }, t3.prototype.valueOf = function() {
    var t4 = this.seconds - -62135596800;
    return String(t4).padStart(12, "0") + "." + String(this.nanoseconds).padStart(9, "0");
  }, t3;
}();
var K2 = function() {
  function t3(t4) {
    this.timestamp = t4;
  }
  return t3.fromTimestamp = function(e) {
    return new t3(e);
  }, t3.min = function() {
    return new t3(new j(0, 0));
  }, t3.prototype.compareTo = function(t4) {
    return this.timestamp._compareTo(t4.timestamp);
  }, t3.prototype.isEqual = function(t4) {
    return this.timestamp.isEqual(t4.timestamp);
  }, t3.prototype.toMicroseconds = function() {
    return 1e6 * this.timestamp.seconds + this.timestamp.nanoseconds / 1e3;
  }, t3.prototype.toString = function() {
    return "SnapshotVersion(" + this.timestamp.toString() + ")";
  }, t3.prototype.toTimestamp = function() {
    return this.timestamp;
  }, t3;
}();
function Q2(t3) {
  var e = 0;
  for (var n in t3)
    Object.prototype.hasOwnProperty.call(t3, n) && e++;
  return e;
}
function G(t3, e) {
  for (var n in t3)
    Object.prototype.hasOwnProperty.call(t3, n) && e(n, t3[n]);
}
function z2(t3) {
  for (var e in t3)
    if (Object.prototype.hasOwnProperty.call(t3, e))
      return false;
  return true;
}
var W2 = function() {
  function t3(t4, e, n) {
    e === void 0 ? e = 0 : e > t4.length && O2(), n === void 0 ? n = t4.length - e : n > t4.length - e && O2(), this.segments = t4, this.offset = e, this.len = n;
  }
  return Object.defineProperty(t3.prototype, "length", {
    get: function() {
      return this.len;
    },
    enumerable: false,
    configurable: true
  }), t3.prototype.isEqual = function(e) {
    return t3.comparator(this, e) === 0;
  }, t3.prototype.child = function(e) {
    var n = this.segments.slice(this.offset, this.limit());
    return e instanceof t3 ? e.forEach(function(t4) {
      n.push(t4);
    }) : n.push(e), this.construct(n);
  }, t3.prototype.limit = function() {
    return this.offset + this.length;
  }, t3.prototype.popFirst = function(t4) {
    return t4 = t4 === void 0 ? 1 : t4, this.construct(this.segments, this.offset + t4, this.length - t4);
  }, t3.prototype.popLast = function() {
    return this.construct(this.segments, this.offset, this.length - 1);
  }, t3.prototype.firstSegment = function() {
    return this.segments[this.offset];
  }, t3.prototype.lastSegment = function() {
    return this.get(this.length - 1);
  }, t3.prototype.get = function(t4) {
    return this.segments[this.offset + t4];
  }, t3.prototype.isEmpty = function() {
    return this.length === 0;
  }, t3.prototype.isPrefixOf = function(t4) {
    if (t4.length < this.length)
      return false;
    for (var e = 0; e < this.length; e++)
      if (this.get(e) !== t4.get(e))
        return false;
    return true;
  }, t3.prototype.isImmediateParentOf = function(t4) {
    if (this.length + 1 !== t4.length)
      return false;
    for (var e = 0; e < this.length; e++)
      if (this.get(e) !== t4.get(e))
        return false;
    return true;
  }, t3.prototype.forEach = function(t4) {
    for (var e = this.offset, n = this.limit(); e < n; e++)
      t4(this.segments[e]);
  }, t3.prototype.toArray = function() {
    return this.segments.slice(this.offset, this.limit());
  }, t3.comparator = function(t4, e) {
    for (var n = Math.min(t4.length, e.length), r = 0; r < n; r++) {
      var i = t4.get(r), o = e.get(r);
      if (i < o)
        return -1;
      if (i > o)
        return 1;
    }
    return t4.length < e.length ? -1 : t4.length > e.length ? 1 : 0;
  }, t3;
}();
var H2 = function(e) {
  function n() {
    return e !== null && e.apply(this, arguments) || this;
  }
  return __extends(n, e), n.prototype.construct = function(t3, e2, r) {
    return new n(t3, e2, r);
  }, n.prototype.canonicalString = function() {
    return this.toArray().join("/");
  }, n.prototype.toString = function() {
    return this.canonicalString();
  }, n.fromString = function() {
    for (var t3 = [], e2 = 0; e2 < arguments.length; e2++)
      t3[e2] = arguments[e2];
    for (var r = [], i = 0, o = t3; i < o.length; i++) {
      var s = o[i];
      if (s.indexOf("//") >= 0)
        throw new D2(N2.INVALID_ARGUMENT, "Invalid segment (" + s + "). Paths must not contain // in them.");
      r.push.apply(r, s.split("/").filter(function(t4) {
        return t4.length > 0;
      }));
    }
    return new n(r);
  }, n.emptyPath = function() {
    return new n([]);
  }, n;
}(W2);
var Y2 = /^[_a-zA-Z][_a-zA-Z0-9]*$/;
var $ = function(e) {
  function n() {
    return e !== null && e.apply(this, arguments) || this;
  }
  return __extends(n, e), n.prototype.construct = function(t3, e2, r) {
    return new n(t3, e2, r);
  }, n.isValidIdentifier = function(t3) {
    return Y2.test(t3);
  }, n.prototype.canonicalString = function() {
    return this.toArray().map(function(t3) {
      return t3 = t3.replace(/\\/g, "\\\\").replace(/`/g, "\\`"), n.isValidIdentifier(t3) || (t3 = "`" + t3 + "`"), t3;
    }).join(".");
  }, n.prototype.toString = function() {
    return this.canonicalString();
  }, n.prototype.isKeyField = function() {
    return this.length === 1 && this.get(0) === "__name__";
  }, n.keyField = function() {
    return new n(["__name__"]);
  }, n.fromServerFormat = function(t3) {
    for (var e2 = [], r = "", i = 0, o = function() {
      if (r.length === 0)
        throw new D2(N2.INVALID_ARGUMENT, "Invalid field path (" + t3 + "). Paths must not be empty, begin with '.', end with '.', or contain '..'");
      e2.push(r), r = "";
    }, s = false; i < t3.length; ) {
      var u = t3[i];
      if (u === "\\") {
        if (i + 1 === t3.length)
          throw new D2(N2.INVALID_ARGUMENT, "Path has trailing escape character: " + t3);
        var a = t3[i + 1];
        if (a !== "\\" && a !== "." && a !== "`")
          throw new D2(N2.INVALID_ARGUMENT, "Path has invalid escape sequence: " + t3);
        r += a, i += 2;
      } else
        u === "`" ? (s = !s, i++) : u !== "." || s ? (r += u, i++) : (o(), i++);
    }
    if (o(), s)
      throw new D2(N2.INVALID_ARGUMENT, "Unterminated ` in path: " + t3);
    return new n(e2);
  }, n.emptyPath = function() {
    return new n([]);
  }, n;
}(W2);
var X2 = function() {
  function t3(t4) {
    this.fields = t4, t4.sort($.comparator);
  }
  return t3.prototype.covers = function(t4) {
    for (var e = 0, n = this.fields; e < n.length; e++) {
      if (n[e].isPrefixOf(t4))
        return true;
    }
    return false;
  }, t3.prototype.isEqual = function(t4) {
    return U2(this.fields, t4.fields, function(t5, e) {
      return t5.isEqual(e);
    });
  }, t3;
}();
var J2 = function() {
  function t3(t4) {
    this.binaryString = t4;
  }
  return t3.fromBase64String = function(e) {
    return new t3(atob(e));
  }, t3.fromUint8Array = function(e) {
    return new t3(function(t4) {
      for (var e2 = "", n = 0; n < t4.length; ++n)
        e2 += String.fromCharCode(t4[n]);
      return e2;
    }(e));
  }, t3.prototype.toBase64 = function() {
    return t4 = this.binaryString, btoa(t4);
    var t4;
  }, t3.prototype.toUint8Array = function() {
    return function(t4) {
      for (var e = new Uint8Array(t4.length), n = 0; n < t4.length; n++)
        e[n] = t4.charCodeAt(n);
      return e;
    }(this.binaryString);
  }, t3.prototype.approximateByteSize = function() {
    return 2 * this.binaryString.length;
  }, t3.prototype.compareTo = function(t4) {
    return q2(this.binaryString, t4.binaryString);
  }, t3.prototype.isEqual = function(t4) {
    return this.binaryString === t4.binaryString;
  }, t3;
}();
J2.EMPTY_BYTE_STRING = new J2("");
var Z2 = new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);
function tt(t3) {
  if (P2(!!t3), typeof t3 == "string") {
    var e = 0, n = Z2.exec(t3);
    if (P2(!!n), n[1]) {
      var r = n[1];
      r = (r + "000000000").substr(0, 9), e = Number(r);
    }
    var i = new Date(t3);
    return {
      seconds: Math.floor(i.getTime() / 1e3),
      nanos: e
    };
  }
  return {
    seconds: et(t3.seconds),
    nanos: et(t3.nanos)
  };
}
function et(t3) {
  return typeof t3 == "number" ? t3 : typeof t3 == "string" ? Number(t3) : 0;
}
function nt(t3) {
  return typeof t3 == "string" ? J2.fromBase64String(t3) : J2.fromUint8Array(t3);
}
function rt(t3) {
  var e, n;
  return ((n = (((e = t3 == null ? void 0 : t3.mapValue) === null || e === void 0 ? void 0 : e.fields) || {}).__type__) === null || n === void 0 ? void 0 : n.stringValue) === "server_timestamp";
}
function it(t3) {
  var e = t3.mapValue.fields.__previous_value__;
  return rt(e) ? it(e) : e;
}
function ot(t3) {
  var e = tt(t3.mapValue.fields.__local_write_time__.timestampValue);
  return new j(e.seconds, e.nanos);
}
function st(t3) {
  return t3 == null;
}
function ut(t3) {
  return t3 === 0 && 1 / t3 == -1 / 0;
}
function at(t3) {
  return typeof t3 == "number" && Number.isInteger(t3) && !ut(t3) && t3 <= Number.MAX_SAFE_INTEGER && t3 >= Number.MIN_SAFE_INTEGER;
}
var ct = function() {
  function t3(t4) {
    this.path = t4;
  }
  return t3.fromPath = function(e) {
    return new t3(H2.fromString(e));
  }, t3.fromName = function(e) {
    return new t3(H2.fromString(e).popFirst(5));
  }, t3.prototype.hasCollectionId = function(t4) {
    return this.path.length >= 2 && this.path.get(this.path.length - 2) === t4;
  }, t3.prototype.isEqual = function(t4) {
    return t4 !== null && H2.comparator(this.path, t4.path) === 0;
  }, t3.prototype.toString = function() {
    return this.path.toString();
  }, t3.comparator = function(t4, e) {
    return H2.comparator(t4.path, e.path);
  }, t3.isDocumentKey = function(t4) {
    return t4.length % 2 == 0;
  }, t3.fromSegments = function(e) {
    return new t3(new H2(e.slice()));
  }, t3;
}();
function ht(t3) {
  return "nullValue" in t3 ? 0 : "booleanValue" in t3 ? 1 : "integerValue" in t3 || "doubleValue" in t3 ? 2 : "timestampValue" in t3 ? 3 : "stringValue" in t3 ? 5 : "bytesValue" in t3 ? 6 : "referenceValue" in t3 ? 7 : "geoPointValue" in t3 ? 8 : "arrayValue" in t3 ? 9 : "mapValue" in t3 ? rt(t3) ? 4 : 10 : O2();
}
function ft(t3, e) {
  var n = ht(t3);
  if (n !== ht(e))
    return false;
  switch (n) {
    case 0:
      return true;
    case 1:
      return t3.booleanValue === e.booleanValue;
    case 4:
      return ot(t3).isEqual(ot(e));
    case 3:
      return function(t4, e2) {
        if (typeof t4.timestampValue == "string" && typeof e2.timestampValue == "string" && t4.timestampValue.length === e2.timestampValue.length)
          return t4.timestampValue === e2.timestampValue;
        var n2 = tt(t4.timestampValue), r = tt(e2.timestampValue);
        return n2.seconds === r.seconds && n2.nanos === r.nanos;
      }(t3, e);
    case 5:
      return t3.stringValue === e.stringValue;
    case 6:
      return function(t4, e2) {
        return nt(t4.bytesValue).isEqual(nt(e2.bytesValue));
      }(t3, e);
    case 7:
      return t3.referenceValue === e.referenceValue;
    case 8:
      return function(t4, e2) {
        return et(t4.geoPointValue.latitude) === et(e2.geoPointValue.latitude) && et(t4.geoPointValue.longitude) === et(e2.geoPointValue.longitude);
      }(t3, e);
    case 2:
      return function(t4, e2) {
        if ("integerValue" in t4 && "integerValue" in e2)
          return et(t4.integerValue) === et(e2.integerValue);
        if ("doubleValue" in t4 && "doubleValue" in e2) {
          var n2 = et(t4.doubleValue), r = et(e2.doubleValue);
          return n2 === r ? ut(n2) === ut(r) : isNaN(n2) && isNaN(r);
        }
        return false;
      }(t3, e);
    case 9:
      return U2(t3.arrayValue.values || [], e.arrayValue.values || [], ft);
    case 10:
      return function(t4, e2) {
        var n2 = t4.mapValue.fields || {}, r = e2.mapValue.fields || {};
        if (Q2(n2) !== Q2(r))
          return false;
        for (var i in n2)
          if (n2.hasOwnProperty(i) && (r[i] === void 0 || !ft(n2[i], r[i])))
            return false;
        return true;
      }(t3, e);
    default:
      return O2();
  }
}
function lt(t3, e) {
  return (t3.values || []).find(function(t4) {
    return ft(t4, e);
  }) !== void 0;
}
function dt(t3, e) {
  var n = ht(t3), r = ht(e);
  if (n !== r)
    return q2(n, r);
  switch (n) {
    case 0:
      return 0;
    case 1:
      return q2(t3.booleanValue, e.booleanValue);
    case 2:
      return function(t4, e2) {
        var n2 = et(t4.integerValue || t4.doubleValue), r2 = et(e2.integerValue || e2.doubleValue);
        return n2 < r2 ? -1 : n2 > r2 ? 1 : n2 === r2 ? 0 : isNaN(n2) ? isNaN(r2) ? 0 : -1 : 1;
      }(t3, e);
    case 3:
      return pt(t3.timestampValue, e.timestampValue);
    case 4:
      return pt(ot(t3), ot(e));
    case 5:
      return q2(t3.stringValue, e.stringValue);
    case 6:
      return function(t4, e2) {
        var n2 = nt(t4), r2 = nt(e2);
        return n2.compareTo(r2);
      }(t3.bytesValue, e.bytesValue);
    case 7:
      return function(t4, e2) {
        for (var n2 = t4.split("/"), r2 = e2.split("/"), i = 0; i < n2.length && i < r2.length; i++) {
          var o = q2(n2[i], r2[i]);
          if (o !== 0)
            return o;
        }
        return q2(n2.length, r2.length);
      }(t3.referenceValue, e.referenceValue);
    case 8:
      return function(t4, e2) {
        var n2 = q2(et(t4.latitude), et(e2.latitude));
        return n2 !== 0 ? n2 : q2(et(t4.longitude), et(e2.longitude));
      }(t3.geoPointValue, e.geoPointValue);
    case 9:
      return function(t4, e2) {
        for (var n2 = t4.values || [], r2 = e2.values || [], i = 0; i < n2.length && i < r2.length; ++i) {
          var o = dt(n2[i], r2[i]);
          if (o)
            return o;
        }
        return q2(n2.length, r2.length);
      }(t3.arrayValue, e.arrayValue);
    case 10:
      return function(t4, e2) {
        var n2 = t4.fields || {}, r2 = Object.keys(n2), i = e2.fields || {}, o = Object.keys(i);
        r2.sort(), o.sort();
        for (var s = 0; s < r2.length && s < o.length; ++s) {
          var u = q2(r2[s], o[s]);
          if (u !== 0)
            return u;
          var a = dt(n2[r2[s]], i[o[s]]);
          if (a !== 0)
            return a;
        }
        return q2(r2.length, o.length);
      }(t3.mapValue, e.mapValue);
    default:
      throw O2();
  }
}
function pt(t3, e) {
  if (typeof t3 == "string" && typeof e == "string" && t3.length === e.length)
    return q2(t3, e);
  var n = tt(t3), r = tt(e), i = q2(n.seconds, r.seconds);
  return i !== 0 ? i : q2(n.nanos, r.nanos);
}
function yt(t3) {
  return vt(t3);
}
function vt(t3) {
  return "nullValue" in t3 ? "null" : "booleanValue" in t3 ? "" + t3.booleanValue : "integerValue" in t3 ? "" + t3.integerValue : "doubleValue" in t3 ? "" + t3.doubleValue : "timestampValue" in t3 ? function(t4) {
    var e2 = tt(t4);
    return "time(" + e2.seconds + "," + e2.nanos + ")";
  }(t3.timestampValue) : "stringValue" in t3 ? t3.stringValue : "bytesValue" in t3 ? nt(t3.bytesValue).toBase64() : "referenceValue" in t3 ? (n = t3.referenceValue, ct.fromName(n).toString()) : "geoPointValue" in t3 ? "geo(" + (e = t3.geoPointValue).latitude + "," + e.longitude + ")" : "arrayValue" in t3 ? function(t4) {
    for (var e2 = "[", n2 = true, r = 0, i = t4.values || []; r < i.length; r++) {
      n2 ? n2 = false : e2 += ",", e2 += vt(i[r]);
    }
    return e2 + "]";
  }(t3.arrayValue) : "mapValue" in t3 ? function(t4) {
    for (var e2 = "{", n2 = true, r = 0, i = Object.keys(t4.fields || {}).sort(); r < i.length; r++) {
      var o = i[r];
      n2 ? n2 = false : e2 += ",", e2 += o + ":" + vt(t4.fields[o]);
    }
    return e2 + "}";
  }(t3.mapValue) : O2();
  var e, n;
}
function mt(t3, e) {
  return {
    referenceValue: "projects/" + t3.projectId + "/databases/" + t3.database + "/documents/" + e.path.canonicalString()
  };
}
function gt(t3) {
  return !!t3 && "integerValue" in t3;
}
function wt(t3) {
  return !!t3 && "arrayValue" in t3;
}
function bt(t3) {
  return !!t3 && "nullValue" in t3;
}
function It(t3) {
  return !!t3 && "doubleValue" in t3 && isNaN(Number(t3.doubleValue));
}
function Tt(t3) {
  return !!t3 && "mapValue" in t3;
}
function Et(t3) {
  if (t3.geoPointValue)
    return {
      geoPointValue: Object.assign({}, t3.geoPointValue)
    };
  if (t3.timestampValue && typeof t3.timestampValue == "object")
    return {
      timestampValue: Object.assign({}, t3.timestampValue)
    };
  if (t3.mapValue) {
    var e = {
      mapValue: {
        fields: {}
      }
    };
    return G(t3.mapValue.fields, function(t4, n2) {
      return e.mapValue.fields[t4] = Et(n2);
    }), e;
  }
  if (t3.arrayValue) {
    for (var n = {
      arrayValue: {
        values: []
      }
    }, r = 0; r < (t3.arrayValue.values || []).length; ++r)
      n.arrayValue.values[r] = Et(t3.arrayValue.values[r]);
    return n;
  }
  return Object.assign({}, t3);
}
var _t = function() {
  function t3(t4) {
    this.value = t4;
  }
  return t3.empty = function() {
    return new t3({
      mapValue: {}
    });
  }, t3.prototype.field = function(t4) {
    if (t4.isEmpty())
      return this.value;
    for (var e = this.value, n = 0; n < t4.length - 1; ++n)
      if (!Tt(e = (e.mapValue.fields || {})[t4.get(n)]))
        return null;
    return (e = (e.mapValue.fields || {})[t4.lastSegment()]) || null;
  }, t3.prototype.set = function(t4, e) {
    this.getFieldsMap(t4.popLast())[t4.lastSegment()] = Et(e);
  }, t3.prototype.setAll = function(t4) {
    var e = this, n = $.emptyPath(), r = {}, i = [];
    t4.forEach(function(t5, o2) {
      if (!n.isImmediateParentOf(o2)) {
        var s = e.getFieldsMap(n);
        e.applyChanges(s, r, i), r = {}, i = [], n = o2.popLast();
      }
      t5 ? r[o2.lastSegment()] = Et(t5) : i.push(o2.lastSegment());
    });
    var o = this.getFieldsMap(n);
    this.applyChanges(o, r, i);
  }, t3.prototype.delete = function(t4) {
    var e = this.field(t4.popLast());
    Tt(e) && e.mapValue.fields && delete e.mapValue.fields[t4.lastSegment()];
  }, t3.prototype.isEqual = function(t4) {
    return ft(this.value, t4.value);
  }, t3.prototype.getFieldsMap = function(t4) {
    var e = this.value;
    e.mapValue.fields || (e.mapValue = {
      fields: {}
    });
    for (var n = 0; n < t4.length; ++n) {
      var r = e.mapValue.fields[t4.get(n)];
      Tt(r) && r.mapValue.fields || (r = {
        mapValue: {
          fields: {}
        }
      }, e.mapValue.fields[t4.get(n)] = r), e = r;
    }
    return e.mapValue.fields;
  }, t3.prototype.applyChanges = function(t4, e, n) {
    G(e, function(e2, n2) {
      return t4[e2] = n2;
    });
    for (var r = 0, i = n; r < i.length; r++) {
      var o = i[r];
      delete t4[o];
    }
  }, t3.prototype.clone = function() {
    return new t3(Et(this.value));
  }, t3;
}();
function St(t3) {
  var e = [];
  return G(t3.fields, function(t4, n) {
    var r = new $([t4]);
    if (Tt(n)) {
      var i = St(n.mapValue).fields;
      if (i.length === 0)
        e.push(r);
      else
        for (var o = 0, s = i; o < s.length; o++) {
          var u = s[o];
          e.push(r.child(u));
        }
    } else
      e.push(r);
  }), new X2(e);
}
var Nt = function() {
  function t3(t4, e, n, r, i) {
    this.key = t4, this.documentType = e, this.version = n, this.data = r, this.documentState = i;
  }
  return t3.newInvalidDocument = function(e) {
    return new t3(e, 0, K2.min(), _t.empty(), 0);
  }, t3.newFoundDocument = function(e, n, r) {
    return new t3(e, 1, n, r, 0);
  }, t3.newNoDocument = function(e, n) {
    return new t3(e, 2, n, _t.empty(), 0);
  }, t3.newUnknownDocument = function(e, n) {
    return new t3(e, 3, n, _t.empty(), 2);
  }, t3.prototype.convertToFoundDocument = function(t4, e) {
    return this.version = t4, this.documentType = 1, this.data = e, this.documentState = 0, this;
  }, t3.prototype.convertToNoDocument = function(t4) {
    return this.version = t4, this.documentType = 2, this.data = _t.empty(), this.documentState = 0, this;
  }, t3.prototype.convertToUnknownDocument = function(t4) {
    return this.version = t4, this.documentType = 3, this.data = _t.empty(), this.documentState = 2, this;
  }, t3.prototype.setHasCommittedMutations = function() {
    return this.documentState = 2, this;
  }, t3.prototype.setHasLocalMutations = function() {
    return this.documentState = 1, this;
  }, Object.defineProperty(t3.prototype, "hasLocalMutations", {
    get: function() {
      return this.documentState === 1;
    },
    enumerable: false,
    configurable: true
  }), Object.defineProperty(t3.prototype, "hasCommittedMutations", {
    get: function() {
      return this.documentState === 2;
    },
    enumerable: false,
    configurable: true
  }), Object.defineProperty(t3.prototype, "hasPendingWrites", {
    get: function() {
      return this.hasLocalMutations || this.hasCommittedMutations;
    },
    enumerable: false,
    configurable: true
  }), t3.prototype.isValidDocument = function() {
    return this.documentType !== 0;
  }, t3.prototype.isFoundDocument = function() {
    return this.documentType === 1;
  }, t3.prototype.isNoDocument = function() {
    return this.documentType === 2;
  }, t3.prototype.isUnknownDocument = function() {
    return this.documentType === 3;
  }, t3.prototype.isEqual = function(e) {
    return e instanceof t3 && this.key.isEqual(e.key) && this.version.isEqual(e.version) && this.documentType === e.documentType && this.documentState === e.documentState && this.data.isEqual(e.data);
  }, t3.prototype.clone = function() {
    return new t3(this.key, this.documentType, this.version, this.data.clone(), this.documentState);
  }, t3.prototype.toString = function() {
    return "Document(" + this.key + ", " + this.version + ", " + JSON.stringify(this.data.value) + ", {documentType: " + this.documentType + "}), {documentState: " + this.documentState + "})";
  }, t3;
}();
var Dt = function(t3, e, n, r, i, o, s) {
  e === void 0 && (e = null), n === void 0 && (n = []), r === void 0 && (r = []), i === void 0 && (i = null), o === void 0 && (o = null), s === void 0 && (s = null), this.path = t3, this.collectionGroup = e, this.orderBy = n, this.filters = r, this.limit = i, this.startAt = o, this.endAt = s, this.h = null;
};
function At(t3, e, n, r, i, o, s) {
  return e === void 0 && (e = null), n === void 0 && (n = []), r === void 0 && (r = []), i === void 0 && (i = null), o === void 0 && (o = null), s === void 0 && (s = null), new Dt(t3, e, n, r, i, o, s);
}
function kt(t3) {
  var e = F2(t3);
  if (e.h === null) {
    var n = e.path.canonicalString();
    e.collectionGroup !== null && (n += "|cg:" + e.collectionGroup), n += "|f:", n += e.filters.map(function(t4) {
      return function(t5) {
        return t5.field.canonicalString() + t5.op.toString() + yt(t5.value);
      }(t4);
    }).join(","), n += "|ob:", n += e.orderBy.map(function(t4) {
      return function(t5) {
        return t5.field.canonicalString() + t5.dir;
      }(t4);
    }).join(","), st(e.limit) || (n += "|l:", n += e.limit), e.startAt && (n += "|lb:", n += jt(e.startAt)), e.endAt && (n += "|ub:", n += jt(e.endAt)), e.h = n;
  }
  return e.h;
}
function Ct(t3, e) {
  if (t3.limit !== e.limit)
    return false;
  if (t3.orderBy.length !== e.orderBy.length)
    return false;
  for (var n = 0; n < t3.orderBy.length; n++)
    if (!Qt(t3.orderBy[n], e.orderBy[n]))
      return false;
  if (t3.filters.length !== e.filters.length)
    return false;
  for (var r = 0; r < t3.filters.length; r++)
    if (i = t3.filters[r], o = e.filters[r], i.op !== o.op || !i.field.isEqual(o.field) || !ft(i.value, o.value))
      return false;
  var i, o;
  return t3.collectionGroup === e.collectionGroup && !!t3.path.isEqual(e.path) && !!zt(t3.startAt, e.startAt) && zt(t3.endAt, e.endAt);
}
function xt(t3) {
  return ct.isDocumentKey(t3.path) && t3.collectionGroup === null && t3.filters.length === 0;
}
var Rt = function(e) {
  function n(t3, n2, r) {
    var i = this;
    return (i = e.call(this) || this).field = t3, i.op = n2, i.value = r, i;
  }
  return __extends(n, e), n.create = function(t3, e2, r) {
    return t3.isKeyField() ? e2 === "in" || e2 === "not-in" ? this.l(t3, e2, r) : new Lt(t3, e2, r) : e2 === "array-contains" ? new Mt(t3, r) : e2 === "in" ? new Vt(t3, r) : e2 === "not-in" ? new qt(t3, r) : e2 === "array-contains-any" ? new Ut(t3, r) : new n(t3, e2, r);
  }, n.l = function(t3, e2, n2) {
    return e2 === "in" ? new Ot(t3, n2) : new Pt(t3, n2);
  }, n.prototype.matches = function(t3) {
    var e2 = t3.data.field(this.field);
    return this.op === "!=" ? e2 !== null && this.m(dt(e2, this.value)) : e2 !== null && ht(this.value) === ht(e2) && this.m(dt(e2, this.value));
  }, n.prototype.m = function(t3) {
    switch (this.op) {
      case "<":
        return t3 < 0;
      case "<=":
        return t3 <= 0;
      case "==":
        return t3 === 0;
      case "!=":
        return t3 !== 0;
      case ">":
        return t3 > 0;
      case ">=":
        return t3 >= 0;
      default:
        return O2();
    }
  }, n.prototype.g = function() {
    return ["<", "<=", ">", ">=", "!=", "not-in"].indexOf(this.op) >= 0;
  }, n;
}(function() {
});
var Lt = function(e) {
  function n(t3, n2, r) {
    var i = this;
    return (i = e.call(this, t3, n2, r) || this).key = ct.fromName(r.referenceValue), i;
  }
  return __extends(n, e), n.prototype.matches = function(t3) {
    var e2 = ct.comparator(t3.key, this.key);
    return this.m(e2);
  }, n;
}(Rt);
var Ot = function(e) {
  function n(t3, n2) {
    var r = this;
    return (r = e.call(this, t3, "in", n2) || this).keys = Ft("in", n2), r;
  }
  return __extends(n, e), n.prototype.matches = function(t3) {
    return this.keys.some(function(e2) {
      return e2.isEqual(t3.key);
    });
  }, n;
}(Rt);
var Pt = function(e) {
  function n(t3, n2) {
    var r = this;
    return (r = e.call(this, t3, "not-in", n2) || this).keys = Ft("not-in", n2), r;
  }
  return __extends(n, e), n.prototype.matches = function(t3) {
    return !this.keys.some(function(e2) {
      return e2.isEqual(t3.key);
    });
  }, n;
}(Rt);
function Ft(t3, e) {
  var n;
  return (((n = e.arrayValue) === null || n === void 0 ? void 0 : n.values) || []).map(function(t4) {
    return ct.fromName(t4.referenceValue);
  });
}
var Mt = function(e) {
  function n(t3, n2) {
    return e.call(this, t3, "array-contains", n2) || this;
  }
  return __extends(n, e), n.prototype.matches = function(t3) {
    var e2 = t3.data.field(this.field);
    return wt(e2) && lt(e2.arrayValue, this.value);
  }, n;
}(Rt);
var Vt = function(e) {
  function n(t3, n2) {
    return e.call(this, t3, "in", n2) || this;
  }
  return __extends(n, e), n.prototype.matches = function(t3) {
    var e2 = t3.data.field(this.field);
    return e2 !== null && lt(this.value.arrayValue, e2);
  }, n;
}(Rt);
var qt = function(e) {
  function n(t3, n2) {
    return e.call(this, t3, "not-in", n2) || this;
  }
  return __extends(n, e), n.prototype.matches = function(t3) {
    if (lt(this.value.arrayValue, {
      nullValue: "NULL_VALUE"
    }))
      return false;
    var e2 = t3.data.field(this.field);
    return e2 !== null && !lt(this.value.arrayValue, e2);
  }, n;
}(Rt);
var Ut = function(e) {
  function n(t3, n2) {
    return e.call(this, t3, "array-contains-any", n2) || this;
  }
  return __extends(n, e), n.prototype.matches = function(t3) {
    var e2 = this, n2 = t3.data.field(this.field);
    return !(!wt(n2) || !n2.arrayValue.values) && n2.arrayValue.values.some(function(t4) {
      return lt(e2.value.arrayValue, t4);
    });
  }, n;
}(Rt);
var Bt = function(t3, e) {
  this.position = t3, this.before = e;
};
function jt(t3) {
  return (t3.before ? "b" : "a") + ":" + t3.position.map(function(t4) {
    return yt(t4);
  }).join(",");
}
var Kt = function(t3, e) {
  e === void 0 && (e = "asc"), this.field = t3, this.dir = e;
};
function Qt(t3, e) {
  return t3.dir === e.dir && t3.field.isEqual(e.field);
}
function Gt(t3, e, n) {
  for (var r = 0, i = 0; i < t3.position.length; i++) {
    var o = e[i], s = t3.position[i];
    if (r = o.field.isKeyField() ? ct.comparator(ct.fromName(s.referenceValue), n.key) : dt(s, n.data.field(o.field)), o.dir === "desc" && (r *= -1), r !== 0)
      break;
  }
  return t3.before ? r <= 0 : r < 0;
}
function zt(t3, e) {
  if (t3 === null)
    return e === null;
  if (e === null)
    return false;
  if (t3.before !== e.before || t3.position.length !== e.position.length)
    return false;
  for (var n = 0; n < t3.position.length; n++)
    if (!ft(t3.position[n], e.position[n]))
      return false;
  return true;
}
var Wt = function(t3, e, n, r, i, o, s, u) {
  e === void 0 && (e = null), n === void 0 && (n = []), r === void 0 && (r = []), i === void 0 && (i = null), o === void 0 && (o = "F"), s === void 0 && (s = null), u === void 0 && (u = null), this.path = t3, this.collectionGroup = e, this.explicitOrderBy = n, this.filters = r, this.limit = i, this.limitType = o, this.startAt = s, this.endAt = u, this.p = null, this.T = null, this.startAt, this.endAt;
};
function Ht(t3, e, n, r, i, o, s, u) {
  return new Wt(t3, e, n, r, i, o, s, u);
}
function Yt(t3) {
  return new Wt(t3);
}
function $t(t3) {
  return !st(t3.limit) && t3.limitType === "F";
}
function Xt(t3) {
  return !st(t3.limit) && t3.limitType === "L";
}
function Jt(t3) {
  return t3.explicitOrderBy.length > 0 ? t3.explicitOrderBy[0].field : null;
}
function Zt(t3) {
  for (var e = 0, n = t3.filters; e < n.length; e++) {
    var r = n[e];
    if (r.g())
      return r.field;
  }
  return null;
}
function te(t3) {
  return t3.collectionGroup !== null;
}
function ee(t3) {
  var e = F2(t3);
  if (e.p === null) {
    e.p = [];
    var n = Zt(e), r = Jt(e);
    if (n !== null && r === null)
      n.isKeyField() || e.p.push(new Kt(n)), e.p.push(new Kt($.keyField(), "asc"));
    else {
      for (var i = false, o = 0, s = e.explicitOrderBy; o < s.length; o++) {
        var u = s[o];
        e.p.push(u), u.field.isKeyField() && (i = true);
      }
      if (!i) {
        var a = e.explicitOrderBy.length > 0 ? e.explicitOrderBy[e.explicitOrderBy.length - 1].dir : "asc";
        e.p.push(new Kt($.keyField(), a));
      }
    }
  }
  return e.p;
}
function ne(t3) {
  var e = F2(t3);
  if (!e.T)
    if (e.limitType === "F")
      e.T = At(e.path, e.collectionGroup, ee(e), e.filters, e.limit, e.startAt, e.endAt);
    else {
      for (var n = [], r = 0, i = ee(e); r < i.length; r++) {
        var o = i[r], s = o.dir === "desc" ? "asc" : "desc";
        n.push(new Kt(o.field, s));
      }
      var u = e.endAt ? new Bt(e.endAt.position, !e.endAt.before) : null, a = e.startAt ? new Bt(e.startAt.position, !e.startAt.before) : null;
      e.T = At(e.path, e.collectionGroup, n, e.filters, e.limit, u, a);
    }
  return e.T;
}
function re(t3, e, n) {
  return new Wt(t3.path, t3.collectionGroup, t3.explicitOrderBy.slice(), t3.filters.slice(), e, n, t3.startAt, t3.endAt);
}
function ie(t3, e) {
  return Ct(ne(t3), ne(e)) && t3.limitType === e.limitType;
}
function oe(t3) {
  return kt(ne(t3)) + "|lt:" + t3.limitType;
}
function se(t3) {
  return "Query(target=" + function(t4) {
    var e = t4.path.canonicalString();
    return t4.collectionGroup !== null && (e += " collectionGroup=" + t4.collectionGroup), t4.filters.length > 0 && (e += ", filters: [" + t4.filters.map(function(t5) {
      return (e2 = t5).field.canonicalString() + " " + e2.op + " " + yt(e2.value);
      var e2;
    }).join(", ") + "]"), st(t4.limit) || (e += ", limit: " + t4.limit), t4.orderBy.length > 0 && (e += ", orderBy: [" + t4.orderBy.map(function(t5) {
      return function(t6) {
        return t6.field.canonicalString() + " (" + t6.dir + ")";
      }(t5);
    }).join(", ") + "]"), t4.startAt && (e += ", startAt: " + jt(t4.startAt)), t4.endAt && (e += ", endAt: " + jt(t4.endAt)), "Target(" + e + ")";
  }(ne(t3)) + "; limitType=" + t3.limitType + ")";
}
function ue(t3, e) {
  return e.isFoundDocument() && function(t4, e2) {
    var n = e2.key.path;
    return t4.collectionGroup !== null ? e2.key.hasCollectionId(t4.collectionGroup) && t4.path.isPrefixOf(n) : ct.isDocumentKey(t4.path) ? t4.path.isEqual(n) : t4.path.isImmediateParentOf(n);
  }(t3, e) && function(t4, e2) {
    for (var n = 0, r = t4.explicitOrderBy; n < r.length; n++) {
      var i = r[n];
      if (!i.field.isKeyField() && e2.data.field(i.field) === null)
        return false;
    }
    return true;
  }(t3, e) && function(t4, e2) {
    for (var n = 0, r = t4.filters; n < r.length; n++) {
      if (!r[n].matches(e2))
        return false;
    }
    return true;
  }(t3, e) && function(t4, e2) {
    return !(t4.startAt && !Gt(t4.startAt, ee(t4), e2)) && (!t4.endAt || !Gt(t4.endAt, ee(t4), e2));
  }(t3, e);
}
function ae(t3) {
  return function(e, n) {
    for (var r = false, i = 0, o = ee(t3); i < o.length; i++) {
      var s = o[i], u = ce(s, e, n);
      if (u !== 0)
        return u;
      r = r || s.field.isKeyField();
    }
    return 0;
  };
}
function ce(t3, e, n) {
  var r = t3.field.isKeyField() ? ct.comparator(e.key, n.key) : function(t4, e2, n2) {
    var r2 = e2.data.field(t4), i = n2.data.field(t4);
    return r2 !== null && i !== null ? dt(r2, i) : O2();
  }(t3.field, e, n);
  switch (t3.dir) {
    case "asc":
      return r;
    case "desc":
      return -1 * r;
    default:
      return O2();
  }
}
function he(t3, e) {
  if (t3.I) {
    if (isNaN(e))
      return {
        doubleValue: "NaN"
      };
    if (e === 1 / 0)
      return {
        doubleValue: "Infinity"
      };
    if (e === -1 / 0)
      return {
        doubleValue: "-Infinity"
      };
  }
  return {
    doubleValue: ut(e) ? "-0" : e
  };
}
function fe(t3) {
  return {
    integerValue: "" + t3
  };
}
function le(t3, e) {
  return at(e) ? fe(e) : he(t3, e);
}
var de = function() {
  this._ = void 0;
};
function pe(t3, e, n) {
  return t3 instanceof me ? function(t4, e2) {
    var n2 = {
      fields: {
        __type__: {
          stringValue: "server_timestamp"
        },
        __local_write_time__: {
          timestampValue: {
            seconds: t4.seconds,
            nanos: t4.nanoseconds
          }
        }
      }
    };
    return e2 && (n2.fields.__previous_value__ = e2), {
      mapValue: n2
    };
  }(n, e) : t3 instanceof ge ? we(t3, e) : t3 instanceof be ? Ie(t3, e) : function(t4, e2) {
    var n2 = ve(t4, e2), r = Ee(n2) + Ee(t4.A);
    return gt(n2) && gt(t4.A) ? fe(r) : he(t4.R, r);
  }(t3, e);
}
function ye(t3, e, n) {
  return t3 instanceof ge ? we(t3, e) : t3 instanceof be ? Ie(t3, e) : n;
}
function ve(t3, e) {
  return t3 instanceof Te ? gt(n = e) || function(t4) {
    return !!t4 && "doubleValue" in t4;
  }(n) ? e : {
    integerValue: 0
  } : null;
  var n;
}
var me = function(e) {
  function n() {
    return e !== null && e.apply(this, arguments) || this;
  }
  return __extends(n, e), n;
}(de);
var ge = function(e) {
  function n(t3) {
    var n2 = this;
    return (n2 = e.call(this) || this).elements = t3, n2;
  }
  return __extends(n, e), n;
}(de);
function we(t3, e) {
  for (var n = _e(e), r = function(t4) {
    n.some(function(e2) {
      return ft(e2, t4);
    }) || n.push(t4);
  }, i = 0, o = t3.elements; i < o.length; i++) {
    r(o[i]);
  }
  return {
    arrayValue: {
      values: n
    }
  };
}
var be = function(e) {
  function n(t3) {
    var n2 = this;
    return (n2 = e.call(this) || this).elements = t3, n2;
  }
  return __extends(n, e), n;
}(de);
function Ie(t3, e) {
  for (var n = _e(e), r = function(t4) {
    n = n.filter(function(e2) {
      return !ft(e2, t4);
    });
  }, i = 0, o = t3.elements; i < o.length; i++) {
    r(o[i]);
  }
  return {
    arrayValue: {
      values: n
    }
  };
}
var Te = function(e) {
  function n(t3, n2) {
    var r = this;
    return (r = e.call(this) || this).R = t3, r.A = n2, r;
  }
  return __extends(n, e), n;
}(de);
function Ee(t3) {
  return et(t3.integerValue || t3.doubleValue);
}
function _e(t3) {
  return wt(t3) && t3.arrayValue.values ? t3.arrayValue.values.slice() : [];
}
var Se = function(t3, e) {
  this.field = t3, this.transform = e;
};
var Ne = function(t3, e) {
  this.version = t3, this.transformResults = e;
};
var De = function() {
  function t3(t4, e) {
    this.updateTime = t4, this.exists = e;
  }
  return t3.none = function() {
    return new t3();
  }, t3.exists = function(e) {
    return new t3(void 0, e);
  }, t3.updateTime = function(e) {
    return new t3(e);
  }, Object.defineProperty(t3.prototype, "isNone", {
    get: function() {
      return this.updateTime === void 0 && this.exists === void 0;
    },
    enumerable: false,
    configurable: true
  }), t3.prototype.isEqual = function(t4) {
    return this.exists === t4.exists && (this.updateTime ? !!t4.updateTime && this.updateTime.isEqual(t4.updateTime) : !t4.updateTime);
  }, t3;
}();
function Ae(t3, e) {
  return t3.updateTime !== void 0 ? e.isFoundDocument() && e.version.isEqual(t3.updateTime) : t3.exists === void 0 || t3.exists === e.isFoundDocument();
}
var ke = function() {
};
function Ce(t3, e, n) {
  t3 instanceof Pe ? function(t4, e2, n2) {
    var r = t4.value.clone(), i = Ve(t4.fieldTransforms, e2, n2.transformResults);
    r.setAll(i), e2.convertToFoundDocument(n2.version, r).setHasCommittedMutations();
  }(t3, e, n) : t3 instanceof Fe ? function(t4, e2, n2) {
    if (Ae(t4.precondition, e2)) {
      var r = Ve(t4.fieldTransforms, e2, n2.transformResults), i = e2.data;
      i.setAll(Me(t4)), i.setAll(r), e2.convertToFoundDocument(n2.version, i).setHasCommittedMutations();
    } else
      e2.convertToUnknownDocument(n2.version);
  }(t3, e, n) : function(t4, e2, n2) {
    e2.convertToNoDocument(n2.version).setHasCommittedMutations();
  }(0, e, n);
}
function xe(t3, e, n) {
  t3 instanceof Pe ? function(t4, e2, n2) {
    if (Ae(t4.precondition, e2)) {
      var r = t4.value.clone(), i = qe(t4.fieldTransforms, n2, e2);
      r.setAll(i), e2.convertToFoundDocument(Oe(e2), r).setHasLocalMutations();
    }
  }(t3, e, n) : t3 instanceof Fe ? function(t4, e2, n2) {
    if (Ae(t4.precondition, e2)) {
      var r = qe(t4.fieldTransforms, n2, e2), i = e2.data;
      i.setAll(Me(t4)), i.setAll(r), e2.convertToFoundDocument(Oe(e2), i).setHasLocalMutations();
    }
  }(t3, e, n) : function(t4, e2) {
    Ae(t4.precondition, e2) && e2.convertToNoDocument(K2.min());
  }(t3, e);
}
function Re(t3, e) {
  for (var n = null, r = 0, i = t3.fieldTransforms; r < i.length; r++) {
    var o = i[r], s = e.data.field(o.field), u = ve(o.transform, s || null);
    u != null && (n == null && (n = _t.empty()), n.set(o.field, u));
  }
  return n || null;
}
function Le(t3, e) {
  return t3.type === e.type && !!t3.key.isEqual(e.key) && !!t3.precondition.isEqual(e.precondition) && !!function(t4, e2) {
    return t4 === void 0 && e2 === void 0 || !(!t4 || !e2) && U2(t4, e2, function(t5, e3) {
      return function(t6, e4) {
        return t6.field.isEqual(e4.field) && function(t7, e5) {
          return t7 instanceof ge && e5 instanceof ge || t7 instanceof be && e5 instanceof be ? U2(t7.elements, e5.elements, ft) : t7 instanceof Te && e5 instanceof Te ? ft(t7.A, e5.A) : t7 instanceof me && e5 instanceof me;
        }(t6.transform, e4.transform);
      }(t5, e3);
    });
  }(t3.fieldTransforms, e.fieldTransforms) && (t3.type === 0 ? t3.value.isEqual(e.value) : t3.type !== 1 || t3.data.isEqual(e.data) && t3.fieldMask.isEqual(e.fieldMask));
}
function Oe(t3) {
  return t3.isFoundDocument() ? t3.version : K2.min();
}
var Pe = function(e) {
  function n(t3, n2, r, i) {
    i === void 0 && (i = []);
    var o = this;
    return (o = e.call(this) || this).key = t3, o.value = n2, o.precondition = r, o.fieldTransforms = i, o.type = 0, o;
  }
  return __extends(n, e), n;
}(ke);
var Fe = function(e) {
  function n(t3, n2, r, i, o) {
    o === void 0 && (o = []);
    var s = this;
    return (s = e.call(this) || this).key = t3, s.data = n2, s.fieldMask = r, s.precondition = i, s.fieldTransforms = o, s.type = 1, s;
  }
  return __extends(n, e), n;
}(ke);
function Me(t3) {
  var e = new Map();
  return t3.fieldMask.fields.forEach(function(n) {
    if (!n.isEmpty()) {
      var r = t3.data.field(n);
      e.set(n, r);
    }
  }), e;
}
function Ve(t3, e, n) {
  var r = new Map();
  P2(t3.length === n.length);
  for (var i = 0; i < n.length; i++) {
    var o = t3[i], s = o.transform, u = e.data.field(o.field);
    r.set(o.field, ye(s, u, n[i]));
  }
  return r;
}
function qe(t3, e, n) {
  for (var r = new Map(), i = 0, o = t3; i < o.length; i++) {
    var s = o[i], u = s.transform, a = n.data.field(s.field);
    r.set(s.field, pe(u, a, e));
  }
  return r;
}
var Ue;
var Be;
var je = function(e) {
  function n(t3, n2) {
    var r = this;
    return (r = e.call(this) || this).key = t3, r.precondition = n2, r.type = 2, r.fieldTransforms = [], r;
  }
  return __extends(n, e), n;
}(ke);
var Ke = function(e) {
  function n(t3, n2) {
    var r = this;
    return (r = e.call(this) || this).key = t3, r.precondition = n2, r.type = 3, r.fieldTransforms = [], r;
  }
  return __extends(n, e), n;
}(ke);
var Qe = function(t3) {
  this.count = t3;
};
function Ge(t3) {
  switch (t3) {
    case N2.OK:
      return O2();
    case N2.CANCELLED:
    case N2.UNKNOWN:
    case N2.DEADLINE_EXCEEDED:
    case N2.RESOURCE_EXHAUSTED:
    case N2.INTERNAL:
    case N2.UNAVAILABLE:
    case N2.UNAUTHENTICATED:
      return false;
    case N2.INVALID_ARGUMENT:
    case N2.NOT_FOUND:
    case N2.ALREADY_EXISTS:
    case N2.PERMISSION_DENIED:
    case N2.FAILED_PRECONDITION:
    case N2.ABORTED:
    case N2.OUT_OF_RANGE:
    case N2.UNIMPLEMENTED:
    case N2.DATA_LOSS:
      return true;
    default:
      return O2();
  }
}
function ze(t3) {
  if (t3 === void 0)
    return x2("GRPC error has no .code"), N2.UNKNOWN;
  switch (t3) {
    case Ue.OK:
      return N2.OK;
    case Ue.CANCELLED:
      return N2.CANCELLED;
    case Ue.UNKNOWN:
      return N2.UNKNOWN;
    case Ue.DEADLINE_EXCEEDED:
      return N2.DEADLINE_EXCEEDED;
    case Ue.RESOURCE_EXHAUSTED:
      return N2.RESOURCE_EXHAUSTED;
    case Ue.INTERNAL:
      return N2.INTERNAL;
    case Ue.UNAVAILABLE:
      return N2.UNAVAILABLE;
    case Ue.UNAUTHENTICATED:
      return N2.UNAUTHENTICATED;
    case Ue.INVALID_ARGUMENT:
      return N2.INVALID_ARGUMENT;
    case Ue.NOT_FOUND:
      return N2.NOT_FOUND;
    case Ue.ALREADY_EXISTS:
      return N2.ALREADY_EXISTS;
    case Ue.PERMISSION_DENIED:
      return N2.PERMISSION_DENIED;
    case Ue.FAILED_PRECONDITION:
      return N2.FAILED_PRECONDITION;
    case Ue.ABORTED:
      return N2.ABORTED;
    case Ue.OUT_OF_RANGE:
      return N2.OUT_OF_RANGE;
    case Ue.UNIMPLEMENTED:
      return N2.UNIMPLEMENTED;
    case Ue.DATA_LOSS:
      return N2.DATA_LOSS;
    default:
      return O2();
  }
}
(Be = Ue || (Ue = {}))[Be.OK = 0] = "OK", Be[Be.CANCELLED = 1] = "CANCELLED", Be[Be.UNKNOWN = 2] = "UNKNOWN", Be[Be.INVALID_ARGUMENT = 3] = "INVALID_ARGUMENT", Be[Be.DEADLINE_EXCEEDED = 4] = "DEADLINE_EXCEEDED", Be[Be.NOT_FOUND = 5] = "NOT_FOUND", Be[Be.ALREADY_EXISTS = 6] = "ALREADY_EXISTS", Be[Be.PERMISSION_DENIED = 7] = "PERMISSION_DENIED", Be[Be.UNAUTHENTICATED = 16] = "UNAUTHENTICATED", Be[Be.RESOURCE_EXHAUSTED = 8] = "RESOURCE_EXHAUSTED", Be[Be.FAILED_PRECONDITION = 9] = "FAILED_PRECONDITION", Be[Be.ABORTED = 10] = "ABORTED", Be[Be.OUT_OF_RANGE = 11] = "OUT_OF_RANGE", Be[Be.UNIMPLEMENTED = 12] = "UNIMPLEMENTED", Be[Be.INTERNAL = 13] = "INTERNAL", Be[Be.UNAVAILABLE = 14] = "UNAVAILABLE", Be[Be.DATA_LOSS = 15] = "DATA_LOSS";
var We = function() {
  function t3(t4, e) {
    this.comparator = t4, this.root = e || Ye.EMPTY;
  }
  return t3.prototype.insert = function(e, n) {
    return new t3(this.comparator, this.root.insert(e, n, this.comparator).copy(null, null, Ye.BLACK, null, null));
  }, t3.prototype.remove = function(e) {
    return new t3(this.comparator, this.root.remove(e, this.comparator).copy(null, null, Ye.BLACK, null, null));
  }, t3.prototype.get = function(t4) {
    for (var e = this.root; !e.isEmpty(); ) {
      var n = this.comparator(t4, e.key);
      if (n === 0)
        return e.value;
      n < 0 ? e = e.left : n > 0 && (e = e.right);
    }
    return null;
  }, t3.prototype.indexOf = function(t4) {
    for (var e = 0, n = this.root; !n.isEmpty(); ) {
      var r = this.comparator(t4, n.key);
      if (r === 0)
        return e + n.left.size;
      r < 0 ? n = n.left : (e += n.left.size + 1, n = n.right);
    }
    return -1;
  }, t3.prototype.isEmpty = function() {
    return this.root.isEmpty();
  }, Object.defineProperty(t3.prototype, "size", {
    get: function() {
      return this.root.size;
    },
    enumerable: false,
    configurable: true
  }), t3.prototype.minKey = function() {
    return this.root.minKey();
  }, t3.prototype.maxKey = function() {
    return this.root.maxKey();
  }, t3.prototype.inorderTraversal = function(t4) {
    return this.root.inorderTraversal(t4);
  }, t3.prototype.forEach = function(t4) {
    this.inorderTraversal(function(e, n) {
      return t4(e, n), false;
    });
  }, t3.prototype.toString = function() {
    var t4 = [];
    return this.inorderTraversal(function(e, n) {
      return t4.push(e + ":" + n), false;
    }), "{" + t4.join(", ") + "}";
  }, t3.prototype.reverseTraversal = function(t4) {
    return this.root.reverseTraversal(t4);
  }, t3.prototype.getIterator = function() {
    return new He(this.root, null, this.comparator, false);
  }, t3.prototype.getIteratorFrom = function(t4) {
    return new He(this.root, t4, this.comparator, false);
  }, t3.prototype.getReverseIterator = function() {
    return new He(this.root, null, this.comparator, true);
  }, t3.prototype.getReverseIteratorFrom = function(t4) {
    return new He(this.root, t4, this.comparator, true);
  }, t3;
}();
var He = function() {
  function t3(t4, e, n, r) {
    this.isReverse = r, this.nodeStack = [];
    for (var i = 1; !t4.isEmpty(); )
      if (i = e ? n(t4.key, e) : 1, r && (i *= -1), i < 0)
        t4 = this.isReverse ? t4.left : t4.right;
      else {
        if (i === 0) {
          this.nodeStack.push(t4);
          break;
        }
        this.nodeStack.push(t4), t4 = this.isReverse ? t4.right : t4.left;
      }
  }
  return t3.prototype.getNext = function() {
    var t4 = this.nodeStack.pop(), e = {
      key: t4.key,
      value: t4.value
    };
    if (this.isReverse)
      for (t4 = t4.left; !t4.isEmpty(); )
        this.nodeStack.push(t4), t4 = t4.right;
    else
      for (t4 = t4.right; !t4.isEmpty(); )
        this.nodeStack.push(t4), t4 = t4.left;
    return e;
  }, t3.prototype.hasNext = function() {
    return this.nodeStack.length > 0;
  }, t3.prototype.peek = function() {
    if (this.nodeStack.length === 0)
      return null;
    var t4 = this.nodeStack[this.nodeStack.length - 1];
    return {
      key: t4.key,
      value: t4.value
    };
  }, t3;
}();
var Ye = function() {
  function t3(e, n, r, i, o) {
    this.key = e, this.value = n, this.color = r != null ? r : t3.RED, this.left = i != null ? i : t3.EMPTY, this.right = o != null ? o : t3.EMPTY, this.size = this.left.size + 1 + this.right.size;
  }
  return t3.prototype.copy = function(e, n, r, i, o) {
    return new t3(e != null ? e : this.key, n != null ? n : this.value, r != null ? r : this.color, i != null ? i : this.left, o != null ? o : this.right);
  }, t3.prototype.isEmpty = function() {
    return false;
  }, t3.prototype.inorderTraversal = function(t4) {
    return this.left.inorderTraversal(t4) || t4(this.key, this.value) || this.right.inorderTraversal(t4);
  }, t3.prototype.reverseTraversal = function(t4) {
    return this.right.reverseTraversal(t4) || t4(this.key, this.value) || this.left.reverseTraversal(t4);
  }, t3.prototype.min = function() {
    return this.left.isEmpty() ? this : this.left.min();
  }, t3.prototype.minKey = function() {
    return this.min().key;
  }, t3.prototype.maxKey = function() {
    return this.right.isEmpty() ? this.key : this.right.maxKey();
  }, t3.prototype.insert = function(t4, e, n) {
    var r = this, i = n(t4, r.key);
    return (r = i < 0 ? r.copy(null, null, null, r.left.insert(t4, e, n), null) : i === 0 ? r.copy(null, e, null, null, null) : r.copy(null, null, null, null, r.right.insert(t4, e, n))).fixUp();
  }, t3.prototype.removeMin = function() {
    if (this.left.isEmpty())
      return t3.EMPTY;
    var e = this;
    return e.left.isRed() || e.left.left.isRed() || (e = e.moveRedLeft()), (e = e.copy(null, null, null, e.left.removeMin(), null)).fixUp();
  }, t3.prototype.remove = function(e, n) {
    var r, i = this;
    if (n(e, i.key) < 0)
      i.left.isEmpty() || i.left.isRed() || i.left.left.isRed() || (i = i.moveRedLeft()), i = i.copy(null, null, null, i.left.remove(e, n), null);
    else {
      if (i.left.isRed() && (i = i.rotateRight()), i.right.isEmpty() || i.right.isRed() || i.right.left.isRed() || (i = i.moveRedRight()), n(e, i.key) === 0) {
        if (i.right.isEmpty())
          return t3.EMPTY;
        r = i.right.min(), i = i.copy(r.key, r.value, null, null, i.right.removeMin());
      }
      i = i.copy(null, null, null, null, i.right.remove(e, n));
    }
    return i.fixUp();
  }, t3.prototype.isRed = function() {
    return this.color;
  }, t3.prototype.fixUp = function() {
    var t4 = this;
    return t4.right.isRed() && !t4.left.isRed() && (t4 = t4.rotateLeft()), t4.left.isRed() && t4.left.left.isRed() && (t4 = t4.rotateRight()), t4.left.isRed() && t4.right.isRed() && (t4 = t4.colorFlip()), t4;
  }, t3.prototype.moveRedLeft = function() {
    var t4 = this.colorFlip();
    return t4.right.left.isRed() && (t4 = (t4 = (t4 = t4.copy(null, null, null, null, t4.right.rotateRight())).rotateLeft()).colorFlip()), t4;
  }, t3.prototype.moveRedRight = function() {
    var t4 = this.colorFlip();
    return t4.left.left.isRed() && (t4 = (t4 = t4.rotateRight()).colorFlip()), t4;
  }, t3.prototype.rotateLeft = function() {
    var e = this.copy(null, null, t3.RED, null, this.right.left);
    return this.right.copy(null, null, this.color, e, null);
  }, t3.prototype.rotateRight = function() {
    var e = this.copy(null, null, t3.RED, this.left.right, null);
    return this.left.copy(null, null, this.color, null, e);
  }, t3.prototype.colorFlip = function() {
    var t4 = this.left.copy(null, null, !this.left.color, null, null), e = this.right.copy(null, null, !this.right.color, null, null);
    return this.copy(null, null, !this.color, t4, e);
  }, t3.prototype.checkMaxDepth = function() {
    var t4 = this.check();
    return Math.pow(2, t4) <= this.size + 1;
  }, t3.prototype.check = function() {
    if (this.isRed() && this.left.isRed())
      throw O2();
    if (this.right.isRed())
      throw O2();
    var t4 = this.left.check();
    if (t4 !== this.right.check())
      throw O2();
    return t4 + (this.isRed() ? 0 : 1);
  }, t3;
}();
Ye.EMPTY = null, Ye.RED = true, Ye.BLACK = false, Ye.EMPTY = new (function() {
  function t3() {
    this.size = 0;
  }
  return Object.defineProperty(t3.prototype, "key", {
    get: function() {
      throw O2();
    },
    enumerable: false,
    configurable: true
  }), Object.defineProperty(t3.prototype, "value", {
    get: function() {
      throw O2();
    },
    enumerable: false,
    configurable: true
  }), Object.defineProperty(t3.prototype, "color", {
    get: function() {
      throw O2();
    },
    enumerable: false,
    configurable: true
  }), Object.defineProperty(t3.prototype, "left", {
    get: function() {
      throw O2();
    },
    enumerable: false,
    configurable: true
  }), Object.defineProperty(t3.prototype, "right", {
    get: function() {
      throw O2();
    },
    enumerable: false,
    configurable: true
  }), t3.prototype.copy = function(t4, e, n, r, i) {
    return this;
  }, t3.prototype.insert = function(t4, e, n) {
    return new Ye(t4, e);
  }, t3.prototype.remove = function(t4, e) {
    return this;
  }, t3.prototype.isEmpty = function() {
    return true;
  }, t3.prototype.inorderTraversal = function(t4) {
    return false;
  }, t3.prototype.reverseTraversal = function(t4) {
    return false;
  }, t3.prototype.minKey = function() {
    return null;
  }, t3.prototype.maxKey = function() {
    return null;
  }, t3.prototype.isRed = function() {
    return false;
  }, t3.prototype.checkMaxDepth = function() {
    return true;
  }, t3.prototype.check = function() {
    return 0;
  }, t3;
}())();
var $e = function() {
  function t3(t4) {
    this.comparator = t4, this.data = new We(this.comparator);
  }
  return t3.prototype.has = function(t4) {
    return this.data.get(t4) !== null;
  }, t3.prototype.first = function() {
    return this.data.minKey();
  }, t3.prototype.last = function() {
    return this.data.maxKey();
  }, Object.defineProperty(t3.prototype, "size", {
    get: function() {
      return this.data.size;
    },
    enumerable: false,
    configurable: true
  }), t3.prototype.indexOf = function(t4) {
    return this.data.indexOf(t4);
  }, t3.prototype.forEach = function(t4) {
    this.data.inorderTraversal(function(e, n) {
      return t4(e), false;
    });
  }, t3.prototype.forEachInRange = function(t4, e) {
    for (var n = this.data.getIteratorFrom(t4[0]); n.hasNext(); ) {
      var r = n.getNext();
      if (this.comparator(r.key, t4[1]) >= 0)
        return;
      e(r.key);
    }
  }, t3.prototype.forEachWhile = function(t4, e) {
    var n;
    for (n = e !== void 0 ? this.data.getIteratorFrom(e) : this.data.getIterator(); n.hasNext(); )
      if (!t4(n.getNext().key))
        return;
  }, t3.prototype.firstAfterOrEqual = function(t4) {
    var e = this.data.getIteratorFrom(t4);
    return e.hasNext() ? e.getNext().key : null;
  }, t3.prototype.getIterator = function() {
    return new Xe(this.data.getIterator());
  }, t3.prototype.getIteratorFrom = function(t4) {
    return new Xe(this.data.getIteratorFrom(t4));
  }, t3.prototype.add = function(t4) {
    return this.copy(this.data.remove(t4).insert(t4, true));
  }, t3.prototype.delete = function(t4) {
    return this.has(t4) ? this.copy(this.data.remove(t4)) : this;
  }, t3.prototype.isEmpty = function() {
    return this.data.isEmpty();
  }, t3.prototype.unionWith = function(t4) {
    var e = this;
    return e.size < t4.size && (e = t4, t4 = this), t4.forEach(function(t5) {
      e = e.add(t5);
    }), e;
  }, t3.prototype.isEqual = function(e) {
    if (!(e instanceof t3))
      return false;
    if (this.size !== e.size)
      return false;
    for (var n = this.data.getIterator(), r = e.data.getIterator(); n.hasNext(); ) {
      var i = n.getNext().key, o = r.getNext().key;
      if (this.comparator(i, o) !== 0)
        return false;
    }
    return true;
  }, t3.prototype.toArray = function() {
    var t4 = [];
    return this.forEach(function(e) {
      t4.push(e);
    }), t4;
  }, t3.prototype.toString = function() {
    var t4 = [];
    return this.forEach(function(e) {
      return t4.push(e);
    }), "SortedSet(" + t4.toString() + ")";
  }, t3.prototype.copy = function(e) {
    var n = new t3(this.comparator);
    return n.data = e, n;
  }, t3;
}();
var Xe = function() {
  function t3(t4) {
    this.iter = t4;
  }
  return t3.prototype.getNext = function() {
    return this.iter.getNext().key;
  }, t3.prototype.hasNext = function() {
    return this.iter.hasNext();
  }, t3;
}();
var Je = new We(ct.comparator);
function Ze() {
  return Je;
}
var tn = new We(ct.comparator);
function en() {
  return tn;
}
var nn = new We(ct.comparator);
function rn() {
  return nn;
}
var on = new $e(ct.comparator);
function sn() {
  for (var t3 = [], e = 0; e < arguments.length; e++)
    t3[e] = arguments[e];
  for (var n = on, r = 0, i = t3; r < i.length; r++) {
    var o = i[r];
    n = n.add(o);
  }
  return n;
}
var un = new $e(q2);
function an() {
  return un;
}
var cn = function() {
  function t3(t4, e, n, r, i) {
    this.snapshotVersion = t4, this.targetChanges = e, this.targetMismatches = n, this.documentUpdates = r, this.resolvedLimboDocuments = i;
  }
  return t3.createSynthesizedRemoteEventForCurrentChange = function(e, n) {
    var r = new Map();
    return r.set(e, hn.createSynthesizedTargetChangeForCurrentChange(e, n)), new t3(K2.min(), r, an(), Ze(), sn());
  }, t3;
}();
var hn = function() {
  function t3(t4, e, n, r, i) {
    this.resumeToken = t4, this.current = e, this.addedDocuments = n, this.modifiedDocuments = r, this.removedDocuments = i;
  }
  return t3.createSynthesizedTargetChangeForCurrentChange = function(e, n) {
    return new t3(J2.EMPTY_BYTE_STRING, n, sn(), sn(), sn());
  }, t3;
}();
var fn = function(t3, e, n, r) {
  this.v = t3, this.removedTargetIds = e, this.key = n, this.P = r;
};
var ln = function(t3, e) {
  this.targetId = t3, this.V = e;
};
var dn = function(t3, e, n, r) {
  n === void 0 && (n = J2.EMPTY_BYTE_STRING), r === void 0 && (r = null), this.state = t3, this.targetIds = e, this.resumeToken = n, this.cause = r;
};
var pn = function() {
  function t3() {
    this.S = 0, this.D = mn(), this.C = J2.EMPTY_BYTE_STRING, this.N = false, this.k = true;
  }
  return Object.defineProperty(t3.prototype, "current", {
    get: function() {
      return this.N;
    },
    enumerable: false,
    configurable: true
  }), Object.defineProperty(t3.prototype, "resumeToken", {
    get: function() {
      return this.C;
    },
    enumerable: false,
    configurable: true
  }), Object.defineProperty(t3.prototype, "F", {
    get: function() {
      return this.S !== 0;
    },
    enumerable: false,
    configurable: true
  }), Object.defineProperty(t3.prototype, "$", {
    get: function() {
      return this.k;
    },
    enumerable: false,
    configurable: true
  }), t3.prototype.O = function(t4) {
    t4.approximateByteSize() > 0 && (this.k = true, this.C = t4);
  }, t3.prototype.M = function() {
    var t4 = sn(), e = sn(), n = sn();
    return this.D.forEach(function(r, i) {
      switch (i) {
        case 0:
          t4 = t4.add(r);
          break;
        case 2:
          e = e.add(r);
          break;
        case 1:
          n = n.add(r);
          break;
        default:
          O2();
      }
    }), new hn(this.C, this.N, t4, e, n);
  }, t3.prototype.L = function() {
    this.k = false, this.D = mn();
  }, t3.prototype.B = function(t4, e) {
    this.k = true, this.D = this.D.insert(t4, e);
  }, t3.prototype.q = function(t4) {
    this.k = true, this.D = this.D.remove(t4);
  }, t3.prototype.U = function() {
    this.S += 1;
  }, t3.prototype.K = function() {
    this.S -= 1;
  }, t3.prototype.j = function() {
    this.k = true, this.N = true;
  }, t3;
}();
var yn = function() {
  function t3(t4) {
    this.W = t4, this.G = new Map(), this.H = Ze(), this.J = vn(), this.Y = new $e(q2);
  }
  return t3.prototype.X = function(t4) {
    for (var e = 0, n = t4.v; e < n.length; e++) {
      var r = n[e];
      t4.P && t4.P.isFoundDocument() ? this.Z(r, t4.P) : this.tt(r, t4.key, t4.P);
    }
    for (var i = 0, o = t4.removedTargetIds; i < o.length; i++) {
      r = o[i];
      this.tt(r, t4.key, t4.P);
    }
  }, t3.prototype.et = function(t4) {
    var e = this;
    this.forEachTarget(t4, function(n) {
      var r = e.nt(n);
      switch (t4.state) {
        case 0:
          e.st(n) && r.O(t4.resumeToken);
          break;
        case 1:
          r.K(), r.F || r.L(), r.O(t4.resumeToken);
          break;
        case 2:
          r.K(), r.F || e.removeTarget(n);
          break;
        case 3:
          e.st(n) && (r.j(), r.O(t4.resumeToken));
          break;
        case 4:
          e.st(n) && (e.it(n), r.O(t4.resumeToken));
          break;
        default:
          O2();
      }
    });
  }, t3.prototype.forEachTarget = function(t4, e) {
    var n = this;
    t4.targetIds.length > 0 ? t4.targetIds.forEach(e) : this.G.forEach(function(t5, r) {
      n.st(r) && e(r);
    });
  }, t3.prototype.rt = function(t4) {
    var e = t4.targetId, n = t4.V.count, r = this.ot(e);
    if (r) {
      var i = r.target;
      if (xt(i))
        if (n === 0) {
          var o = new ct(i.path);
          this.tt(e, o, Nt.newNoDocument(o, K2.min()));
        } else
          P2(n === 1);
      else
        this.ct(e) !== n && (this.it(e), this.Y = this.Y.add(e));
    }
  }, t3.prototype.ut = function(t4) {
    var e = this, n = new Map();
    this.G.forEach(function(r2, i2) {
      var o = e.ot(i2);
      if (o) {
        if (r2.current && xt(o.target)) {
          var s = new ct(o.target.path);
          e.H.get(s) !== null || e.at(i2, s) || e.tt(i2, s, Nt.newNoDocument(s, t4));
        }
        r2.$ && (n.set(i2, r2.M()), r2.L());
      }
    });
    var r = sn();
    this.J.forEach(function(t5, n2) {
      var i2 = true;
      n2.forEachWhile(function(t6) {
        var n3 = e.ot(t6);
        return !n3 || n3.purpose === 2 || (i2 = false, false);
      }), i2 && (r = r.add(t5));
    });
    var i = new cn(t4, n, this.Y, this.H, r);
    return this.H = Ze(), this.J = vn(), this.Y = new $e(q2), i;
  }, t3.prototype.Z = function(t4, e) {
    if (this.st(t4)) {
      var n = this.at(t4, e.key) ? 2 : 0;
      this.nt(t4).B(e.key, n), this.H = this.H.insert(e.key, e), this.J = this.J.insert(e.key, this.ht(e.key).add(t4));
    }
  }, t3.prototype.tt = function(t4, e, n) {
    if (this.st(t4)) {
      var r = this.nt(t4);
      this.at(t4, e) ? r.B(e, 1) : r.q(e), this.J = this.J.insert(e, this.ht(e).delete(t4)), n && (this.H = this.H.insert(e, n));
    }
  }, t3.prototype.removeTarget = function(t4) {
    this.G.delete(t4);
  }, t3.prototype.ct = function(t4) {
    var e = this.nt(t4).M();
    return this.W.getRemoteKeysForTarget(t4).size + e.addedDocuments.size - e.removedDocuments.size;
  }, t3.prototype.U = function(t4) {
    this.nt(t4).U();
  }, t3.prototype.nt = function(t4) {
    var e = this.G.get(t4);
    return e || (e = new pn(), this.G.set(t4, e)), e;
  }, t3.prototype.ht = function(t4) {
    var e = this.J.get(t4);
    return e || (e = new $e(q2), this.J = this.J.insert(t4, e)), e;
  }, t3.prototype.st = function(t4) {
    var e = this.ot(t4) !== null;
    return e || C2("WatchChangeAggregator", "Detected inactive target", t4), e;
  }, t3.prototype.ot = function(t4) {
    var e = this.G.get(t4);
    return e && e.F ? null : this.W.lt(t4);
  }, t3.prototype.it = function(t4) {
    var e = this;
    this.G.set(t4, new pn()), this.W.getRemoteKeysForTarget(t4).forEach(function(n) {
      e.tt(t4, n, null);
    });
  }, t3.prototype.at = function(t4, e) {
    return this.W.getRemoteKeysForTarget(t4).has(e);
  }, t3;
}();
function vn() {
  return new We(ct.comparator);
}
function mn() {
  return new We(ct.comparator);
}
var gn = {
  asc: "ASCENDING",
  desc: "DESCENDING"
};
var wn = {
  "<": "LESS_THAN",
  "<=": "LESS_THAN_OR_EQUAL",
  ">": "GREATER_THAN",
  ">=": "GREATER_THAN_OR_EQUAL",
  "==": "EQUAL",
  "!=": "NOT_EQUAL",
  "array-contains": "ARRAY_CONTAINS",
  in: "IN",
  "not-in": "NOT_IN",
  "array-contains-any": "ARRAY_CONTAINS_ANY"
};
var bn = function(t3, e) {
  this.databaseId = t3, this.I = e;
};
function In(t3, e) {
  return t3.I ? new Date(1e3 * e.seconds).toISOString().replace(/\.\d*/, "").replace("Z", "") + "." + ("000000000" + e.nanoseconds).slice(-9) + "Z" : {
    seconds: "" + e.seconds,
    nanos: e.nanoseconds
  };
}
function Tn(t3, e) {
  return t3.I ? e.toBase64() : e.toUint8Array();
}
function En(t3, e) {
  return In(t3, e.toTimestamp());
}
function _n(t3) {
  return P2(!!t3), K2.fromTimestamp(function(t4) {
    var e = tt(t4);
    return new j(e.seconds, e.nanos);
  }(t3));
}
function Sn(t3, e) {
  return function(t4) {
    return new H2(["projects", t4.projectId, "databases", t4.database]);
  }(t3).child("documents").child(e).canonicalString();
}
function Nn(t3) {
  var e = H2.fromString(t3);
  return P2($n(e)), e;
}
function Dn(t3, e) {
  return Sn(t3.databaseId, e.path);
}
function An(t3, e) {
  var n = Nn(e);
  if (n.get(1) !== t3.databaseId.projectId)
    throw new D2(N2.INVALID_ARGUMENT, "Tried to deserialize key from different project: " + n.get(1) + " vs " + t3.databaseId.projectId);
  if (n.get(3) !== t3.databaseId.database)
    throw new D2(N2.INVALID_ARGUMENT, "Tried to deserialize key from different database: " + n.get(3) + " vs " + t3.databaseId.database);
  return new ct(Rn(n));
}
function kn(t3, e) {
  return Sn(t3.databaseId, e);
}
function Cn(t3) {
  var e = Nn(t3);
  return e.length === 4 ? H2.emptyPath() : Rn(e);
}
function xn(t3) {
  return new H2(["projects", t3.databaseId.projectId, "databases", t3.databaseId.database]).canonicalString();
}
function Rn(t3) {
  return P2(t3.length > 4 && t3.get(4) === "documents"), t3.popFirst(5);
}
function Ln(t3, e, n) {
  return {
    name: Dn(t3, e),
    fields: n.value.mapValue.fields
  };
}
function On(t3, e, n) {
  var r = An(t3, e.name), i = _n(e.updateTime), o = new _t({
    mapValue: {
      fields: e.fields
    }
  }), s = Nt.newFoundDocument(r, i, o);
  return n && s.setHasCommittedMutations(), n ? s.setHasCommittedMutations() : s;
}
function Pn(t3, e) {
  var n;
  if (e instanceof Pe)
    n = {
      update: Ln(t3, e.key, e.value)
    };
  else if (e instanceof je)
    n = {
      delete: Dn(t3, e.key)
    };
  else if (e instanceof Fe)
    n = {
      update: Ln(t3, e.key, e.data),
      updateMask: Yn(e.fieldMask)
    };
  else {
    if (!(e instanceof Ke))
      return O2();
    n = {
      verify: Dn(t3, e.key)
    };
  }
  return e.fieldTransforms.length > 0 && (n.updateTransforms = e.fieldTransforms.map(function(t4) {
    return function(t5, e2) {
      var n2 = e2.transform;
      if (n2 instanceof me)
        return {
          fieldPath: e2.field.canonicalString(),
          setToServerValue: "REQUEST_TIME"
        };
      if (n2 instanceof ge)
        return {
          fieldPath: e2.field.canonicalString(),
          appendMissingElements: {
            values: n2.elements
          }
        };
      if (n2 instanceof be)
        return {
          fieldPath: e2.field.canonicalString(),
          removeAllFromArray: {
            values: n2.elements
          }
        };
      if (n2 instanceof Te)
        return {
          fieldPath: e2.field.canonicalString(),
          increment: n2.A
        };
      throw O2();
    }(0, t4);
  })), e.precondition.isNone || (n.currentDocument = function(t4, e2) {
    return e2.updateTime !== void 0 ? {
      updateTime: En(t4, e2.updateTime)
    } : e2.exists !== void 0 ? {
      exists: e2.exists
    } : O2();
  }(t3, e.precondition)), n;
}
function Fn(t3, e) {
  var n = e.currentDocument ? function(t4) {
    return t4.updateTime !== void 0 ? De.updateTime(_n(t4.updateTime)) : t4.exists !== void 0 ? De.exists(t4.exists) : De.none();
  }(e.currentDocument) : De.none(), r = e.updateTransforms ? e.updateTransforms.map(function(e2) {
    return function(t4, e3) {
      var n2 = null;
      if ("setToServerValue" in e3)
        P2(e3.setToServerValue === "REQUEST_TIME"), n2 = new me();
      else if ("appendMissingElements" in e3) {
        var r2 = e3.appendMissingElements.values || [];
        n2 = new ge(r2);
      } else if ("removeAllFromArray" in e3) {
        var i2 = e3.removeAllFromArray.values || [];
        n2 = new be(i2);
      } else
        "increment" in e3 ? n2 = new Te(t4, e3.increment) : O2();
      var o2 = $.fromServerFormat(e3.fieldPath);
      return new Se(o2, n2);
    }(t3, e2);
  }) : [];
  if (e.update) {
    e.update.name;
    var i = An(t3, e.update.name), o = new _t({
      mapValue: {
        fields: e.update.fields
      }
    });
    if (e.updateMask) {
      var s = function(t4) {
        var e2 = t4.fieldPaths || [];
        return new X2(e2.map(function(t5) {
          return $.fromServerFormat(t5);
        }));
      }(e.updateMask);
      return new Fe(i, o, s, n, r);
    }
    return new Pe(i, o, n, r);
  }
  if (e.delete) {
    var u = An(t3, e.delete);
    return new je(u, n);
  }
  if (e.verify) {
    var a = An(t3, e.verify);
    return new Ke(a, n);
  }
  return O2();
}
function Mn(t3, e) {
  return {
    documents: [kn(t3, e.path)]
  };
}
function Vn(t3, e) {
  var n = {
    structuredQuery: {}
  }, r = e.path;
  e.collectionGroup !== null ? (n.parent = kn(t3, r), n.structuredQuery.from = [{
    collectionId: e.collectionGroup,
    allDescendants: true
  }]) : (n.parent = kn(t3, r.popLast()), n.structuredQuery.from = [{
    collectionId: r.lastSegment()
  }]);
  var i = function(t4) {
    if (t4.length !== 0) {
      var e2 = t4.map(function(t5) {
        return function(t6) {
          if (t6.op === "==") {
            if (It(t6.value))
              return {
                unaryFilter: {
                  field: Gn(t6.field),
                  op: "IS_NAN"
                }
              };
            if (bt(t6.value))
              return {
                unaryFilter: {
                  field: Gn(t6.field),
                  op: "IS_NULL"
                }
              };
          } else if (t6.op === "!=") {
            if (It(t6.value))
              return {
                unaryFilter: {
                  field: Gn(t6.field),
                  op: "IS_NOT_NAN"
                }
              };
            if (bt(t6.value))
              return {
                unaryFilter: {
                  field: Gn(t6.field),
                  op: "IS_NOT_NULL"
                }
              };
          }
          return {
            fieldFilter: {
              field: Gn(t6.field),
              op: Qn(t6.op),
              value: t6.value
            }
          };
        }(t5);
      });
      return e2.length === 1 ? e2[0] : {
        compositeFilter: {
          op: "AND",
          filters: e2
        }
      };
    }
  }(e.filters);
  i && (n.structuredQuery.where = i);
  var o = function(t4) {
    if (t4.length !== 0)
      return t4.map(function(t5) {
        return function(t6) {
          return {
            field: Gn(t6.field),
            direction: Kn(t6.dir)
          };
        }(t5);
      });
  }(e.orderBy);
  o && (n.structuredQuery.orderBy = o);
  var s = function(t4, e2) {
    return t4.I || st(e2) ? e2 : {
      value: e2
    };
  }(t3, e.limit);
  return s !== null && (n.structuredQuery.limit = s), e.startAt && (n.structuredQuery.startAt = Bn(e.startAt)), e.endAt && (n.structuredQuery.endAt = Bn(e.endAt)), n;
}
function qn(t3) {
  var e = Cn(t3.parent), n = t3.structuredQuery, r = n.from ? n.from.length : 0, i = null;
  if (r > 0) {
    P2(r === 1);
    var o = n.from[0];
    o.allDescendants ? i = o.collectionId : e = e.child(o.collectionId);
  }
  var s = [];
  n.where && (s = Un(n.where));
  var u = [];
  n.orderBy && (u = n.orderBy.map(function(t4) {
    return function(t5) {
      return new Kt(zn(t5.field), function(t6) {
        switch (t6) {
          case "ASCENDING":
            return "asc";
          case "DESCENDING":
            return "desc";
          default:
            return;
        }
      }(t5.direction));
    }(t4);
  }));
  var a = null;
  n.limit && (a = function(t4) {
    var e2;
    return st(e2 = typeof t4 == "object" ? t4.value : t4) ? null : e2;
  }(n.limit));
  var c = null;
  n.startAt && (c = jn(n.startAt));
  var h = null;
  return n.endAt && (h = jn(n.endAt)), Ht(e, i, u, s, a, "F", c, h);
}
function Un(t3) {
  return t3 ? t3.unaryFilter !== void 0 ? [Hn(t3)] : t3.fieldFilter !== void 0 ? [Wn(t3)] : t3.compositeFilter !== void 0 ? t3.compositeFilter.filters.map(function(t4) {
    return Un(t4);
  }).reduce(function(t4, e) {
    return t4.concat(e);
  }) : O2() : [];
}
function Bn(t3) {
  return {
    before: t3.before,
    values: t3.position
  };
}
function jn(t3) {
  var e = !!t3.before, n = t3.values || [];
  return new Bt(n, e);
}
function Kn(t3) {
  return gn[t3];
}
function Qn(t3) {
  return wn[t3];
}
function Gn(t3) {
  return {
    fieldPath: t3.canonicalString()
  };
}
function zn(t3) {
  return $.fromServerFormat(t3.fieldPath);
}
function Wn(t3) {
  return Rt.create(zn(t3.fieldFilter.field), function(t4) {
    switch (t4) {
      case "EQUAL":
        return "==";
      case "NOT_EQUAL":
        return "!=";
      case "GREATER_THAN":
        return ">";
      case "GREATER_THAN_OR_EQUAL":
        return ">=";
      case "LESS_THAN":
        return "<";
      case "LESS_THAN_OR_EQUAL":
        return "<=";
      case "ARRAY_CONTAINS":
        return "array-contains";
      case "IN":
        return "in";
      case "NOT_IN":
        return "not-in";
      case "ARRAY_CONTAINS_ANY":
        return "array-contains-any";
      case "OPERATOR_UNSPECIFIED":
      default:
        return O2();
    }
  }(t3.fieldFilter.op), t3.fieldFilter.value);
}
function Hn(t3) {
  switch (t3.unaryFilter.op) {
    case "IS_NAN":
      var e = zn(t3.unaryFilter.field);
      return Rt.create(e, "==", {
        doubleValue: NaN
      });
    case "IS_NULL":
      var n = zn(t3.unaryFilter.field);
      return Rt.create(n, "==", {
        nullValue: "NULL_VALUE"
      });
    case "IS_NOT_NAN":
      var r = zn(t3.unaryFilter.field);
      return Rt.create(r, "!=", {
        doubleValue: NaN
      });
    case "IS_NOT_NULL":
      var i = zn(t3.unaryFilter.field);
      return Rt.create(i, "!=", {
        nullValue: "NULL_VALUE"
      });
    case "OPERATOR_UNSPECIFIED":
    default:
      return O2();
  }
}
function Yn(t3) {
  var e = [];
  return t3.fields.forEach(function(t4) {
    return e.push(t4.canonicalString());
  }), {
    fieldPaths: e
  };
}
function $n(t3) {
  return t3.length >= 4 && t3.get(0) === "projects" && t3.get(2) === "databases";
}
function Xn(t3) {
  for (var e = "", n = 0; n < t3.length; n++)
    e.length > 0 && (e = Zn(e)), e = Jn(t3.get(n), e);
  return Zn(e);
}
function Jn(t3, e) {
  for (var n = e, r = t3.length, i = 0; i < r; i++) {
    var o = t3.charAt(i);
    switch (o) {
      case "\0":
        n += "";
        break;
      case "":
        n += "";
        break;
      default:
        n += o;
    }
  }
  return n;
}
function Zn(t3) {
  return t3 + "";
}
function tr(t3) {
  var e = t3.length;
  if (P2(e >= 2), e === 2)
    return P2(t3.charAt(0) === "" && t3.charAt(1) === ""), H2.emptyPath();
  for (var n = e - 2, r = [], i = "", o = 0; o < e; ) {
    var s = t3.indexOf("", o);
    switch ((s < 0 || s > n) && O2(), t3.charAt(s + 1)) {
      case "":
        var u = t3.substring(o, s), a = void 0;
        i.length === 0 ? a = u : (a = i += u, i = ""), r.push(a);
        break;
      case "":
        i += t3.substring(o, s), i += "\0";
        break;
      case "":
        i += t3.substring(o, s + 1);
        break;
      default:
        O2();
    }
    o = s + 2;
  }
  return new H2(r);
}
var er = function(t3, e) {
  this.seconds = t3, this.nanoseconds = e;
};
var nr = function(t3, e, n) {
  this.ownerId = t3, this.allowTabSynchronization = e, this.leaseTimestampMs = n;
};
nr.store = "owner", nr.key = "owner";
var rr = function(t3, e, n) {
  this.userId = t3, this.lastAcknowledgedBatchId = e, this.lastStreamToken = n;
};
rr.store = "mutationQueues", rr.keyPath = "userId";
var ir = function(t3, e, n, r, i) {
  this.userId = t3, this.batchId = e, this.localWriteTimeMs = n, this.baseMutations = r, this.mutations = i;
};
ir.store = "mutations", ir.keyPath = "batchId", ir.userMutationsIndex = "userMutationsIndex", ir.userMutationsKeyPath = ["userId", "batchId"];
var or = function() {
  function t3() {
  }
  return t3.prefixForUser = function(t4) {
    return [t4];
  }, t3.prefixForPath = function(t4, e) {
    return [t4, Xn(e)];
  }, t3.key = function(t4, e, n) {
    return [t4, Xn(e), n];
  }, t3;
}();
or.store = "documentMutations", or.PLACEHOLDER = new or();
var sr = function(t3, e) {
  this.path = t3, this.readTime = e;
};
var ur = function(t3, e) {
  this.path = t3, this.version = e;
};
var ar = function(t3, e, n, r, i, o) {
  this.unknownDocument = t3, this.noDocument = e, this.document = n, this.hasCommittedMutations = r, this.readTime = i, this.parentPath = o;
};
ar.store = "remoteDocuments", ar.readTimeIndex = "readTimeIndex", ar.readTimeIndexPath = "readTime", ar.collectionReadTimeIndex = "collectionReadTimeIndex", ar.collectionReadTimeIndexPath = ["parentPath", "readTime"];
var cr = function(t3) {
  this.byteSize = t3;
};
cr.store = "remoteDocumentGlobal", cr.key = "remoteDocumentGlobalKey";
var hr = function(t3, e, n, r, i, o, s) {
  this.targetId = t3, this.canonicalId = e, this.readTime = n, this.resumeToken = r, this.lastListenSequenceNumber = i, this.lastLimboFreeSnapshotVersion = o, this.query = s;
};
hr.store = "targets", hr.keyPath = "targetId", hr.queryTargetsIndexName = "queryTargetsIndex", hr.queryTargetsKeyPath = ["canonicalId", "targetId"];
var fr = function(t3, e, n) {
  this.targetId = t3, this.path = e, this.sequenceNumber = n;
};
fr.store = "targetDocuments", fr.keyPath = ["targetId", "path"], fr.documentTargetsIndex = "documentTargetsIndex", fr.documentTargetsKeyPath = ["path", "targetId"];
var lr = function(t3, e, n, r) {
  this.highestTargetId = t3, this.highestListenSequenceNumber = e, this.lastRemoteSnapshotVersion = n, this.targetCount = r;
};
lr.key = "targetGlobalKey", lr.store = "targetGlobal";
var dr = function(t3, e) {
  this.collectionId = t3, this.parent = e;
};
dr.store = "collectionParents", dr.keyPath = ["collectionId", "parent"];
var pr = function(t3, e, n, r) {
  this.clientId = t3, this.updateTimeMs = e, this.networkEnabled = n, this.inForeground = r;
};
pr.store = "clientMetadata", pr.keyPath = "clientId";
var yr = function(t3, e, n) {
  this.bundleId = t3, this.createTime = e, this.version = n;
};
yr.store = "bundles", yr.keyPath = "bundleId";
var vr = function(t3, e, n) {
  this.name = t3, this.readTime = e, this.bundledQuery = n;
};
vr.store = "namedQueries", vr.keyPath = "name";
var mr = __spreadArray(__spreadArray([], __spreadArray(__spreadArray([], __spreadArray(__spreadArray([], __spreadArray(__spreadArray([], [rr.store, ir.store, or.store, ar.store, hr.store, nr.store, lr.store, fr.store]), [pr.store])), [cr.store])), [dr.store])), [yr.store, vr.store]);
var gr = "The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab.";
var wr = function() {
  function t3() {
    this.onCommittedListeners = [];
  }
  return t3.prototype.addOnCommittedListener = function(t4) {
    this.onCommittedListeners.push(t4);
  }, t3.prototype.raiseOnCommittedEvent = function() {
    this.onCommittedListeners.forEach(function(t4) {
      return t4();
    });
  }, t3;
}();
var br = function() {
  var t3 = this;
  this.promise = new Promise(function(e, n) {
    t3.resolve = e, t3.reject = n;
  });
};
var Ir = function() {
  function t3(t4) {
    var e = this;
    this.nextCallback = null, this.catchCallback = null, this.result = void 0, this.error = void 0, this.isDone = false, this.callbackAttached = false, t4(function(t5) {
      e.isDone = true, e.result = t5, e.nextCallback && e.nextCallback(t5);
    }, function(t5) {
      e.isDone = true, e.error = t5, e.catchCallback && e.catchCallback(t5);
    });
  }
  return t3.prototype.catch = function(t4) {
    return this.next(void 0, t4);
  }, t3.prototype.next = function(e, n) {
    var r = this;
    return this.callbackAttached && O2(), this.callbackAttached = true, this.isDone ? this.error ? this.wrapFailure(n, this.error) : this.wrapSuccess(e, this.result) : new t3(function(t4, i) {
      r.nextCallback = function(n2) {
        r.wrapSuccess(e, n2).next(t4, i);
      }, r.catchCallback = function(e2) {
        r.wrapFailure(n, e2).next(t4, i);
      };
    });
  }, t3.prototype.toPromise = function() {
    var t4 = this;
    return new Promise(function(e, n) {
      t4.next(e, n);
    });
  }, t3.prototype.wrapUserFunction = function(e) {
    try {
      var n = e();
      return n instanceof t3 ? n : t3.resolve(n);
    } catch (e2) {
      return t3.reject(e2);
    }
  }, t3.prototype.wrapSuccess = function(e, n) {
    return e ? this.wrapUserFunction(function() {
      return e(n);
    }) : t3.resolve(n);
  }, t3.prototype.wrapFailure = function(e, n) {
    return e ? this.wrapUserFunction(function() {
      return e(n);
    }) : t3.reject(n);
  }, t3.resolve = function(e) {
    return new t3(function(t4, n) {
      t4(e);
    });
  }, t3.reject = function(e) {
    return new t3(function(t4, n) {
      n(e);
    });
  }, t3.waitFor = function(e) {
    return new t3(function(t4, n) {
      var r = 0, i = 0, o = false;
      e.forEach(function(e2) {
        ++r, e2.next(function() {
          ++i, o && i === r && t4();
        }, function(t5) {
          return n(t5);
        });
      }), o = true, i === r && t4();
    });
  }, t3.or = function(e) {
    for (var n = t3.resolve(false), r = function(e2) {
      n = n.next(function(n2) {
        return n2 ? t3.resolve(n2) : e2();
      });
    }, i = 0, o = e; i < o.length; i++) {
      r(o[i]);
    }
    return n;
  }, t3.forEach = function(t4, e) {
    var n = this, r = [];
    return t4.forEach(function(t5, i) {
      r.push(e.call(n, t5, i));
    }), this.waitFor(r);
  }, t3;
}();
var Tr = function() {
  function t3(t4, e) {
    var n = this;
    this.action = t4, this.transaction = e, this.aborted = false, this.ft = new br(), this.transaction.oncomplete = function() {
      n.ft.resolve();
    }, this.transaction.onabort = function() {
      e.error ? n.ft.reject(new Sr(t4, e.error)) : n.ft.resolve();
    }, this.transaction.onerror = function(e2) {
      var r = Cr(e2.target.error);
      n.ft.reject(new Sr(t4, r));
    };
  }
  return t3.open = function(e, n, r, i) {
    try {
      return new t3(n, e.transaction(i, r));
    } catch (e2) {
      throw new Sr(n, e2);
    }
  }, Object.defineProperty(t3.prototype, "dt", {
    get: function() {
      return this.ft.promise;
    },
    enumerable: false,
    configurable: true
  }), t3.prototype.abort = function(t4) {
    t4 && this.ft.reject(t4), this.aborted || (C2("SimpleDb", "Aborting transaction:", t4 ? t4.message : "Client-initiated abort"), this.aborted = true, this.transaction.abort());
  }, t3.prototype.store = function(t4) {
    var e = this.transaction.objectStore(t4);
    return new Dr(e);
  }, t3;
}();
var Er = function() {
  function t3(e, n, r) {
    this.name = e, this.version = n, this.wt = r, t3._t(getUA()) === 12.2 && x2("Firestore persistence suffers from a bug in iOS 12.2 Safari that may cause your app to stop working. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.");
  }
  return t3.delete = function(t4) {
    return C2("SimpleDb", "Removing database:", t4), Ar(window.indexedDB.deleteDatabase(t4)).toPromise();
  }, t3.yt = function() {
    if (typeof indexedDB == "undefined")
      return false;
    if (t3.gt())
      return true;
    var e = getUA(), n = t3._t(e), r = 0 < n && n < 10, o = t3.Et(e), s = 0 < o && o < 4.5;
    return !(e.indexOf("MSIE ") > 0 || e.indexOf("Trident/") > 0 || e.indexOf("Edge/") > 0 || r || s);
  }, t3.gt = function() {
    var t4;
    return typeof process != "undefined" && ((t4 = process.env) === null || t4 === void 0 ? void 0 : t4.Tt) === "YES";
  }, t3.It = function(t4, e) {
    return t4.store(e);
  }, t3._t = function(t4) {
    var e = t4.match(/i(?:phone|pad|pod) os ([\d_]+)/i), n = e ? e[1].split("_").slice(0, 2).join(".") : "-1";
    return Number(n);
  }, t3.Et = function(t4) {
    var e = t4.match(/Android ([\d.]+)/i), n = e ? e[1].split(".").slice(0, 2).join(".") : "-1";
    return Number(n);
  }, t3.prototype.At = function(t4) {
    return __awaiter(this, void 0, void 0, function() {
      var e, n = this;
      return __generator(this, function(r) {
        switch (r.label) {
          case 0:
            return this.db ? [3, 2] : (C2("SimpleDb", "Opening database:", this.name), e = this, [4, new Promise(function(e2, r2) {
              var i = indexedDB.open(n.name, n.version);
              i.onsuccess = function(t5) {
                var n2 = t5.target.result;
                e2(n2);
              }, i.onblocked = function() {
                r2(new Sr(t4, "Cannot upgrade IndexedDB schema while another tab is open. Close all tabs that access Firestore and reload this page to proceed."));
              }, i.onerror = function(e3) {
                var n2 = e3.target.error;
                n2.name === "VersionError" ? r2(new D2(N2.FAILED_PRECONDITION, "A newer version of the Firestore SDK was previously used and so the persisted data is not compatible with the version of the SDK you are now using. The SDK will operate with persistence disabled. If you need persistence, please re-upgrade to a newer version of the SDK or else clear the persisted IndexedDB data for your app to start fresh.")) : r2(new Sr(t4, n2));
              }, i.onupgradeneeded = function(t5) {
                C2("SimpleDb", 'Database "' + n.name + '" requires upgrade from version:', t5.oldVersion);
                var e3 = t5.target.result;
                n.wt.Rt(e3, i.transaction, t5.oldVersion, n.version).next(function() {
                  C2("SimpleDb", "Database upgrade to version " + n.version + " complete");
                });
              };
            })]);
          case 1:
            e.db = r.sent(), r.label = 2;
          case 2:
            return [2, (this.bt && (this.db.onversionchange = function(t5) {
              return n.bt(t5);
            }), this.db)];
        }
      });
    });
  }, t3.prototype.vt = function(t4) {
    this.bt = t4, this.db && (this.db.onversionchange = function(e) {
      return t4(e);
    });
  }, t3.prototype.runTransaction = function(t4, e, i, o) {
    return __awaiter(this, void 0, void 0, function() {
      var n, s, u, a, c;
      return __generator(this, function(h) {
        switch (h.label) {
          case 0:
            n = e === "readonly", s = 0, u = function() {
              var e2, u2, c2, h2, f;
              return __generator(this, function(r) {
                switch (r.label) {
                  case 0:
                    ++s, r.label = 1;
                  case 1:
                    return r.trys.push([1, 4, , 5]), [4, a.At(t4)];
                  case 2:
                    return a.db = r.sent(), e2 = Tr.open(a.db, t4, n ? "readonly" : "readwrite", i), u2 = o(e2).catch(function(t5) {
                      return e2.abort(t5), Ir.reject(t5);
                    }).toPromise(), c2 = {}, u2.catch(function() {
                    }), [4, e2.dt];
                  case 3:
                    return [2, (c2.value = (r.sent(), u2), c2)];
                  case 4:
                    return h2 = r.sent(), f = h2.name !== "FirebaseError" && s < 3, C2("SimpleDb", "Transaction failed with error:", h2.message, "Retrying:", f), a.close(), f ? [3, 5] : [2, {
                      value: Promise.reject(h2)
                    }];
                  case 5:
                    return [2];
                }
              });
            }, a = this, h.label = 1;
          case 1:
            return [5, u()];
          case 2:
            if (typeof (c = h.sent()) == "object")
              return [2, c.value];
            h.label = 3;
          case 3:
            return [3, 1];
          case 4:
            return [2];
        }
      });
    });
  }, t3.prototype.close = function() {
    this.db && this.db.close(), this.db = void 0;
  }, t3;
}();
var _r = function() {
  function t3(t4) {
    this.Pt = t4, this.Vt = false, this.St = null;
  }
  return Object.defineProperty(t3.prototype, "isDone", {
    get: function() {
      return this.Vt;
    },
    enumerable: false,
    configurable: true
  }), Object.defineProperty(t3.prototype, "Dt", {
    get: function() {
      return this.St;
    },
    enumerable: false,
    configurable: true
  }), Object.defineProperty(t3.prototype, "cursor", {
    set: function(t4) {
      this.Pt = t4;
    },
    enumerable: false,
    configurable: true
  }), t3.prototype.done = function() {
    this.Vt = true;
  }, t3.prototype.Ct = function(t4) {
    this.St = t4;
  }, t3.prototype.delete = function() {
    return Ar(this.Pt.delete());
  }, t3;
}();
var Sr = function(e) {
  function n(t3, n2) {
    var r = this;
    return (r = e.call(this, N2.UNAVAILABLE, "IndexedDB transaction '" + t3 + "' failed: " + n2) || this).name = "IndexedDbTransactionError", r;
  }
  return __extends(n, e), n;
}(D2);
function Nr(t3) {
  return t3.name === "IndexedDbTransactionError";
}
var Dr = function() {
  function t3(t4) {
    this.store = t4;
  }
  return t3.prototype.put = function(t4, e) {
    var n;
    return e !== void 0 ? (C2("SimpleDb", "PUT", this.store.name, t4, e), n = this.store.put(e, t4)) : (C2("SimpleDb", "PUT", this.store.name, "<auto-key>", t4), n = this.store.put(t4)), Ar(n);
  }, t3.prototype.add = function(t4) {
    return C2("SimpleDb", "ADD", this.store.name, t4, t4), Ar(this.store.add(t4));
  }, t3.prototype.get = function(t4) {
    var e = this;
    return Ar(this.store.get(t4)).next(function(n) {
      return n === void 0 && (n = null), C2("SimpleDb", "GET", e.store.name, t4, n), n;
    });
  }, t3.prototype.delete = function(t4) {
    return C2("SimpleDb", "DELETE", this.store.name, t4), Ar(this.store.delete(t4));
  }, t3.prototype.count = function() {
    return C2("SimpleDb", "COUNT", this.store.name), Ar(this.store.count());
  }, t3.prototype.Nt = function(t4, e) {
    var n = this.cursor(this.options(t4, e)), r = [];
    return this.xt(n, function(t5, e2) {
      r.push(e2);
    }).next(function() {
      return r;
    });
  }, t3.prototype.kt = function(t4, e) {
    C2("SimpleDb", "DELETE ALL", this.store.name);
    var n = this.options(t4, e);
    n.Ft = false;
    var r = this.cursor(n);
    return this.xt(r, function(t5, e2, n2) {
      return n2.delete();
    });
  }, t3.prototype.$t = function(t4, e) {
    var n;
    e ? n = t4 : (n = {}, e = t4);
    var r = this.cursor(n);
    return this.xt(r, e);
  }, t3.prototype.Ot = function(t4) {
    var e = this.cursor({});
    return new Ir(function(n, r) {
      e.onerror = function(t5) {
        var e2 = Cr(t5.target.error);
        r(e2);
      }, e.onsuccess = function(e2) {
        var r2 = e2.target.result;
        r2 ? t4(r2.primaryKey, r2.value).next(function(t5) {
          t5 ? r2.continue() : n();
        }) : n();
      };
    });
  }, t3.prototype.xt = function(t4, e) {
    var n = [];
    return new Ir(function(r, i) {
      t4.onerror = function(t5) {
        i(t5.target.error);
      }, t4.onsuccess = function(t5) {
        var i2 = t5.target.result;
        if (i2) {
          var o = new _r(i2), s = e(i2.primaryKey, i2.value, o);
          if (s instanceof Ir) {
            var u = s.catch(function(t6) {
              return o.done(), Ir.reject(t6);
            });
            n.push(u);
          }
          o.isDone ? r() : o.Dt === null ? i2.continue() : i2.continue(o.Dt);
        } else
          r();
      };
    }).next(function() {
      return Ir.waitFor(n);
    });
  }, t3.prototype.options = function(t4, e) {
    var n;
    return t4 !== void 0 && (typeof t4 == "string" ? n = t4 : e = t4), {
      index: n,
      range: e
    };
  }, t3.prototype.cursor = function(t4) {
    var e = "next";
    if (t4.reverse && (e = "prev"), t4.index) {
      var n = this.store.index(t4.index);
      return t4.Ft ? n.openKeyCursor(t4.range, e) : n.openCursor(t4.range, e);
    }
    return this.store.openCursor(t4.range, e);
  }, t3;
}();
function Ar(t3) {
  return new Ir(function(e, n) {
    t3.onsuccess = function(t4) {
      var n2 = t4.target.result;
      e(n2);
    }, t3.onerror = function(t4) {
      var e2 = Cr(t4.target.error);
      n(e2);
    };
  });
}
var kr = false;
function Cr(t3) {
  var e = Er._t(getUA());
  if (e >= 12.2 && e < 13) {
    var n = "An internal error was encountered in the Indexed Database server";
    if (t3.message.indexOf(n) >= 0) {
      var r = new D2("internal", "IOS_INDEXEDDB_BUG1: IndexedDb has thrown '" + n + "'. This is likely due to an unavoidable bug in iOS. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.");
      return kr || (kr = true, setTimeout(function() {
        throw r;
      }, 0)), r;
    }
  }
  return t3;
}
var xr = function(e) {
  function n(t3, n2) {
    var r = this;
    return (r = e.call(this) || this).Mt = t3, r.currentSequenceNumber = n2, r;
  }
  return __extends(n, e), n;
}(wr);
function Rr(t3, e) {
  var n = F2(t3);
  return Er.It(n.Mt, e);
}
var Lr = function() {
  function t3(t4, e, n, r) {
    this.batchId = t4, this.localWriteTime = e, this.baseMutations = n, this.mutations = r;
  }
  return t3.prototype.applyToRemoteDocument = function(t4, e) {
    for (var n = e.mutationResults, r = 0; r < this.mutations.length; r++) {
      var i = this.mutations[r];
      i.key.isEqual(t4.key) && Ce(i, t4, n[r]);
    }
  }, t3.prototype.applyToLocalView = function(t4) {
    for (var e = 0, n = this.baseMutations; e < n.length; e++) {
      (o = n[e]).key.isEqual(t4.key) && xe(o, t4, this.localWriteTime);
    }
    for (var r = 0, i = this.mutations; r < i.length; r++) {
      var o;
      (o = i[r]).key.isEqual(t4.key) && xe(o, t4, this.localWriteTime);
    }
  }, t3.prototype.applyToLocalDocumentSet = function(t4) {
    var e = this;
    this.mutations.forEach(function(n) {
      var r = t4.get(n.key), i = r;
      e.applyToLocalView(i), r.isValidDocument() || i.convertToNoDocument(K2.min());
    });
  }, t3.prototype.keys = function() {
    return this.mutations.reduce(function(t4, e) {
      return t4.add(e.key);
    }, sn());
  }, t3.prototype.isEqual = function(t4) {
    return this.batchId === t4.batchId && U2(this.mutations, t4.mutations, function(t5, e) {
      return Le(t5, e);
    }) && U2(this.baseMutations, t4.baseMutations, function(t5, e) {
      return Le(t5, e);
    });
  }, t3;
}();
var Or = function() {
  function t3(t4, e, n, r) {
    this.batch = t4, this.commitVersion = e, this.mutationResults = n, this.docVersions = r;
  }
  return t3.from = function(e, n, r) {
    P2(e.mutations.length === r.length);
    for (var i = rn(), o = e.mutations, s = 0; s < o.length; s++)
      i = i.insert(o[s].key, r[s].version);
    return new t3(e, n, r, i);
  }, t3;
}();
var Pr = function() {
  function t3(t4, e, n, r, i, o, s) {
    i === void 0 && (i = K2.min()), o === void 0 && (o = K2.min()), s === void 0 && (s = J2.EMPTY_BYTE_STRING), this.target = t4, this.targetId = e, this.purpose = n, this.sequenceNumber = r, this.snapshotVersion = i, this.lastLimboFreeSnapshotVersion = o, this.resumeToken = s;
  }
  return t3.prototype.withSequenceNumber = function(e) {
    return new t3(this.target, this.targetId, this.purpose, e, this.snapshotVersion, this.lastLimboFreeSnapshotVersion, this.resumeToken);
  }, t3.prototype.withResumeToken = function(e, n) {
    return new t3(this.target, this.targetId, this.purpose, this.sequenceNumber, n, this.lastLimboFreeSnapshotVersion, e);
  }, t3.prototype.withLastLimboFreeSnapshotVersion = function(e) {
    return new t3(this.target, this.targetId, this.purpose, this.sequenceNumber, this.snapshotVersion, e, this.resumeToken);
  }, t3;
}();
var Fr = function(t3) {
  this.Lt = t3;
};
function Mr(t3, e) {
  if (e.document)
    return On(t3.Lt, e.document, !!e.hasCommittedMutations);
  if (e.noDocument) {
    var n = ct.fromSegments(e.noDocument.path), r = jr(e.noDocument.readTime), i = Nt.newNoDocument(n, r);
    return e.hasCommittedMutations ? i.setHasCommittedMutations() : i;
  }
  if (e.unknownDocument) {
    var o = ct.fromSegments(e.unknownDocument.path);
    r = jr(e.unknownDocument.version);
    return Nt.newUnknownDocument(o, r);
  }
  return O2();
}
function Vr(t3, e, n) {
  var r = qr(n), i = e.key.path.popLast().toArray();
  if (e.isFoundDocument()) {
    var o = function(t4, e2) {
      return {
        name: Dn(t4, e2.key),
        fields: e2.data.value.mapValue.fields,
        updateTime: In(t4, e2.version.toTimestamp())
      };
    }(t3.Lt, e), s = e.hasCommittedMutations;
    return new ar(null, null, o, s, r, i);
  }
  if (e.isNoDocument()) {
    var u = e.key.path.toArray(), a = Br(e.version);
    s = e.hasCommittedMutations;
    return new ar(null, new sr(u, a), null, s, r, i);
  }
  if (e.isUnknownDocument()) {
    var c = e.key.path.toArray(), h = Br(e.version);
    return new ar(new ur(c, h), null, null, true, r, i);
  }
  return O2();
}
function qr(t3) {
  var e = t3.toTimestamp();
  return [e.seconds, e.nanoseconds];
}
function Ur(t3) {
  var e = new j(t3[0], t3[1]);
  return K2.fromTimestamp(e);
}
function Br(t3) {
  var e = t3.toTimestamp();
  return new er(e.seconds, e.nanoseconds);
}
function jr(t3) {
  var e = new j(t3.seconds, t3.nanoseconds);
  return K2.fromTimestamp(e);
}
function Kr(t3, e) {
  for (var n = (e.baseMutations || []).map(function(e2) {
    return Fn(t3.Lt, e2);
  }), r = 0; r < e.mutations.length - 1; ++r) {
    var i = e.mutations[r];
    if (r + 1 < e.mutations.length && e.mutations[r + 1].transform !== void 0) {
      var o = e.mutations[r + 1];
      i.updateTransforms = o.transform.fieldTransforms, e.mutations.splice(r + 1, 1), ++r;
    }
  }
  var s = e.mutations.map(function(e2) {
    return Fn(t3.Lt, e2);
  }), u = j.fromMillis(e.localWriteTimeMs);
  return new Lr(e.batchId, u, n, s);
}
function Qr(t3) {
  var e, n, r = jr(t3.readTime), i = t3.lastLimboFreeSnapshotVersion !== void 0 ? jr(t3.lastLimboFreeSnapshotVersion) : K2.min();
  return t3.query.documents !== void 0 ? (P2((n = t3.query).documents.length === 1), e = ne(Yt(Cn(n.documents[0])))) : e = function(t4) {
    return ne(qn(t4));
  }(t3.query), new Pr(e, t3.targetId, 0, t3.lastListenSequenceNumber, r, i, J2.fromBase64String(t3.resumeToken));
}
function Gr(t3, e) {
  var n, r = Br(e.snapshotVersion), i = Br(e.lastLimboFreeSnapshotVersion);
  n = xt(e.target) ? Mn(t3.Lt, e.target) : Vn(t3.Lt, e.target);
  var o = e.resumeToken.toBase64();
  return new hr(e.targetId, kt(e.target), r, o, e.sequenceNumber, i, n);
}
function zr(t3) {
  var e = qn({
    parent: t3.parent,
    structuredQuery: t3.structuredQuery
  });
  return t3.limitType === "LAST" ? re(e, e.limit, "L") : e;
}
var Wr = function() {
  function t3() {
  }
  return t3.prototype.getBundleMetadata = function(t4, e) {
    return Hr(t4).get(e).next(function(t5) {
      if (t5)
        return {
          id: (e2 = t5).bundleId,
          createTime: jr(e2.createTime),
          version: e2.version
        };
      var e2;
    });
  }, t3.prototype.saveBundleMetadata = function(t4, e) {
    return Hr(t4).put({
      bundleId: (n = e).id,
      createTime: Br(_n(n.createTime)),
      version: n.version
    });
    var n;
  }, t3.prototype.getNamedQuery = function(t4, e) {
    return Yr(t4).get(e).next(function(t5) {
      if (t5)
        return {
          name: (e2 = t5).name,
          query: zr(e2.bundledQuery),
          readTime: jr(e2.readTime)
        };
      var e2;
    });
  }, t3.prototype.saveNamedQuery = function(t4, e) {
    return Yr(t4).put(function(t5) {
      return {
        name: t5.name,
        readTime: Br(_n(t5.readTime)),
        bundledQuery: t5.bundledQuery
      };
    }(e));
  }, t3;
}();
function Hr(t3) {
  return Rr(t3, yr.store);
}
function Yr(t3) {
  return Rr(t3, vr.store);
}
var $r = function() {
  function t3() {
    this.Bt = new Xr();
  }
  return t3.prototype.addToCollectionParentIndex = function(t4, e) {
    return this.Bt.add(e), Ir.resolve();
  }, t3.prototype.getCollectionParents = function(t4, e) {
    return Ir.resolve(this.Bt.getEntries(e));
  }, t3;
}();
var Xr = function() {
  function t3() {
    this.index = {};
  }
  return t3.prototype.add = function(t4) {
    var e = t4.lastSegment(), n = t4.popLast(), r = this.index[e] || new $e(H2.comparator), i = !r.has(n);
    return this.index[e] = r.add(n), i;
  }, t3.prototype.has = function(t4) {
    var e = t4.lastSegment(), n = t4.popLast(), r = this.index[e];
    return r && r.has(n);
  }, t3.prototype.getEntries = function(t4) {
    return (this.index[t4] || new $e(H2.comparator)).toArray();
  }, t3;
}();
var Jr = function() {
  function t3() {
    this.qt = new Xr();
  }
  return t3.prototype.addToCollectionParentIndex = function(t4, e) {
    var n = this;
    if (!this.qt.has(e)) {
      var r = e.lastSegment(), i = e.popLast();
      t4.addOnCommittedListener(function() {
        n.qt.add(e);
      });
      var o = {
        collectionId: r,
        parent: Xn(i)
      };
      return Zr(t4).put(o);
    }
    return Ir.resolve();
  }, t3.prototype.getCollectionParents = function(t4, e) {
    var n = [], r = IDBKeyRange.bound([e, ""], [B2(e), ""], false, true);
    return Zr(t4).Nt(r).next(function(t5) {
      for (var r2 = 0, i = t5; r2 < i.length; r2++) {
        var o = i[r2];
        if (o.collectionId !== e)
          break;
        n.push(tr(o.parent));
      }
      return n;
    });
  }, t3;
}();
function Zr(t3) {
  return Rr(t3, dr.store);
}
var ti = {
  didRun: false,
  sequenceNumbersCollected: 0,
  targetsRemoved: 0,
  documentsRemoved: 0
};
var ei = function() {
  function t3(t4, e, n) {
    this.cacheSizeCollectionThreshold = t4, this.percentileToCollect = e, this.maximumSequenceNumbersToCollect = n;
  }
  return t3.withCacheSize = function(e) {
    return new t3(e, t3.DEFAULT_COLLECTION_PERCENTILE, t3.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT);
  }, t3;
}();
function ni(t3, e, n) {
  var r = t3.store(ir.store), i = t3.store(or.store), o = [], s = IDBKeyRange.only(n.batchId), u = 0, a = r.$t({
    range: s
  }, function(t4, e2, n2) {
    return u++, n2.delete();
  });
  o.push(a.next(function() {
    P2(u === 1);
  }));
  for (var c = [], h = 0, f = n.mutations; h < f.length; h++) {
    var l2 = f[h], d = or.key(e, l2.key.path, n.batchId);
    o.push(i.delete(d)), c.push(l2.key);
  }
  return Ir.waitFor(o).next(function() {
    return c;
  });
}
function ri(t3) {
  if (!t3)
    return 0;
  var e;
  if (t3.document)
    e = t3.document;
  else if (t3.unknownDocument)
    e = t3.unknownDocument;
  else {
    if (!t3.noDocument)
      throw O2();
    e = t3.noDocument;
  }
  return JSON.stringify(e).length;
}
ei.DEFAULT_COLLECTION_PERCENTILE = 10, ei.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT = 1e3, ei.DEFAULT = new ei(41943040, ei.DEFAULT_COLLECTION_PERCENTILE, ei.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT), ei.DISABLED = new ei(-1, 0, 0);
var ii = function() {
  function t3(t4, e, n, r) {
    this.userId = t4, this.R = e, this.Ut = n, this.referenceDelegate = r, this.Kt = {};
  }
  return t3.Qt = function(e, n, r, i) {
    return P2(e.uid !== ""), new t3(e.isAuthenticated() ? e.uid : "", n, r, i);
  }, t3.prototype.checkEmpty = function(t4) {
    var e = true, n = IDBKeyRange.bound([this.userId, Number.NEGATIVE_INFINITY], [this.userId, Number.POSITIVE_INFINITY]);
    return si(t4).$t({
      index: ir.userMutationsIndex,
      range: n
    }, function(t5, n2, r) {
      e = false, r.done();
    }).next(function() {
      return e;
    });
  }, t3.prototype.addMutationBatch = function(t4, e, n, r) {
    var i = this, o = ui(t4), s = si(t4);
    return s.add({}).next(function(u) {
      P2(typeof u == "number");
      for (var a = new Lr(u, e, n, r), c = function(t5, e2, n2) {
        var r2 = n2.baseMutations.map(function(e3) {
          return Pn(t5.Lt, e3);
        }), i2 = n2.mutations.map(function(e3) {
          return Pn(t5.Lt, e3);
        });
        return new ir(e2, n2.batchId, n2.localWriteTime.toMillis(), r2, i2);
      }(i.R, i.userId, a), h = [], f = new $e(function(t5, e2) {
        return q2(t5.canonicalString(), e2.canonicalString());
      }), l2 = 0, d = r; l2 < d.length; l2++) {
        var p2 = d[l2], y2 = or.key(i.userId, p2.key.path, u);
        f = f.add(p2.key.path.popLast()), h.push(s.put(c)), h.push(o.put(y2, or.PLACEHOLDER));
      }
      return f.forEach(function(e2) {
        h.push(i.Ut.addToCollectionParentIndex(t4, e2));
      }), t4.addOnCommittedListener(function() {
        i.Kt[u] = a.keys();
      }), Ir.waitFor(h).next(function() {
        return a;
      });
    });
  }, t3.prototype.lookupMutationBatch = function(t4, e) {
    var n = this;
    return si(t4).get(e).next(function(t5) {
      return t5 ? (P2(t5.userId === n.userId), Kr(n.R, t5)) : null;
    });
  }, t3.prototype.jt = function(t4, e) {
    var n = this;
    return this.Kt[e] ? Ir.resolve(this.Kt[e]) : this.lookupMutationBatch(t4, e).next(function(t5) {
      if (t5) {
        var r = t5.keys();
        return n.Kt[e] = r, r;
      }
      return null;
    });
  }, t3.prototype.getNextMutationBatchAfterBatchId = function(t4, e) {
    var n = this, r = e + 1, i = IDBKeyRange.lowerBound([this.userId, r]), o = null;
    return si(t4).$t({
      index: ir.userMutationsIndex,
      range: i
    }, function(t5, e2, i2) {
      e2.userId === n.userId && (P2(e2.batchId >= r), o = Kr(n.R, e2)), i2.done();
    }).next(function() {
      return o;
    });
  }, t3.prototype.getHighestUnacknowledgedBatchId = function(t4) {
    var e = IDBKeyRange.upperBound([this.userId, Number.POSITIVE_INFINITY]), n = -1;
    return si(t4).$t({
      index: ir.userMutationsIndex,
      range: e,
      reverse: true
    }, function(t5, e2, r) {
      n = e2.batchId, r.done();
    }).next(function() {
      return n;
    });
  }, t3.prototype.getAllMutationBatches = function(t4) {
    var e = this, n = IDBKeyRange.bound([this.userId, -1], [this.userId, Number.POSITIVE_INFINITY]);
    return si(t4).Nt(ir.userMutationsIndex, n).next(function(t5) {
      return t5.map(function(t6) {
        return Kr(e.R, t6);
      });
    });
  }, t3.prototype.getAllMutationBatchesAffectingDocumentKey = function(t4, e) {
    var n = this, r = or.prefixForPath(this.userId, e.path), i = IDBKeyRange.lowerBound(r), o = [];
    return ui(t4).$t({
      range: i
    }, function(r2, i2, s) {
      var u = r2[0], a = r2[1], c = r2[2], h = tr(a);
      if (u === n.userId && e.path.isEqual(h))
        return si(t4).get(c).next(function(t5) {
          if (!t5)
            throw O2();
          P2(t5.userId === n.userId), o.push(Kr(n.R, t5));
        });
      s.done();
    }).next(function() {
      return o;
    });
  }, t3.prototype.getAllMutationBatchesAffectingDocumentKeys = function(t4, e) {
    var n = this, r = new $e(q2), i = [];
    return e.forEach(function(e2) {
      var o = or.prefixForPath(n.userId, e2.path), s = IDBKeyRange.lowerBound(o), u = ui(t4).$t({
        range: s
      }, function(t5, i2, o2) {
        var s2 = t5[0], u2 = t5[1], a = t5[2], c = tr(u2);
        s2 === n.userId && e2.path.isEqual(c) ? r = r.add(a) : o2.done();
      });
      i.push(u);
    }), Ir.waitFor(i).next(function() {
      return n.Wt(t4, r);
    });
  }, t3.prototype.getAllMutationBatchesAffectingQuery = function(t4, e) {
    var n = this, r = e.path, i = r.length + 1, o = or.prefixForPath(this.userId, r), s = IDBKeyRange.lowerBound(o), u = new $e(q2);
    return ui(t4).$t({
      range: s
    }, function(t5, e2, o2) {
      var s2 = t5[0], a = t5[1], c = t5[2], h = tr(a);
      s2 === n.userId && r.isPrefixOf(h) ? h.length === i && (u = u.add(c)) : o2.done();
    }).next(function() {
      return n.Wt(t4, u);
    });
  }, t3.prototype.Wt = function(t4, e) {
    var n = this, r = [], i = [];
    return e.forEach(function(e2) {
      i.push(si(t4).get(e2).next(function(t5) {
        if (t5 === null)
          throw O2();
        P2(t5.userId === n.userId), r.push(Kr(n.R, t5));
      }));
    }), Ir.waitFor(i).next(function() {
      return r;
    });
  }, t3.prototype.removeMutationBatch = function(t4, e) {
    var n = this;
    return ni(t4.Mt, this.userId, e).next(function(r) {
      return t4.addOnCommittedListener(function() {
        n.Gt(e.batchId);
      }), Ir.forEach(r, function(e2) {
        return n.referenceDelegate.markPotentiallyOrphaned(t4, e2);
      });
    });
  }, t3.prototype.Gt = function(t4) {
    delete this.Kt[t4];
  }, t3.prototype.performConsistencyCheck = function(t4) {
    var e = this;
    return this.checkEmpty(t4).next(function(n) {
      if (!n)
        return Ir.resolve();
      var r = IDBKeyRange.lowerBound(or.prefixForUser(e.userId)), i = [];
      return ui(t4).$t({
        range: r
      }, function(t5, n2, r2) {
        if (t5[0] === e.userId) {
          var o = tr(t5[1]);
          i.push(o);
        } else
          r2.done();
      }).next(function() {
        P2(i.length === 0);
      });
    });
  }, t3.prototype.containsKey = function(t4, e) {
    return oi(t4, this.userId, e);
  }, t3.prototype.zt = function(t4) {
    var e = this;
    return ai(t4).get(this.userId).next(function(t5) {
      return t5 || new rr(e.userId, -1, "");
    });
  }, t3;
}();
function oi(t3, e, n) {
  var r = or.prefixForPath(e, n.path), i = r[1], o = IDBKeyRange.lowerBound(r), s = false;
  return ui(t3).$t({
    range: o,
    Ft: true
  }, function(t4, n2, r2) {
    var o2 = t4[0], u = t4[1];
    t4[2], o2 === e && u === i && (s = true), r2.done();
  }).next(function() {
    return s;
  });
}
function si(t3) {
  return Rr(t3, ir.store);
}
function ui(t3) {
  return Rr(t3, or.store);
}
function ai(t3) {
  return Rr(t3, rr.store);
}
var ci = function() {
  function t3(t4) {
    this.Ht = t4;
  }
  return t3.prototype.next = function() {
    return this.Ht += 2, this.Ht;
  }, t3.Jt = function() {
    return new t3(0);
  }, t3.Yt = function() {
    return new t3(-1);
  }, t3;
}();
var hi = function() {
  function t3(t4, e) {
    this.referenceDelegate = t4, this.R = e;
  }
  return t3.prototype.allocateTargetId = function(t4) {
    var e = this;
    return this.Xt(t4).next(function(n) {
      var r = new ci(n.highestTargetId);
      return n.highestTargetId = r.next(), e.Zt(t4, n).next(function() {
        return n.highestTargetId;
      });
    });
  }, t3.prototype.getLastRemoteSnapshotVersion = function(t4) {
    return this.Xt(t4).next(function(t5) {
      return K2.fromTimestamp(new j(t5.lastRemoteSnapshotVersion.seconds, t5.lastRemoteSnapshotVersion.nanoseconds));
    });
  }, t3.prototype.getHighestSequenceNumber = function(t4) {
    return this.Xt(t4).next(function(t5) {
      return t5.highestListenSequenceNumber;
    });
  }, t3.prototype.setTargetsMetadata = function(t4, e, n) {
    var r = this;
    return this.Xt(t4).next(function(i) {
      return i.highestListenSequenceNumber = e, n && (i.lastRemoteSnapshotVersion = n.toTimestamp()), e > i.highestListenSequenceNumber && (i.highestListenSequenceNumber = e), r.Zt(t4, i);
    });
  }, t3.prototype.addTargetData = function(t4, e) {
    var n = this;
    return this.te(t4, e).next(function() {
      return n.Xt(t4).next(function(r) {
        return r.targetCount += 1, n.ee(e, r), n.Zt(t4, r);
      });
    });
  }, t3.prototype.updateTargetData = function(t4, e) {
    return this.te(t4, e);
  }, t3.prototype.removeTargetData = function(t4, e) {
    var n = this;
    return this.removeMatchingKeysForTargetId(t4, e.targetId).next(function() {
      return fi(t4).delete(e.targetId);
    }).next(function() {
      return n.Xt(t4);
    }).next(function(e2) {
      return P2(e2.targetCount > 0), e2.targetCount -= 1, n.Zt(t4, e2);
    });
  }, t3.prototype.removeTargets = function(t4, e, n) {
    var r = this, i = 0, o = [];
    return fi(t4).$t(function(s, u) {
      var a = Qr(u);
      a.sequenceNumber <= e && n.get(a.targetId) === null && (i++, o.push(r.removeTargetData(t4, a)));
    }).next(function() {
      return Ir.waitFor(o);
    }).next(function() {
      return i;
    });
  }, t3.prototype.forEachTarget = function(t4, e) {
    return fi(t4).$t(function(t5, n) {
      var r = Qr(n);
      e(r);
    });
  }, t3.prototype.Xt = function(t4) {
    return li(t4).get(lr.key).next(function(t5) {
      return P2(t5 !== null), t5;
    });
  }, t3.prototype.Zt = function(t4, e) {
    return li(t4).put(lr.key, e);
  }, t3.prototype.te = function(t4, e) {
    return fi(t4).put(Gr(this.R, e));
  }, t3.prototype.ee = function(t4, e) {
    var n = false;
    return t4.targetId > e.highestTargetId && (e.highestTargetId = t4.targetId, n = true), t4.sequenceNumber > e.highestListenSequenceNumber && (e.highestListenSequenceNumber = t4.sequenceNumber, n = true), n;
  }, t3.prototype.getTargetCount = function(t4) {
    return this.Xt(t4).next(function(t5) {
      return t5.targetCount;
    });
  }, t3.prototype.getTargetData = function(t4, e) {
    var n = kt(e), r = IDBKeyRange.bound([n, Number.NEGATIVE_INFINITY], [n, Number.POSITIVE_INFINITY]), i = null;
    return fi(t4).$t({
      range: r,
      index: hr.queryTargetsIndexName
    }, function(t5, n2, r2) {
      var o = Qr(n2);
      Ct(e, o.target) && (i = o, r2.done());
    }).next(function() {
      return i;
    });
  }, t3.prototype.addMatchingKeys = function(t4, e, n) {
    var r = this, i = [], o = di(t4);
    return e.forEach(function(e2) {
      var s = Xn(e2.path);
      i.push(o.put(new fr(n, s))), i.push(r.referenceDelegate.addReference(t4, n, e2));
    }), Ir.waitFor(i);
  }, t3.prototype.removeMatchingKeys = function(t4, e, n) {
    var r = this, i = di(t4);
    return Ir.forEach(e, function(e2) {
      var o = Xn(e2.path);
      return Ir.waitFor([i.delete([n, o]), r.referenceDelegate.removeReference(t4, n, e2)]);
    });
  }, t3.prototype.removeMatchingKeysForTargetId = function(t4, e) {
    var n = di(t4), r = IDBKeyRange.bound([e], [e + 1], false, true);
    return n.delete(r);
  }, t3.prototype.getMatchingKeysForTargetId = function(t4, e) {
    var n = IDBKeyRange.bound([e], [e + 1], false, true), r = di(t4), i = sn();
    return r.$t({
      range: n,
      Ft: true
    }, function(t5, e2, n2) {
      var r2 = tr(t5[1]), o = new ct(r2);
      i = i.add(o);
    }).next(function() {
      return i;
    });
  }, t3.prototype.containsKey = function(t4, e) {
    var n = Xn(e.path), r = IDBKeyRange.bound([n], [B2(n)], false, true), i = 0;
    return di(t4).$t({
      index: fr.documentTargetsIndex,
      Ft: true,
      range: r
    }, function(t5, e2, n2) {
      var r2 = t5[0];
      t5[1], r2 !== 0 && (i++, n2.done());
    }).next(function() {
      return i > 0;
    });
  }, t3.prototype.lt = function(t4, e) {
    return fi(t4).get(e).next(function(t5) {
      return t5 ? Qr(t5) : null;
    });
  }, t3;
}();
function fi(t3) {
  return Rr(t3, hr.store);
}
function li(t3) {
  return Rr(t3, lr.store);
}
function di(t3) {
  return Rr(t3, fr.store);
}
function pi(t3) {
  return __awaiter(this, void 0, void 0, function() {
    return __generator(this, function(e) {
      if (t3.code !== N2.FAILED_PRECONDITION || t3.message !== gr)
        throw t3;
      return C2("LocalStore", "Unexpectedly lost primary lease"), [2];
    });
  });
}
function yi(t3, e) {
  var n = t3[0], r = t3[1], i = e[0], o = e[1], s = q2(n, i);
  return s === 0 ? q2(r, o) : s;
}
var vi = function() {
  function t3(t4) {
    this.ne = t4, this.buffer = new $e(yi), this.se = 0;
  }
  return t3.prototype.ie = function() {
    return ++this.se;
  }, t3.prototype.re = function(t4) {
    var e = [t4, this.ie()];
    if (this.buffer.size < this.ne)
      this.buffer = this.buffer.add(e);
    else {
      var n = this.buffer.last();
      yi(e, n) < 0 && (this.buffer = this.buffer.delete(n).add(e));
    }
  }, Object.defineProperty(t3.prototype, "maxValue", {
    get: function() {
      return this.buffer.last()[0];
    },
    enumerable: false,
    configurable: true
  }), t3;
}();
var mi = function() {
  function t3(t4, e) {
    this.garbageCollector = t4, this.asyncQueue = e, this.oe = false, this.ce = null;
  }
  return t3.prototype.start = function(t4) {
    this.garbageCollector.params.cacheSizeCollectionThreshold !== -1 && this.ue(t4);
  }, t3.prototype.stop = function() {
    this.ce && (this.ce.cancel(), this.ce = null);
  }, Object.defineProperty(t3.prototype, "started", {
    get: function() {
      return this.ce !== null;
    },
    enumerable: false,
    configurable: true
  }), t3.prototype.ue = function(t4) {
    var e = this, i = this.oe ? 3e5 : 6e4;
    C2("LruGarbageCollector", "Garbage collection scheduled in " + i + "ms"), this.ce = this.asyncQueue.enqueueAfterDelay("lru_garbage_collection", i, function() {
      return __awaiter(e, void 0, void 0, function() {
        var e2;
        return __generator(this, function(n) {
          switch (n.label) {
            case 0:
              this.ce = null, this.oe = true, n.label = 1;
            case 1:
              return n.trys.push([1, 3, , 7]), [4, t4.collectGarbage(this.garbageCollector)];
            case 2:
              return n.sent(), [3, 7];
            case 3:
              return Nr(e2 = n.sent()) ? (C2("LruGarbageCollector", "Ignoring IndexedDB error during garbage collection: ", e2), [3, 6]) : [3, 4];
            case 4:
              return [4, pi(e2)];
            case 5:
              n.sent(), n.label = 6;
            case 6:
              return [3, 7];
            case 7:
              return [4, this.ue(t4)];
            case 8:
              return n.sent(), [2];
          }
        });
      });
    });
  }, t3;
}();
var gi = function() {
  function t3(t4, e) {
    this.ae = t4, this.params = e;
  }
  return t3.prototype.calculateTargetCount = function(t4, e) {
    return this.ae.he(t4).next(function(t5) {
      return Math.floor(e / 100 * t5);
    });
  }, t3.prototype.nthSequenceNumber = function(t4, e) {
    var n = this;
    if (e === 0)
      return Ir.resolve(S2.o);
    var r = new vi(e);
    return this.ae.forEachTarget(t4, function(t5) {
      return r.re(t5.sequenceNumber);
    }).next(function() {
      return n.ae.le(t4, function(t5) {
        return r.re(t5);
      });
    }).next(function() {
      return r.maxValue;
    });
  }, t3.prototype.removeTargets = function(t4, e, n) {
    return this.ae.removeTargets(t4, e, n);
  }, t3.prototype.removeOrphanedDocuments = function(t4, e) {
    return this.ae.removeOrphanedDocuments(t4, e);
  }, t3.prototype.collect = function(t4, e) {
    var n = this;
    return this.params.cacheSizeCollectionThreshold === -1 ? (C2("LruGarbageCollector", "Garbage collection skipped; disabled"), Ir.resolve(ti)) : this.getCacheSize(t4).next(function(r) {
      return r < n.params.cacheSizeCollectionThreshold ? (C2("LruGarbageCollector", "Garbage collection skipped; Cache size " + r + " is lower than threshold " + n.params.cacheSizeCollectionThreshold), ti) : n.fe(t4, e);
    });
  }, t3.prototype.getCacheSize = function(t4) {
    return this.ae.getCacheSize(t4);
  }, t3.prototype.fe = function(t4, e) {
    var n, r, i, o, s, u, a, c = this, h = Date.now();
    return this.calculateTargetCount(t4, this.params.percentileToCollect).next(function(e2) {
      return e2 > c.params.maximumSequenceNumbersToCollect ? (C2("LruGarbageCollector", "Capping sequence numbers to collect down to the maximum of " + c.params.maximumSequenceNumbersToCollect + " from " + e2), r = c.params.maximumSequenceNumbersToCollect) : r = e2, o = Date.now(), c.nthSequenceNumber(t4, r);
    }).next(function(r2) {
      return n = r2, s = Date.now(), c.removeTargets(t4, n, e);
    }).next(function(e2) {
      return i = e2, u = Date.now(), c.removeOrphanedDocuments(t4, n);
    }).next(function(t5) {
      return a = Date.now(), k2() <= LogLevel.DEBUG && C2("LruGarbageCollector", "LRU Garbage Collection\n	Counted targets in " + (o - h) + "ms\n	Determined least recently used " + r + " in " + (s - o) + "ms\n	Removed " + i + " targets in " + (u - s) + "ms\n	Removed " + t5 + " documents in " + (a - u) + "ms\nTotal Duration: " + (a - h) + "ms"), Ir.resolve({
        didRun: true,
        sequenceNumbersCollected: r,
        targetsRemoved: i,
        documentsRemoved: t5
      });
    });
  }, t3;
}();
var wi = function() {
  function t3(t4, e) {
    this.db = t4, this.garbageCollector = function(t5, e2) {
      return new gi(t5, e2);
    }(this, e);
  }
  return t3.prototype.he = function(t4) {
    var e = this.de(t4);
    return this.db.getTargetCache().getTargetCount(t4).next(function(t5) {
      return e.next(function(e2) {
        return t5 + e2;
      });
    });
  }, t3.prototype.de = function(t4) {
    var e = 0;
    return this.le(t4, function(t5) {
      e++;
    }).next(function() {
      return e;
    });
  }, t3.prototype.forEachTarget = function(t4, e) {
    return this.db.getTargetCache().forEachTarget(t4, e);
  }, t3.prototype.le = function(t4, e) {
    return this.we(t4, function(t5, n) {
      return e(n);
    });
  }, t3.prototype.addReference = function(t4, e, n) {
    return bi(t4, n);
  }, t3.prototype.removeReference = function(t4, e, n) {
    return bi(t4, n);
  }, t3.prototype.removeTargets = function(t4, e, n) {
    return this.db.getTargetCache().removeTargets(t4, e, n);
  }, t3.prototype.markPotentiallyOrphaned = function(t4, e) {
    return bi(t4, e);
  }, t3.prototype._e = function(t4, e) {
    return function(t5, e2) {
      var n = false;
      return ai(t5).Ot(function(r) {
        return oi(t5, r, e2).next(function(t6) {
          return t6 && (n = true), Ir.resolve(!t6);
        });
      }).next(function() {
        return n;
      });
    }(t4, e);
  }, t3.prototype.removeOrphanedDocuments = function(t4, e) {
    var n = this, r = this.db.getRemoteDocumentCache().newChangeBuffer(), i = [], o = 0;
    return this.we(t4, function(s, u) {
      if (u <= e) {
        var a = n._e(t4, s).next(function(e2) {
          if (!e2)
            return o++, r.getEntry(t4, s).next(function() {
              return r.removeEntry(s), di(t4).delete([0, Xn(s.path)]);
            });
        });
        i.push(a);
      }
    }).next(function() {
      return Ir.waitFor(i);
    }).next(function() {
      return r.apply(t4);
    }).next(function() {
      return o;
    });
  }, t3.prototype.removeTarget = function(t4, e) {
    var n = e.withSequenceNumber(t4.currentSequenceNumber);
    return this.db.getTargetCache().updateTargetData(t4, n);
  }, t3.prototype.updateLimboDocument = function(t4, e) {
    return bi(t4, e);
  }, t3.prototype.we = function(t4, e) {
    var n, r = di(t4), i = S2.o;
    return r.$t({
      index: fr.documentTargetsIndex
    }, function(t5, r2) {
      var o = t5[0];
      t5[1];
      var s = r2.path, u = r2.sequenceNumber;
      o === 0 ? (i !== S2.o && e(new ct(tr(n)), i), i = u, n = s) : i = S2.o;
    }).next(function() {
      i !== S2.o && e(new ct(tr(n)), i);
    });
  }, t3.prototype.getCacheSize = function(t4) {
    return this.db.getRemoteDocumentCache().getSize(t4);
  }, t3;
}();
function bi(t3, e) {
  return di(t3).put(function(t4, e2) {
    return new fr(0, Xn(t4.path), e2);
  }(e, t3.currentSequenceNumber));
}
var Ii = function() {
  function t3(t4, e) {
    this.mapKeyFn = t4, this.equalsFn = e, this.inner = {};
  }
  return t3.prototype.get = function(t4) {
    var e = this.mapKeyFn(t4), n = this.inner[e];
    if (n !== void 0)
      for (var r = 0, i = n; r < i.length; r++) {
        var o = i[r], s = o[0], u = o[1];
        if (this.equalsFn(s, t4))
          return u;
      }
  }, t3.prototype.has = function(t4) {
    return this.get(t4) !== void 0;
  }, t3.prototype.set = function(t4, e) {
    var n = this.mapKeyFn(t4), r = this.inner[n];
    if (r !== void 0) {
      for (var i = 0; i < r.length; i++)
        if (this.equalsFn(r[i][0], t4))
          return void (r[i] = [t4, e]);
      r.push([t4, e]);
    } else
      this.inner[n] = [[t4, e]];
  }, t3.prototype.delete = function(t4) {
    var e = this.mapKeyFn(t4), n = this.inner[e];
    if (n === void 0)
      return false;
    for (var r = 0; r < n.length; r++)
      if (this.equalsFn(n[r][0], t4))
        return n.length === 1 ? delete this.inner[e] : n.splice(r, 1), true;
    return false;
  }, t3.prototype.forEach = function(t4) {
    G(this.inner, function(e, n) {
      for (var r = 0, i = n; r < i.length; r++) {
        var o = i[r], s = o[0], u = o[1];
        t4(s, u);
      }
    });
  }, t3.prototype.isEmpty = function() {
    return z2(this.inner);
  }, t3;
}();
var Ti = function() {
  function t3() {
    this.changes = new Ii(function(t4) {
      return t4.toString();
    }, function(t4, e) {
      return t4.isEqual(e);
    }), this.changesApplied = false;
  }
  return t3.prototype.getReadTime = function(t4) {
    var e = this.changes.get(t4);
    return e ? e.readTime : K2.min();
  }, t3.prototype.addEntry = function(t4, e) {
    this.assertNotApplied(), this.changes.set(t4.key, {
      document: t4,
      readTime: e
    });
  }, t3.prototype.removeEntry = function(t4, e) {
    e === void 0 && (e = null), this.assertNotApplied(), this.changes.set(t4, {
      document: Nt.newInvalidDocument(t4),
      readTime: e
    });
  }, t3.prototype.getEntry = function(t4, e) {
    this.assertNotApplied();
    var n = this.changes.get(e);
    return n !== void 0 ? Ir.resolve(n.document) : this.getFromCache(t4, e);
  }, t3.prototype.getEntries = function(t4, e) {
    return this.getAllFromCache(t4, e);
  }, t3.prototype.apply = function(t4) {
    return this.assertNotApplied(), this.changesApplied = true, this.applyChanges(t4);
  }, t3.prototype.assertNotApplied = function() {
  }, t3;
}();
var Ei = function() {
  function t3(t4, e) {
    this.R = t4, this.Ut = e;
  }
  return t3.prototype.addEntry = function(t4, e, n) {
    return Ni(t4).put(Di(e), n);
  }, t3.prototype.removeEntry = function(t4, e) {
    var n = Ni(t4), r = Di(e);
    return n.delete(r);
  }, t3.prototype.updateMetadata = function(t4, e) {
    var n = this;
    return this.getMetadata(t4).next(function(r) {
      return r.byteSize += e, n.me(t4, r);
    });
  }, t3.prototype.getEntry = function(t4, e) {
    var n = this;
    return Ni(t4).get(Di(e)).next(function(t5) {
      return n.ye(e, t5);
    });
  }, t3.prototype.ge = function(t4, e) {
    var n = this;
    return Ni(t4).get(Di(e)).next(function(t5) {
      return {
        document: n.ye(e, t5),
        size: ri(t5)
      };
    });
  }, t3.prototype.getEntries = function(t4, e) {
    var n = this, r = Ze();
    return this.pe(t4, e, function(t5, e2) {
      var i = n.ye(t5, e2);
      r = r.insert(t5, i);
    }).next(function() {
      return r;
    });
  }, t3.prototype.Ee = function(t4, e) {
    var n = this, r = Ze(), i = new We(ct.comparator);
    return this.pe(t4, e, function(t5, e2) {
      var o = n.ye(t5, e2);
      r = r.insert(t5, o), i = i.insert(t5, ri(e2));
    }).next(function() {
      return {
        documents: r,
        Te: i
      };
    });
  }, t3.prototype.pe = function(t4, e, n) {
    if (e.isEmpty())
      return Ir.resolve();
    var r = IDBKeyRange.bound(e.first().path.toArray(), e.last().path.toArray()), i = e.getIterator(), o = i.getNext();
    return Ni(t4).$t({
      range: r
    }, function(t5, e2, r2) {
      for (var s = ct.fromSegments(t5); o && ct.comparator(o, s) < 0; )
        n(o, null), o = i.getNext();
      o && o.isEqual(s) && (n(o, e2), o = i.hasNext() ? i.getNext() : null), o ? r2.Ct(o.path.toArray()) : r2.done();
    }).next(function() {
      for (; o; )
        n(o, null), o = i.hasNext() ? i.getNext() : null;
    });
  }, t3.prototype.getDocumentsMatchingQuery = function(t4, e, n) {
    var r = this, i = Ze(), o = e.path.length + 1, s = {};
    if (n.isEqual(K2.min())) {
      var u = e.path.toArray();
      s.range = IDBKeyRange.lowerBound(u);
    } else {
      var a = e.path.toArray(), c = qr(n);
      s.range = IDBKeyRange.lowerBound([a, c], true), s.index = ar.collectionReadTimeIndex;
    }
    return Ni(t4).$t(s, function(t5, n2, s2) {
      if (t5.length === o) {
        var u2 = Mr(r.R, n2);
        e.path.isPrefixOf(u2.key.path) ? ue(e, u2) && (i = i.insert(u2.key, u2)) : s2.done();
      }
    }).next(function() {
      return i;
    });
  }, t3.prototype.newChangeBuffer = function(t4) {
    return new _i(this, !!t4 && t4.trackRemovals);
  }, t3.prototype.getSize = function(t4) {
    return this.getMetadata(t4).next(function(t5) {
      return t5.byteSize;
    });
  }, t3.prototype.getMetadata = function(t4) {
    return Si(t4).get(cr.key).next(function(t5) {
      return P2(!!t5), t5;
    });
  }, t3.prototype.me = function(t4, e) {
    return Si(t4).put(cr.key, e);
  }, t3.prototype.ye = function(t4, e) {
    if (e) {
      var n = Mr(this.R, e);
      if (!n.isNoDocument() || !n.version.isEqual(K2.min()))
        return n;
    }
    return Nt.newInvalidDocument(t4);
  }, t3;
}();
var _i = function(e) {
  function n(t3, n2) {
    var r = this;
    return (r = e.call(this) || this).Ie = t3, r.trackRemovals = n2, r.Ae = new Ii(function(t4) {
      return t4.toString();
    }, function(t4, e2) {
      return t4.isEqual(e2);
    }), r;
  }
  return __extends(n, e), n.prototype.applyChanges = function(t3) {
    var e2 = this, n2 = [], r = 0, i = new $e(function(t4, e3) {
      return q2(t4.canonicalString(), e3.canonicalString());
    });
    return this.changes.forEach(function(o, s) {
      var u = e2.Ae.get(o);
      if (s.document.isValidDocument()) {
        var a = Vr(e2.Ie.R, s.document, e2.getReadTime(o));
        i = i.add(o.path.popLast());
        var c = ri(a);
        r += c - u, n2.push(e2.Ie.addEntry(t3, o, a));
      } else if (r -= u, e2.trackRemovals) {
        var h = Vr(e2.Ie.R, Nt.newNoDocument(o, K2.min()), e2.getReadTime(o));
        n2.push(e2.Ie.addEntry(t3, o, h));
      } else
        n2.push(e2.Ie.removeEntry(t3, o));
    }), i.forEach(function(r2) {
      n2.push(e2.Ie.Ut.addToCollectionParentIndex(t3, r2));
    }), n2.push(this.Ie.updateMetadata(t3, r)), Ir.waitFor(n2);
  }, n.prototype.getFromCache = function(t3, e2) {
    var n2 = this;
    return this.Ie.ge(t3, e2).next(function(t4) {
      return n2.Ae.set(e2, t4.size), t4.document;
    });
  }, n.prototype.getAllFromCache = function(t3, e2) {
    var n2 = this;
    return this.Ie.Ee(t3, e2).next(function(t4) {
      var e3 = t4.documents;
      return t4.Te.forEach(function(t5, e4) {
        n2.Ae.set(t5, e4);
      }), e3;
    });
  }, n;
}(Ti);
function Si(t3) {
  return Rr(t3, cr.store);
}
function Ni(t3) {
  return Rr(t3, ar.store);
}
function Di(t3) {
  return t3.path.toArray();
}
var Ai = function() {
  function t3(t4) {
    this.R = t4;
  }
  return t3.prototype.Rt = function(t4, e, n, r) {
    var i = this;
    P2(n < r && n >= 0 && r <= 11);
    var o = new Tr("createOrUpgrade", e);
    n < 1 && r >= 1 && (function(t5) {
      t5.createObjectStore(nr.store);
    }(t4), function(t5) {
      t5.createObjectStore(rr.store, {
        keyPath: rr.keyPath
      }), t5.createObjectStore(ir.store, {
        keyPath: ir.keyPath,
        autoIncrement: true
      }).createIndex(ir.userMutationsIndex, ir.userMutationsKeyPath, {
        unique: true
      }), t5.createObjectStore(or.store);
    }(t4), ki(t4), function(t5) {
      t5.createObjectStore(ar.store);
    }(t4));
    var s = Ir.resolve();
    return n < 3 && r >= 3 && (n !== 0 && (function(t5) {
      t5.deleteObjectStore(fr.store), t5.deleteObjectStore(hr.store), t5.deleteObjectStore(lr.store);
    }(t4), ki(t4)), s = s.next(function() {
      return function(t5) {
        var e2 = t5.store(lr.store), n2 = new lr(0, 0, K2.min().toTimestamp(), 0);
        return e2.put(lr.key, n2);
      }(o);
    })), n < 4 && r >= 4 && (n !== 0 && (s = s.next(function() {
      return function(t5, e2) {
        return e2.store(ir.store).Nt().next(function(n2) {
          t5.deleteObjectStore(ir.store), t5.createObjectStore(ir.store, {
            keyPath: ir.keyPath,
            autoIncrement: true
          }).createIndex(ir.userMutationsIndex, ir.userMutationsKeyPath, {
            unique: true
          });
          var r2 = e2.store(ir.store), i2 = n2.map(function(t6) {
            return r2.put(t6);
          });
          return Ir.waitFor(i2);
        });
      }(t4, o);
    })), s = s.next(function() {
      !function(t5) {
        t5.createObjectStore(pr.store, {
          keyPath: pr.keyPath
        });
      }(t4);
    })), n < 5 && r >= 5 && (s = s.next(function() {
      return i.Re(o);
    })), n < 6 && r >= 6 && (s = s.next(function() {
      return function(t5) {
        t5.createObjectStore(cr.store);
      }(t4), i.be(o);
    })), n < 7 && r >= 7 && (s = s.next(function() {
      return i.ve(o);
    })), n < 8 && r >= 8 && (s = s.next(function() {
      return i.Pe(t4, o);
    })), n < 9 && r >= 9 && (s = s.next(function() {
      !function(t5) {
        t5.objectStoreNames.contains("remoteDocumentChanges") && t5.deleteObjectStore("remoteDocumentChanges");
      }(t4), function(t5) {
        var e2 = t5.objectStore(ar.store);
        e2.createIndex(ar.readTimeIndex, ar.readTimeIndexPath, {
          unique: false
        }), e2.createIndex(ar.collectionReadTimeIndex, ar.collectionReadTimeIndexPath, {
          unique: false
        });
      }(e);
    })), n < 10 && r >= 10 && (s = s.next(function() {
      return i.Ve(o);
    })), n < 11 && r >= 11 && (s = s.next(function() {
      !function(t5) {
        t5.createObjectStore(yr.store, {
          keyPath: yr.keyPath
        });
      }(t4), function(t5) {
        t5.createObjectStore(vr.store, {
          keyPath: vr.keyPath
        });
      }(t4);
    })), s;
  }, t3.prototype.be = function(t4) {
    var e = 0;
    return t4.store(ar.store).$t(function(t5, n) {
      e += ri(n);
    }).next(function() {
      var n = new cr(e);
      return t4.store(cr.store).put(cr.key, n);
    });
  }, t3.prototype.Re = function(t4) {
    var e = this, n = t4.store(rr.store), r = t4.store(ir.store);
    return n.Nt().next(function(n2) {
      return Ir.forEach(n2, function(n3) {
        var i = IDBKeyRange.bound([n3.userId, -1], [n3.userId, n3.lastAcknowledgedBatchId]);
        return r.Nt(ir.userMutationsIndex, i).next(function(r2) {
          return Ir.forEach(r2, function(r3) {
            P2(r3.userId === n3.userId);
            var i2 = Kr(e.R, r3);
            return ni(t4, n3.userId, i2).next(function() {
            });
          });
        });
      });
    });
  }, t3.prototype.ve = function(t4) {
    var e = t4.store(fr.store), n = t4.store(ar.store);
    return t4.store(lr.store).get(lr.key).next(function(t5) {
      var r = [];
      return n.$t(function(n2, i) {
        var o = new H2(n2), s = function(t6) {
          return [0, Xn(t6)];
        }(o);
        r.push(e.get(s).next(function(n3) {
          return n3 ? Ir.resolve() : function(n4) {
            return e.put(new fr(0, Xn(n4), t5.highestListenSequenceNumber));
          }(o);
        }));
      }).next(function() {
        return Ir.waitFor(r);
      });
    });
  }, t3.prototype.Pe = function(t4, e) {
    t4.createObjectStore(dr.store, {
      keyPath: dr.keyPath
    });
    var n = e.store(dr.store), r = new Xr(), i = function(t5) {
      if (r.add(t5)) {
        var e2 = t5.lastSegment(), i2 = t5.popLast();
        return n.put({
          collectionId: e2,
          parent: Xn(i2)
        });
      }
    };
    return e.store(ar.store).$t({
      Ft: true
    }, function(t5, e2) {
      var n2 = new H2(t5);
      return i(n2.popLast());
    }).next(function() {
      return e.store(or.store).$t({
        Ft: true
      }, function(t5, e2) {
        t5[0];
        var n2 = t5[1];
        t5[2];
        var r2 = tr(n2);
        return i(r2.popLast());
      });
    });
  }, t3.prototype.Ve = function(t4) {
    var e = this, n = t4.store(hr.store);
    return n.$t(function(t5, r) {
      var i = Qr(r), o = Gr(e.R, i);
      return n.put(o);
    });
  }, t3;
}();
function ki(t3) {
  t3.createObjectStore(fr.store, {
    keyPath: fr.keyPath
  }).createIndex(fr.documentTargetsIndex, fr.documentTargetsKeyPath, {
    unique: true
  }), t3.createObjectStore(hr.store, {
    keyPath: hr.keyPath
  }).createIndex(hr.queryTargetsIndexName, hr.queryTargetsKeyPath, {
    unique: true
  }), t3.createObjectStore(lr.store);
}
var Ci = "Failed to obtain exclusive access to the persistence layer. To allow shared access, multi-tab synchronization has to be enabled in all tabs. If you are using `experimentalForceOwningTab:true`, make sure that only one tab has persistence enabled at any given time.";
var xi = function() {
  function t3(e, n, r, i, o, s, u, a, c, h) {
    if (this.allowTabSynchronization = e, this.persistenceKey = n, this.clientId = r, this.Se = o, this.window = s, this.document = u, this.De = c, this.Ce = h, this.Ne = null, this.xe = false, this.isPrimary = false, this.networkEnabled = true, this.ke = null, this.inForeground = false, this.Fe = null, this.$e = null, this.Oe = Number.NEGATIVE_INFINITY, this.Me = function(t4) {
      return Promise.resolve();
    }, !t3.yt())
      throw new D2(N2.UNIMPLEMENTED, "This platform is either missing IndexedDB or is known to have an incomplete implementation. Offline persistence has been disabled.");
    this.referenceDelegate = new wi(this, i), this.Le = n + "main", this.R = new Fr(a), this.Be = new Er(this.Le, 11, new Ai(this.R)), this.qe = new hi(this.referenceDelegate, this.R), this.Ut = new Jr(), this.Ue = function(t4, e2) {
      return new Ei(t4, e2);
    }(this.R, this.Ut), this.Ke = new Wr(), this.window && this.window.localStorage ? this.Qe = this.window.localStorage : (this.Qe = null, h === false && x2("IndexedDbPersistence", "LocalStorage is unavailable. As a result, persistence may not work reliably. In particular enablePersistence() could fail immediately after refreshing the page."));
  }
  return t3.prototype.start = function() {
    var t4 = this;
    return this.je().then(function() {
      if (!t4.isPrimary && !t4.allowTabSynchronization)
        throw new D2(N2.FAILED_PRECONDITION, Ci);
      return t4.We(), t4.Ge(), t4.ze(), t4.runTransaction("getHighestListenSequenceNumber", "readonly", function(e) {
        return t4.qe.getHighestSequenceNumber(e);
      });
    }).then(function(e) {
      t4.Ne = new S2(e, t4.De);
    }).then(function() {
      t4.xe = true;
    }).catch(function(e) {
      return t4.Be && t4.Be.close(), Promise.reject(e);
    });
  }, t3.prototype.He = function(t4) {
    var e = this;
    return this.Me = function(i) {
      return __awaiter(e, void 0, void 0, function() {
        return __generator(this, function(e2) {
          return this.started ? [2, t4(i)] : [2];
        });
      });
    }, t4(this.isPrimary);
  }, t3.prototype.setDatabaseDeletedListener = function(t4) {
    var e = this;
    this.Be.vt(function(i) {
      return __awaiter(e, void 0, void 0, function() {
        return __generator(this, function(e2) {
          switch (e2.label) {
            case 0:
              return i.newVersion === null ? [4, t4()] : [3, 2];
            case 1:
              e2.sent(), e2.label = 2;
            case 2:
              return [2];
          }
        });
      });
    });
  }, t3.prototype.setNetworkEnabled = function(t4) {
    var e = this;
    this.networkEnabled !== t4 && (this.networkEnabled = t4, this.Se.enqueueAndForget(function() {
      return __awaiter(e, void 0, void 0, function() {
        return __generator(this, function(t5) {
          switch (t5.label) {
            case 0:
              return this.started ? [4, this.je()] : [3, 2];
            case 1:
              t5.sent(), t5.label = 2;
            case 2:
              return [2];
          }
        });
      });
    }));
  }, t3.prototype.je = function() {
    var t4 = this;
    return this.runTransaction("updateClientMetadataAndTryBecomePrimary", "readwrite", function(e) {
      return Li(e).put(new pr(t4.clientId, Date.now(), t4.networkEnabled, t4.inForeground)).next(function() {
        if (t4.isPrimary)
          return t4.Je(e).next(function(e2) {
            e2 || (t4.isPrimary = false, t4.Se.enqueueRetryable(function() {
              return t4.Me(false);
            }));
          });
      }).next(function() {
        return t4.Ye(e);
      }).next(function(n) {
        return t4.isPrimary && !n ? t4.Xe(e).next(function() {
          return false;
        }) : !!n && t4.Ze(e).next(function() {
          return true;
        });
      });
    }).catch(function(e) {
      if (Nr(e))
        return C2("IndexedDbPersistence", "Failed to extend owner lease: ", e), t4.isPrimary;
      if (!t4.allowTabSynchronization)
        throw e;
      return C2("IndexedDbPersistence", "Releasing owner lease after error during lease refresh", e), false;
    }).then(function(e) {
      t4.isPrimary !== e && t4.Se.enqueueRetryable(function() {
        return t4.Me(e);
      }), t4.isPrimary = e;
    });
  }, t3.prototype.Je = function(t4) {
    var e = this;
    return Ri(t4).get(nr.key).next(function(t5) {
      return Ir.resolve(e.tn(t5));
    });
  }, t3.prototype.en = function(t4) {
    return Li(t4).delete(this.clientId);
  }, t3.prototype.nn = function() {
    return __awaiter(this, void 0, void 0, function() {
      var t4, e, n, i, o = this;
      return __generator(this, function(r) {
        switch (r.label) {
          case 0:
            return !this.isPrimary || this.sn(this.Oe, 18e5) ? [3, 2] : (this.Oe = Date.now(), [4, this.runTransaction("maybeGarbageCollectMultiClientState", "readwrite-primary", function(t5) {
              var e2 = Rr(t5, pr.store);
              return e2.Nt().next(function(t6) {
                var n2 = o.rn(t6, 18e5), r2 = t6.filter(function(t7) {
                  return n2.indexOf(t7) === -1;
                });
                return Ir.forEach(r2, function(t7) {
                  return e2.delete(t7.clientId);
                }).next(function() {
                  return r2;
                });
              });
            }).catch(function() {
              return [];
            })]);
          case 1:
            if (t4 = r.sent(), this.Qe)
              for (e = 0, n = t4; e < n.length; e++)
                i = n[e], this.Qe.removeItem(this.on(i.clientId));
            r.label = 2;
          case 2:
            return [2];
        }
      });
    });
  }, t3.prototype.ze = function() {
    var t4 = this;
    this.$e = this.Se.enqueueAfterDelay("client_metadata_refresh", 4e3, function() {
      return t4.je().then(function() {
        return t4.nn();
      }).then(function() {
        return t4.ze();
      });
    });
  }, t3.prototype.tn = function(t4) {
    return !!t4 && t4.ownerId === this.clientId;
  }, t3.prototype.Ye = function(t4) {
    var e = this;
    return this.Ce ? Ir.resolve(true) : Ri(t4).get(nr.key).next(function(n) {
      if (n !== null && e.sn(n.leaseTimestampMs, 5e3) && !e.cn(n.ownerId)) {
        if (e.tn(n) && e.networkEnabled)
          return true;
        if (!e.tn(n)) {
          if (!n.allowTabSynchronization)
            throw new D2(N2.FAILED_PRECONDITION, Ci);
          return false;
        }
      }
      return !(!e.networkEnabled || !e.inForeground) || Li(t4).Nt().next(function(t5) {
        return e.rn(t5, 5e3).find(function(t6) {
          if (e.clientId !== t6.clientId) {
            var n2 = !e.networkEnabled && t6.networkEnabled, r = !e.inForeground && t6.inForeground, i = e.networkEnabled === t6.networkEnabled;
            if (n2 || r && i)
              return true;
          }
          return false;
        }) === void 0;
      });
    }).next(function(t5) {
      return e.isPrimary !== t5 && C2("IndexedDbPersistence", "Client " + (t5 ? "is" : "is not") + " eligible for a primary lease."), t5;
    });
  }, t3.prototype.shutdown = function() {
    return __awaiter(this, void 0, void 0, function() {
      var t4 = this;
      return __generator(this, function(e) {
        switch (e.label) {
          case 0:
            return this.xe = false, this.un(), this.$e && (this.$e.cancel(), this.$e = null), this.an(), this.hn(), [4, this.Be.runTransaction("shutdown", "readwrite", [nr.store, pr.store], function(e2) {
              var n = new xr(e2, S2.o);
              return t4.Xe(n).next(function() {
                return t4.en(n);
              });
            })];
          case 1:
            return e.sent(), this.Be.close(), this.ln(), [2];
        }
      });
    });
  }, t3.prototype.rn = function(t4, e) {
    var n = this;
    return t4.filter(function(t5) {
      return n.sn(t5.updateTimeMs, e) && !n.cn(t5.clientId);
    });
  }, t3.prototype.fn = function() {
    var t4 = this;
    return this.runTransaction("getActiveClients", "readonly", function(e) {
      return Li(e).Nt().next(function(e2) {
        return t4.rn(e2, 18e5).map(function(t5) {
          return t5.clientId;
        });
      });
    });
  }, Object.defineProperty(t3.prototype, "started", {
    get: function() {
      return this.xe;
    },
    enumerable: false,
    configurable: true
  }), t3.prototype.getMutationQueue = function(t4) {
    return ii.Qt(t4, this.R, this.Ut, this.referenceDelegate);
  }, t3.prototype.getTargetCache = function() {
    return this.qe;
  }, t3.prototype.getRemoteDocumentCache = function() {
    return this.Ue;
  }, t3.prototype.getIndexManager = function() {
    return this.Ut;
  }, t3.prototype.getBundleCache = function() {
    return this.Ke;
  }, t3.prototype.runTransaction = function(t4, e, n) {
    var r = this;
    C2("IndexedDbPersistence", "Starting transaction:", t4);
    var i, o = e === "readonly" ? "readonly" : "readwrite";
    return this.Be.runTransaction(t4, o, mr, function(o2) {
      return i = new xr(o2, r.Ne ? r.Ne.next() : S2.o), e === "readwrite-primary" ? r.Je(i).next(function(t5) {
        return !!t5 || r.Ye(i);
      }).next(function(e2) {
        if (!e2)
          throw x2("Failed to obtain primary lease for action '" + t4 + "'."), r.isPrimary = false, r.Se.enqueueRetryable(function() {
            return r.Me(false);
          }), new D2(N2.FAILED_PRECONDITION, gr);
        return n(i);
      }).next(function(t5) {
        return r.Ze(i).next(function() {
          return t5;
        });
      }) : r.dn(i).next(function() {
        return n(i);
      });
    }).then(function(t5) {
      return i.raiseOnCommittedEvent(), t5;
    });
  }, t3.prototype.dn = function(t4) {
    var e = this;
    return Ri(t4).get(nr.key).next(function(t5) {
      if (t5 !== null && e.sn(t5.leaseTimestampMs, 5e3) && !e.cn(t5.ownerId) && !e.tn(t5) && !(e.Ce || e.allowTabSynchronization && t5.allowTabSynchronization))
        throw new D2(N2.FAILED_PRECONDITION, Ci);
    });
  }, t3.prototype.Ze = function(t4) {
    var e = new nr(this.clientId, this.allowTabSynchronization, Date.now());
    return Ri(t4).put(nr.key, e);
  }, t3.yt = function() {
    return Er.yt();
  }, t3.prototype.Xe = function(t4) {
    var e = this, n = Ri(t4);
    return n.get(nr.key).next(function(t5) {
      return e.tn(t5) ? (C2("IndexedDbPersistence", "Releasing primary lease."), n.delete(nr.key)) : Ir.resolve();
    });
  }, t3.prototype.sn = function(t4, e) {
    var n = Date.now();
    return !(t4 < n - e || t4 > n && (x2("Detected an update time that is in the future: " + t4 + " > " + n), 1));
  }, t3.prototype.We = function() {
    var t4 = this;
    this.document !== null && typeof this.document.addEventListener == "function" && (this.Fe = function() {
      t4.Se.enqueueAndForget(function() {
        return t4.inForeground = t4.document.visibilityState === "visible", t4.je();
      });
    }, this.document.addEventListener("visibilitychange", this.Fe), this.inForeground = this.document.visibilityState === "visible");
  }, t3.prototype.an = function() {
    this.Fe && (this.document.removeEventListener("visibilitychange", this.Fe), this.Fe = null);
  }, t3.prototype.Ge = function() {
    var t4, e = this;
    typeof ((t4 = this.window) === null || t4 === void 0 ? void 0 : t4.addEventListener) == "function" && (this.ke = function() {
      e.un(), isSafari() && navigator.appVersion.match("Version/14") && e.Se.enterRestrictedMode(true), e.Se.enqueueAndForget(function() {
        return e.shutdown();
      });
    }, this.window.addEventListener("pagehide", this.ke));
  }, t3.prototype.hn = function() {
    this.ke && (this.window.removeEventListener("pagehide", this.ke), this.ke = null);
  }, t3.prototype.cn = function(t4) {
    var e;
    try {
      var n = ((e = this.Qe) === null || e === void 0 ? void 0 : e.getItem(this.on(t4))) !== null;
      return C2("IndexedDbPersistence", "Client '" + t4 + "' " + (n ? "is" : "is not") + " zombied in LocalStorage"), n;
    } catch (t5) {
      return x2("IndexedDbPersistence", "Failed to get zombied client id.", t5), false;
    }
  }, t3.prototype.un = function() {
    if (this.Qe)
      try {
        this.Qe.setItem(this.on(this.clientId), String(Date.now()));
      } catch (t4) {
        x2("Failed to set zombie client id.", t4);
      }
  }, t3.prototype.ln = function() {
    if (this.Qe)
      try {
        this.Qe.removeItem(this.on(this.clientId));
      } catch (t4) {
      }
  }, t3.prototype.on = function(t4) {
    return "firestore_zombie_" + this.persistenceKey + "_" + t4;
  }, t3;
}();
function Ri(t3) {
  return Rr(t3, nr.store);
}
function Li(t3) {
  return Rr(t3, pr.store);
}
function Oi(t3, e) {
  var n = t3.projectId;
  return t3.isDefaultDatabase || (n += "." + t3.database), "firestore/" + e + "/" + n + "/";
}
var Pi = function(t3, e) {
  this.progress = t3, this.wn = e;
};
var Fi = function() {
  function t3(t4, e, n) {
    this.Ue = t4, this._n = e, this.Ut = n;
  }
  return t3.prototype.mn = function(t4, e) {
    var n = this;
    return this._n.getAllMutationBatchesAffectingDocumentKey(t4, e).next(function(r) {
      return n.yn(t4, e, r);
    });
  }, t3.prototype.yn = function(t4, e, n) {
    return this.Ue.getEntry(t4, e).next(function(t5) {
      for (var e2 = 0, r = n; e2 < r.length; e2++) {
        r[e2].applyToLocalView(t5);
      }
      return t5;
    });
  }, t3.prototype.gn = function(t4, e) {
    t4.forEach(function(t5, n) {
      for (var r = 0, i = e; r < i.length; r++) {
        i[r].applyToLocalView(n);
      }
    });
  }, t3.prototype.pn = function(t4, e) {
    var n = this;
    return this.Ue.getEntries(t4, e).next(function(e2) {
      return n.En(t4, e2).next(function() {
        return e2;
      });
    });
  }, t3.prototype.En = function(t4, e) {
    var n = this;
    return this._n.getAllMutationBatchesAffectingDocumentKeys(t4, e).next(function(t5) {
      return n.gn(e, t5);
    });
  }, t3.prototype.getDocumentsMatchingQuery = function(t4, e, n) {
    return function(t5) {
      return ct.isDocumentKey(t5.path) && t5.collectionGroup === null && t5.filters.length === 0;
    }(e) ? this.Tn(t4, e.path) : te(e) ? this.In(t4, e, n) : this.An(t4, e, n);
  }, t3.prototype.Tn = function(t4, e) {
    return this.mn(t4, new ct(e)).next(function(t5) {
      var e2 = en();
      return t5.isFoundDocument() && (e2 = e2.insert(t5.key, t5)), e2;
    });
  }, t3.prototype.In = function(t4, e, n) {
    var r = this, i = e.collectionGroup, o = en();
    return this.Ut.getCollectionParents(t4, i).next(function(s) {
      return Ir.forEach(s, function(s2) {
        var u = function(t5, e2) {
          return new Wt(e2, null, t5.explicitOrderBy.slice(), t5.filters.slice(), t5.limit, t5.limitType, t5.startAt, t5.endAt);
        }(e, s2.child(i));
        return r.An(t4, u, n).next(function(t5) {
          t5.forEach(function(t6, e2) {
            o = o.insert(t6, e2);
          });
        });
      }).next(function() {
        return o;
      });
    });
  }, t3.prototype.An = function(t4, e, n) {
    var r, i, o = this;
    return this.Ue.getDocumentsMatchingQuery(t4, e, n).next(function(n2) {
      return r = n2, o._n.getAllMutationBatchesAffectingQuery(t4, e);
    }).next(function(e2) {
      return i = e2, o.Rn(t4, i, r).next(function(t5) {
        r = t5;
        for (var e3 = 0, n2 = i; e3 < n2.length; e3++)
          for (var o2 = n2[e3], s = 0, u = o2.mutations; s < u.length; s++) {
            var a = u[s], c = a.key, h = r.get(c);
            h == null && (h = Nt.newInvalidDocument(c), r = r.insert(c, h)), xe(a, h, o2.localWriteTime), h.isFoundDocument() || (r = r.remove(c));
          }
      });
    }).next(function() {
      return r.forEach(function(t5, n2) {
        ue(e, n2) || (r = r.remove(t5));
      }), r;
    });
  }, t3.prototype.Rn = function(t4, e, n) {
    for (var r = sn(), i = 0, o = e; i < o.length; i++)
      for (var s = 0, u = o[i].mutations; s < u.length; s++) {
        var a = u[s];
        a instanceof Fe && n.get(a.key) === null && (r = r.add(a.key));
      }
    var c = n;
    return this.Ue.getEntries(t4, r).next(function(t5) {
      return t5.forEach(function(t6, e2) {
        e2.isFoundDocument() && (c = c.insert(t6, e2));
      }), c;
    });
  }, t3;
}();
var Mi = function() {
  function t3(t4, e, n, r) {
    this.targetId = t4, this.fromCache = e, this.bn = n, this.vn = r;
  }
  return t3.Pn = function(e, n) {
    for (var r = sn(), i = sn(), o = 0, s = n.docChanges; o < s.length; o++) {
      var u = s[o];
      switch (u.type) {
        case 0:
          r = r.add(u.doc.key);
          break;
        case 1:
          i = i.add(u.doc.key);
      }
    }
    return new t3(e, n.fromCache, r, i);
  }, t3;
}();
var Vi = function() {
  function t3() {
  }
  return t3.prototype.Vn = function(t4) {
    this.Sn = t4;
  }, t3.prototype.getDocumentsMatchingQuery = function(t4, e, n, r) {
    var i = this;
    return function(t5) {
      return t5.filters.length === 0 && t5.limit === null && t5.startAt == null && t5.endAt == null && (t5.explicitOrderBy.length === 0 || t5.explicitOrderBy.length === 1 && t5.explicitOrderBy[0].field.isKeyField());
    }(e) || n.isEqual(K2.min()) ? this.Dn(t4, e) : this.Sn.pn(t4, r).next(function(o) {
      var s = i.Cn(e, o);
      return ($t(e) || Xt(e)) && i.Nn(e.limitType, s, r, n) ? i.Dn(t4, e) : (k2() <= LogLevel.DEBUG && C2("QueryEngine", "Re-using previous result from %s to execute query: %s", n.toString(), se(e)), i.Sn.getDocumentsMatchingQuery(t4, e, n).next(function(t5) {
        return s.forEach(function(e2) {
          t5 = t5.insert(e2.key, e2);
        }), t5;
      }));
    });
  }, t3.prototype.Cn = function(t4, e) {
    var n = new $e(ae(t4));
    return e.forEach(function(e2, r) {
      ue(t4, r) && (n = n.add(r));
    }), n;
  }, t3.prototype.Nn = function(t4, e, n, r) {
    if (n.size !== e.size)
      return true;
    var i = t4 === "F" ? e.last() : e.first();
    return !!i && (i.hasPendingWrites || i.version.compareTo(r) > 0);
  }, t3.prototype.Dn = function(t4, e) {
    return k2() <= LogLevel.DEBUG && C2("QueryEngine", "Using full collection scan to execute query:", se(e)), this.Sn.getDocumentsMatchingQuery(t4, e, K2.min());
  }, t3;
}();
var qi = function() {
  function t3(t4, e, n, r) {
    this.persistence = t4, this.xn = e, this.R = r, this.kn = new We(q2), this.Fn = new Ii(function(t5) {
      return kt(t5);
    }, Ct), this.$n = K2.min(), this._n = t4.getMutationQueue(n), this.On = t4.getRemoteDocumentCache(), this.qe = t4.getTargetCache(), this.Mn = new Fi(this.On, this._n, this.persistence.getIndexManager()), this.Ke = t4.getBundleCache(), this.xn.Vn(this.Mn);
  }
  return t3.prototype.collectGarbage = function(t4) {
    var e = this;
    return this.persistence.runTransaction("Collect garbage", "readwrite-primary", function(n) {
      return t4.collect(n, e.kn);
    });
  }, t3;
}();
function Ui(t3, e, n, r) {
  return new qi(t3, e, n, r);
}
function Bi(t3, e) {
  return __awaiter(this, void 0, void 0, function() {
    var n, i, o, s;
    return __generator(this, function(r) {
      switch (r.label) {
        case 0:
          return n = F2(t3), i = n._n, o = n.Mn, [4, n.persistence.runTransaction("Handle user change", "readonly", function(t4) {
            var r2;
            return n._n.getAllMutationBatches(t4).next(function(s2) {
              return r2 = s2, i = n.persistence.getMutationQueue(e), o = new Fi(n.On, i, n.persistence.getIndexManager()), i.getAllMutationBatches(t4);
            }).next(function(e2) {
              for (var n2 = [], i2 = [], s2 = sn(), u = 0, a = r2; u < a.length; u++) {
                var c = a[u];
                n2.push(c.batchId);
                for (var h = 0, f = c.mutations; h < f.length; h++) {
                  var l2 = f[h];
                  s2 = s2.add(l2.key);
                }
              }
              for (var d = 0, p2 = e2; d < p2.length; d++) {
                var y2 = p2[d];
                i2.push(y2.batchId);
                for (var v2 = 0, m = y2.mutations; v2 < m.length; v2++) {
                  var g = m[v2];
                  s2 = s2.add(g.key);
                }
              }
              return o.pn(t4, s2).next(function(t5) {
                return {
                  Ln: t5,
                  removedBatchIds: n2,
                  addedBatchIds: i2
                };
              });
            });
          })];
        case 1:
          return s = r.sent(), [2, (n._n = i, n.Mn = o, n.xn.Vn(n.Mn), s)];
      }
    });
  });
}
function ji(t3, e) {
  var n = F2(t3);
  return n.persistence.runTransaction("Acknowledge batch", "readwrite-primary", function(t4) {
    var r = e.batch.keys(), i = n.On.newChangeBuffer({
      trackRemovals: true
    });
    return function(t5, e2, n2, r2) {
      var i2 = n2.batch, o = i2.keys(), s = Ir.resolve();
      return o.forEach(function(t6) {
        s = s.next(function() {
          return r2.getEntry(e2, t6);
        }).next(function(e3) {
          var o2 = n2.docVersions.get(t6);
          P2(o2 !== null), e3.version.compareTo(o2) < 0 && (i2.applyToRemoteDocument(e3, n2), e3.isValidDocument() && r2.addEntry(e3, n2.commitVersion));
        });
      }), s.next(function() {
        return t5._n.removeMutationBatch(e2, i2);
      });
    }(n, t4, e, i).next(function() {
      return i.apply(t4);
    }).next(function() {
      return n._n.performConsistencyCheck(t4);
    }).next(function() {
      return n.Mn.pn(t4, r);
    });
  });
}
function Ki(t3) {
  var e = F2(t3);
  return e.persistence.runTransaction("Get last remote snapshot version", "readonly", function(t4) {
    return e.qe.getLastRemoteSnapshotVersion(t4);
  });
}
function Qi(t3, e) {
  var n = F2(t3), r = e.snapshotVersion, i = n.kn;
  return n.persistence.runTransaction("Apply remote event", "readwrite-primary", function(t4) {
    var o = n.On.newChangeBuffer({
      trackRemovals: true
    });
    i = n.kn;
    var s = [];
    e.targetChanges.forEach(function(e2, o2) {
      var u2 = i.get(o2);
      if (u2) {
        s.push(n.qe.removeMatchingKeys(t4, e2.removedDocuments, o2).next(function() {
          return n.qe.addMatchingKeys(t4, e2.addedDocuments, o2);
        }));
        var a2 = e2.resumeToken;
        if (a2.approximateByteSize() > 0) {
          var c = u2.withResumeToken(a2, r).withSequenceNumber(t4.currentSequenceNumber);
          i = i.insert(o2, c), function(t5, e3, n2) {
            return P2(e3.resumeToken.approximateByteSize() > 0), t5.resumeToken.approximateByteSize() === 0 || (e3.snapshotVersion.toMicroseconds() - t5.snapshotVersion.toMicroseconds() >= 3e8 || n2.addedDocuments.size + n2.modifiedDocuments.size + n2.removedDocuments.size > 0);
          }(u2, c, e2) && s.push(n.qe.updateTargetData(t4, c));
        }
      }
    });
    var u = Ze();
    if (e.documentUpdates.forEach(function(r2, i2) {
      e.resolvedLimboDocuments.has(r2) && s.push(n.persistence.referenceDelegate.updateLimboDocument(t4, r2));
    }), s.push(Gi(t4, o, e.documentUpdates, r, void 0).next(function(t5) {
      u = t5;
    })), !r.isEqual(K2.min())) {
      var a = n.qe.getLastRemoteSnapshotVersion(t4).next(function(e2) {
        return n.qe.setTargetsMetadata(t4, t4.currentSequenceNumber, r);
      });
      s.push(a);
    }
    return Ir.waitFor(s).next(function() {
      return o.apply(t4);
    }).next(function() {
      return n.Mn.En(t4, u);
    }).next(function() {
      return u;
    });
  }).then(function(t4) {
    return n.kn = i, t4;
  });
}
function Gi(t3, e, n, r, i) {
  var o = sn();
  return n.forEach(function(t4) {
    return o = o.add(t4);
  }), e.getEntries(t3, o).next(function(t4) {
    var o2 = Ze();
    return n.forEach(function(n2, s) {
      var u = t4.get(n2), a = (i == null ? void 0 : i.get(n2)) || r;
      s.isNoDocument() && s.version.isEqual(K2.min()) ? (e.removeEntry(n2, a), o2 = o2.insert(n2, s)) : !u.isValidDocument() || s.version.compareTo(u.version) > 0 || s.version.compareTo(u.version) === 0 && u.hasPendingWrites ? (e.addEntry(s, a), o2 = o2.insert(n2, s)) : C2("LocalStore", "Ignoring outdated watch update for ", n2, ". Current version:", u.version, " Watch version:", s.version);
    }), o2;
  });
}
function zi(t3, e) {
  var n = F2(t3);
  return n.persistence.runTransaction("Get next mutation batch", "readonly", function(t4) {
    return e === void 0 && (e = -1), n._n.getNextMutationBatchAfterBatchId(t4, e);
  });
}
function Wi(t3, e) {
  var n = F2(t3);
  return n.persistence.runTransaction("Allocate target", "readwrite", function(t4) {
    var r;
    return n.qe.getTargetData(t4, e).next(function(i) {
      return i ? (r = i, Ir.resolve(r)) : n.qe.allocateTargetId(t4).next(function(i2) {
        return r = new Pr(e, i2, 0, t4.currentSequenceNumber), n.qe.addTargetData(t4, r).next(function() {
          return r;
        });
      });
    });
  }).then(function(t4) {
    var r = n.kn.get(t4.targetId);
    return (r === null || t4.snapshotVersion.compareTo(r.snapshotVersion) > 0) && (n.kn = n.kn.insert(t4.targetId, t4), n.Fn.set(e, t4.targetId)), t4;
  });
}
function Hi(t3, e, i) {
  return __awaiter(this, void 0, void 0, function() {
    var n, o, s, u;
    return __generator(this, function(r) {
      switch (r.label) {
        case 0:
          n = F2(t3), o = n.kn.get(e), s = i ? "readwrite" : "readwrite-primary", r.label = 1;
        case 1:
          return r.trys.push([1, 4, , 5]), i ? [3, 3] : [4, n.persistence.runTransaction("Release target", s, function(t4) {
            return n.persistence.referenceDelegate.removeTarget(t4, o);
          })];
        case 2:
          r.sent(), r.label = 3;
        case 3:
          return [3, 5];
        case 4:
          if (!Nr(u = r.sent()))
            throw u;
          return C2("LocalStore", "Failed to update sequence numbers for target " + e + ": " + u), [3, 5];
        case 5:
          return n.kn = n.kn.remove(e), n.Fn.delete(o.target), [2];
      }
    });
  });
}
function Yi(t3, e, n) {
  var r = F2(t3), i = K2.min(), o = sn();
  return r.persistence.runTransaction("Execute query", "readonly", function(t4) {
    return function(t5, e2, n2) {
      var r2 = F2(t5), i2 = r2.Fn.get(n2);
      return i2 !== void 0 ? Ir.resolve(r2.kn.get(i2)) : r2.qe.getTargetData(e2, n2);
    }(r, t4, ne(e)).next(function(e2) {
      if (e2)
        return i = e2.lastLimboFreeSnapshotVersion, r.qe.getMatchingKeysForTargetId(t4, e2.targetId).next(function(t5) {
          o = t5;
        });
    }).next(function() {
      return r.xn.getDocumentsMatchingQuery(t4, e, n ? i : K2.min(), n ? o : sn());
    }).next(function(t5) {
      return {
        documents: t5,
        Bn: o
      };
    });
  });
}
function $i(t3, e) {
  var n = F2(t3), r = F2(n.qe), i = n.kn.get(e);
  return i ? Promise.resolve(i.target) : n.persistence.runTransaction("Get target data", "readonly", function(t4) {
    return r.lt(t4, e).next(function(t5) {
      return t5 ? t5.target : null;
    });
  });
}
function Xi(t3) {
  var e = F2(t3);
  return e.persistence.runTransaction("Get new document changes", "readonly", function(t4) {
    return function(t5, e2, n) {
      var r = F2(t5), i = Ze(), o = qr(n), s = Ni(e2), u = IDBKeyRange.lowerBound(o, true);
      return s.$t({
        index: ar.readTimeIndex,
        range: u
      }, function(t6, e3) {
        var n2 = Mr(r.R, e3);
        i = i.insert(n2.key, n2), o = e3.readTime;
      }).next(function() {
        return {
          wn: i,
          readTime: Ur(o)
        };
      });
    }(e.On, t4, e.$n);
  }).then(function(t4) {
    var n = t4.wn, r = t4.readTime;
    return e.$n = r, n;
  });
}
function Ji(t3) {
  return __awaiter(this, void 0, void 0, function() {
    var e;
    return __generator(this, function(n) {
      return [2, (e = F2(t3)).persistence.runTransaction("Synchronize last document change read time", "readonly", function(t4) {
        return function(t5) {
          var e2 = Ni(t5), n2 = K2.min();
          return e2.$t({
            index: ar.readTimeIndex,
            reverse: true
          }, function(t6, e3, r) {
            e3.readTime && (n2 = Ur(e3.readTime)), r.done();
          }).next(function() {
            return n2;
          });
        }(t4);
      }).then(function(t4) {
        e.$n = t4;
      })];
    });
  });
}
function Zi(t3, e, i, o) {
  return __awaiter(this, void 0, void 0, function() {
    var n, s, u, a, c, h, f, l2, d, p2;
    return __generator(this, function(r) {
      switch (r.label) {
        case 0:
          for (n = F2(t3), s = sn(), u = Ze(), a = rn(), c = 0, h = i; c < h.length; c++)
            f = h[c], l2 = e.qn(f.metadata.name), f.document && (s = s.add(l2)), u = u.insert(l2, e.Un(f)), a = a.insert(l2, e.Kn(f.metadata.readTime));
          return d = n.On.newChangeBuffer({
            trackRemovals: true
          }), [4, Wi(n, function(t4) {
            return ne(Yt(H2.fromString("__bundle__/docs/" + t4)));
          }(o))];
        case 1:
          return p2 = r.sent(), [2, n.persistence.runTransaction("Apply bundle documents", "readwrite", function(t4) {
            return Gi(t4, d, u, K2.min(), a).next(function(e2) {
              return d.apply(t4), e2;
            }).next(function(e2) {
              return n.qe.removeMatchingKeysForTargetId(t4, p2.targetId).next(function() {
                return n.qe.addMatchingKeys(t4, s, p2.targetId);
              }).next(function() {
                return n.Mn.En(t4, e2);
              }).next(function() {
                return e2;
              });
            });
          })];
      }
    });
  });
}
function to(t3, e, i) {
  return i === void 0 && (i = sn()), __awaiter(this, void 0, void 0, function() {
    var n, o;
    return __generator(this, function(r) {
      switch (r.label) {
        case 0:
          return [4, Wi(t3, ne(zr(e.bundledQuery)))];
        case 1:
          return n = r.sent(), [2, (o = F2(t3)).persistence.runTransaction("Save named query", "readwrite", function(t4) {
            var r2 = _n(e.readTime);
            if (n.snapshotVersion.compareTo(r2) >= 0)
              return o.Ke.saveNamedQuery(t4, e);
            var s = n.withResumeToken(J2.EMPTY_BYTE_STRING, r2);
            return o.kn = o.kn.insert(s.targetId, s), o.qe.updateTargetData(t4, s).next(function() {
              return o.qe.removeMatchingKeysForTargetId(t4, n.targetId);
            }).next(function() {
              return o.qe.addMatchingKeys(t4, i, n.targetId);
            }).next(function() {
              return o.Ke.saveNamedQuery(t4, e);
            });
          })];
      }
    });
  });
}
var eo = function() {
  function t3(t4) {
    this.R = t4, this.Qn = new Map(), this.jn = new Map();
  }
  return t3.prototype.getBundleMetadata = function(t4, e) {
    return Ir.resolve(this.Qn.get(e));
  }, t3.prototype.saveBundleMetadata = function(t4, e) {
    var n;
    return this.Qn.set(e.id, {
      id: (n = e).id,
      version: n.version,
      createTime: _n(n.createTime)
    }), Ir.resolve();
  }, t3.prototype.getNamedQuery = function(t4, e) {
    return Ir.resolve(this.jn.get(e));
  }, t3.prototype.saveNamedQuery = function(t4, e) {
    return this.jn.set(e.name, function(t5) {
      return {
        name: t5.name,
        query: zr(t5.bundledQuery),
        readTime: _n(t5.readTime)
      };
    }(e)), Ir.resolve();
  }, t3;
}();
var no = function() {
  function t3() {
    this.Wn = new $e(ro.Gn), this.zn = new $e(ro.Hn);
  }
  return t3.prototype.isEmpty = function() {
    return this.Wn.isEmpty();
  }, t3.prototype.addReference = function(t4, e) {
    var n = new ro(t4, e);
    this.Wn = this.Wn.add(n), this.zn = this.zn.add(n);
  }, t3.prototype.Jn = function(t4, e) {
    var n = this;
    t4.forEach(function(t5) {
      return n.addReference(t5, e);
    });
  }, t3.prototype.removeReference = function(t4, e) {
    this.Yn(new ro(t4, e));
  }, t3.prototype.Xn = function(t4, e) {
    var n = this;
    t4.forEach(function(t5) {
      return n.removeReference(t5, e);
    });
  }, t3.prototype.Zn = function(t4) {
    var e = this, n = new ct(new H2([])), r = new ro(n, t4), i = new ro(n, t4 + 1), o = [];
    return this.zn.forEachInRange([r, i], function(t5) {
      e.Yn(t5), o.push(t5.key);
    }), o;
  }, t3.prototype.ts = function() {
    var t4 = this;
    this.Wn.forEach(function(e) {
      return t4.Yn(e);
    });
  }, t3.prototype.Yn = function(t4) {
    this.Wn = this.Wn.delete(t4), this.zn = this.zn.delete(t4);
  }, t3.prototype.es = function(t4) {
    var e = new ct(new H2([])), n = new ro(e, t4), r = new ro(e, t4 + 1), i = sn();
    return this.zn.forEachInRange([n, r], function(t5) {
      i = i.add(t5.key);
    }), i;
  }, t3.prototype.containsKey = function(t4) {
    var e = new ro(t4, 0), n = this.Wn.firstAfterOrEqual(e);
    return n !== null && t4.isEqual(n.key);
  }, t3;
}();
var ro = function() {
  function t3(t4, e) {
    this.key = t4, this.ns = e;
  }
  return t3.Gn = function(t4, e) {
    return ct.comparator(t4.key, e.key) || q2(t4.ns, e.ns);
  }, t3.Hn = function(t4, e) {
    return q2(t4.ns, e.ns) || ct.comparator(t4.key, e.key);
  }, t3;
}();
var io = function() {
  function t3(t4, e) {
    this.Ut = t4, this.referenceDelegate = e, this._n = [], this.ss = 1, this.rs = new $e(ro.Gn);
  }
  return t3.prototype.checkEmpty = function(t4) {
    return Ir.resolve(this._n.length === 0);
  }, t3.prototype.addMutationBatch = function(t4, e, n, r) {
    var i = this.ss;
    this.ss++, this._n.length > 0 && this._n[this._n.length - 1];
    var o = new Lr(i, e, n, r);
    this._n.push(o);
    for (var s = 0, u = r; s < u.length; s++) {
      var a = u[s];
      this.rs = this.rs.add(new ro(a.key, i)), this.Ut.addToCollectionParentIndex(t4, a.key.path.popLast());
    }
    return Ir.resolve(o);
  }, t3.prototype.lookupMutationBatch = function(t4, e) {
    return Ir.resolve(this.os(e));
  }, t3.prototype.getNextMutationBatchAfterBatchId = function(t4, e) {
    var n = e + 1, r = this.cs(n), i = r < 0 ? 0 : r;
    return Ir.resolve(this._n.length > i ? this._n[i] : null);
  }, t3.prototype.getHighestUnacknowledgedBatchId = function() {
    return Ir.resolve(this._n.length === 0 ? -1 : this.ss - 1);
  }, t3.prototype.getAllMutationBatches = function(t4) {
    return Ir.resolve(this._n.slice());
  }, t3.prototype.getAllMutationBatchesAffectingDocumentKey = function(t4, e) {
    var n = this, r = new ro(e, 0), i = new ro(e, Number.POSITIVE_INFINITY), o = [];
    return this.rs.forEachInRange([r, i], function(t5) {
      var e2 = n.os(t5.ns);
      o.push(e2);
    }), Ir.resolve(o);
  }, t3.prototype.getAllMutationBatchesAffectingDocumentKeys = function(t4, e) {
    var n = this, r = new $e(q2);
    return e.forEach(function(t5) {
      var e2 = new ro(t5, 0), i = new ro(t5, Number.POSITIVE_INFINITY);
      n.rs.forEachInRange([e2, i], function(t6) {
        r = r.add(t6.ns);
      });
    }), Ir.resolve(this.us(r));
  }, t3.prototype.getAllMutationBatchesAffectingQuery = function(t4, e) {
    var n = e.path, r = n.length + 1, i = n;
    ct.isDocumentKey(i) || (i = i.child(""));
    var o = new ro(new ct(i), 0), s = new $e(q2);
    return this.rs.forEachWhile(function(t5) {
      var e2 = t5.key.path;
      return !!n.isPrefixOf(e2) && (e2.length === r && (s = s.add(t5.ns)), true);
    }, o), Ir.resolve(this.us(s));
  }, t3.prototype.us = function(t4) {
    var e = this, n = [];
    return t4.forEach(function(t5) {
      var r = e.os(t5);
      r !== null && n.push(r);
    }), n;
  }, t3.prototype.removeMutationBatch = function(t4, e) {
    var n = this;
    P2(this.hs(e.batchId, "removed") === 0), this._n.shift();
    var r = this.rs;
    return Ir.forEach(e.mutations, function(i) {
      var o = new ro(i.key, e.batchId);
      return r = r.delete(o), n.referenceDelegate.markPotentiallyOrphaned(t4, i.key);
    }).next(function() {
      n.rs = r;
    });
  }, t3.prototype.Gt = function(t4) {
  }, t3.prototype.containsKey = function(t4, e) {
    var n = new ro(e, 0), r = this.rs.firstAfterOrEqual(n);
    return Ir.resolve(e.isEqual(r && r.key));
  }, t3.prototype.performConsistencyCheck = function(t4) {
    return this._n.length, Ir.resolve();
  }, t3.prototype.hs = function(t4, e) {
    return this.cs(t4);
  }, t3.prototype.cs = function(t4) {
    return this._n.length === 0 ? 0 : t4 - this._n[0].batchId;
  }, t3.prototype.os = function(t4) {
    var e = this.cs(t4);
    return e < 0 || e >= this._n.length ? null : this._n[e];
  }, t3;
}();
var oo = function() {
  function t3(t4, e) {
    this.Ut = t4, this.ls = e, this.docs = new We(ct.comparator), this.size = 0;
  }
  return t3.prototype.addEntry = function(t4, e, n) {
    var r = e.key, i = this.docs.get(r), o = i ? i.size : 0, s = this.ls(e);
    return this.docs = this.docs.insert(r, {
      document: e.clone(),
      size: s,
      readTime: n
    }), this.size += s - o, this.Ut.addToCollectionParentIndex(t4, r.path.popLast());
  }, t3.prototype.removeEntry = function(t4) {
    var e = this.docs.get(t4);
    e && (this.docs = this.docs.remove(t4), this.size -= e.size);
  }, t3.prototype.getEntry = function(t4, e) {
    var n = this.docs.get(e);
    return Ir.resolve(n ? n.document.clone() : Nt.newInvalidDocument(e));
  }, t3.prototype.getEntries = function(t4, e) {
    var n = this, r = Ze();
    return e.forEach(function(t5) {
      var e2 = n.docs.get(t5);
      r = r.insert(t5, e2 ? e2.document.clone() : Nt.newInvalidDocument(t5));
    }), Ir.resolve(r);
  }, t3.prototype.getDocumentsMatchingQuery = function(t4, e, n) {
    for (var r = Ze(), i = new ct(e.path.child("")), o = this.docs.getIteratorFrom(i); o.hasNext(); ) {
      var s = o.getNext(), u = s.key, a = s.value, c = a.document, h = a.readTime;
      if (!e.path.isPrefixOf(u.path))
        break;
      h.compareTo(n) <= 0 || ue(e, c) && (r = r.insert(c.key, c.clone()));
    }
    return Ir.resolve(r);
  }, t3.prototype.fs = function(t4, e) {
    return Ir.forEach(this.docs, function(t5) {
      return e(t5);
    });
  }, t3.prototype.newChangeBuffer = function(t4) {
    return new so(this);
  }, t3.prototype.getSize = function(t4) {
    return Ir.resolve(this.size);
  }, t3;
}();
var so = function(e) {
  function n(t3) {
    var n2 = this;
    return (n2 = e.call(this) || this).Ie = t3, n2;
  }
  return __extends(n, e), n.prototype.applyChanges = function(t3) {
    var e2 = this, n2 = [];
    return this.changes.forEach(function(r, i) {
      i.document.isValidDocument() ? n2.push(e2.Ie.addEntry(t3, i.document, e2.getReadTime(r))) : e2.Ie.removeEntry(r);
    }), Ir.waitFor(n2);
  }, n.prototype.getFromCache = function(t3, e2) {
    return this.Ie.getEntry(t3, e2);
  }, n.prototype.getAllFromCache = function(t3, e2) {
    return this.Ie.getEntries(t3, e2);
  }, n;
}(Ti);
var uo = function() {
  function t3(t4) {
    this.persistence = t4, this.ds = new Ii(function(t5) {
      return kt(t5);
    }, Ct), this.lastRemoteSnapshotVersion = K2.min(), this.highestTargetId = 0, this.ws = 0, this._s = new no(), this.targetCount = 0, this.ys = ci.Jt();
  }
  return t3.prototype.forEachTarget = function(t4, e) {
    return this.ds.forEach(function(t5, n) {
      return e(n);
    }), Ir.resolve();
  }, t3.prototype.getLastRemoteSnapshotVersion = function(t4) {
    return Ir.resolve(this.lastRemoteSnapshotVersion);
  }, t3.prototype.getHighestSequenceNumber = function(t4) {
    return Ir.resolve(this.ws);
  }, t3.prototype.allocateTargetId = function(t4) {
    return this.highestTargetId = this.ys.next(), Ir.resolve(this.highestTargetId);
  }, t3.prototype.setTargetsMetadata = function(t4, e, n) {
    return n && (this.lastRemoteSnapshotVersion = n), e > this.ws && (this.ws = e), Ir.resolve();
  }, t3.prototype.te = function(t4) {
    this.ds.set(t4.target, t4);
    var e = t4.targetId;
    e > this.highestTargetId && (this.ys = new ci(e), this.highestTargetId = e), t4.sequenceNumber > this.ws && (this.ws = t4.sequenceNumber);
  }, t3.prototype.addTargetData = function(t4, e) {
    return this.te(e), this.targetCount += 1, Ir.resolve();
  }, t3.prototype.updateTargetData = function(t4, e) {
    return this.te(e), Ir.resolve();
  }, t3.prototype.removeTargetData = function(t4, e) {
    return this.ds.delete(e.target), this._s.Zn(e.targetId), this.targetCount -= 1, Ir.resolve();
  }, t3.prototype.removeTargets = function(t4, e, n) {
    var r = this, i = 0, o = [];
    return this.ds.forEach(function(s, u) {
      u.sequenceNumber <= e && n.get(u.targetId) === null && (r.ds.delete(s), o.push(r.removeMatchingKeysForTargetId(t4, u.targetId)), i++);
    }), Ir.waitFor(o).next(function() {
      return i;
    });
  }, t3.prototype.getTargetCount = function(t4) {
    return Ir.resolve(this.targetCount);
  }, t3.prototype.getTargetData = function(t4, e) {
    var n = this.ds.get(e) || null;
    return Ir.resolve(n);
  }, t3.prototype.addMatchingKeys = function(t4, e, n) {
    return this._s.Jn(e, n), Ir.resolve();
  }, t3.prototype.removeMatchingKeys = function(t4, e, n) {
    this._s.Xn(e, n);
    var r = this.persistence.referenceDelegate, i = [];
    return r && e.forEach(function(e2) {
      i.push(r.markPotentiallyOrphaned(t4, e2));
    }), Ir.waitFor(i);
  }, t3.prototype.removeMatchingKeysForTargetId = function(t4, e) {
    return this._s.Zn(e), Ir.resolve();
  }, t3.prototype.getMatchingKeysForTargetId = function(t4, e) {
    var n = this._s.es(e);
    return Ir.resolve(n);
  }, t3.prototype.containsKey = function(t4, e) {
    return Ir.resolve(this._s.containsKey(e));
  }, t3;
}();
var ao = function() {
  function t3(t4, e) {
    var n = this;
    this.gs = {}, this.Ne = new S2(0), this.xe = false, this.xe = true, this.referenceDelegate = t4(this), this.qe = new uo(this), this.Ut = new $r(), this.Ue = function(t5, e2) {
      return new oo(t5, function(t6) {
        return n.referenceDelegate.ps(t6);
      });
    }(this.Ut), this.R = new Fr(e), this.Ke = new eo(this.R);
  }
  return t3.prototype.start = function() {
    return Promise.resolve();
  }, t3.prototype.shutdown = function() {
    return this.xe = false, Promise.resolve();
  }, Object.defineProperty(t3.prototype, "started", {
    get: function() {
      return this.xe;
    },
    enumerable: false,
    configurable: true
  }), t3.prototype.setDatabaseDeletedListener = function() {
  }, t3.prototype.setNetworkEnabled = function() {
  }, t3.prototype.getIndexManager = function() {
    return this.Ut;
  }, t3.prototype.getMutationQueue = function(t4) {
    var e = this.gs[t4.toKey()];
    return e || (e = new io(this.Ut, this.referenceDelegate), this.gs[t4.toKey()] = e), e;
  }, t3.prototype.getTargetCache = function() {
    return this.qe;
  }, t3.prototype.getRemoteDocumentCache = function() {
    return this.Ue;
  }, t3.prototype.getBundleCache = function() {
    return this.Ke;
  }, t3.prototype.runTransaction = function(t4, e, n) {
    var r = this;
    C2("MemoryPersistence", "Starting transaction:", t4);
    var i = new co(this.Ne.next());
    return this.referenceDelegate.Es(), n(i).next(function(t5) {
      return r.referenceDelegate.Ts(i).next(function() {
        return t5;
      });
    }).toPromise().then(function(t5) {
      return i.raiseOnCommittedEvent(), t5;
    });
  }, t3.prototype.Is = function(t4, e) {
    return Ir.or(Object.values(this.gs).map(function(n) {
      return function() {
        return n.containsKey(t4, e);
      };
    }));
  }, t3;
}();
var co = function(e) {
  function n(t3) {
    var n2 = this;
    return (n2 = e.call(this) || this).currentSequenceNumber = t3, n2;
  }
  return __extends(n, e), n;
}(wr);
var ho = function() {
  function t3(t4) {
    this.persistence = t4, this.As = new no(), this.Rs = null;
  }
  return t3.bs = function(e) {
    return new t3(e);
  }, Object.defineProperty(t3.prototype, "vs", {
    get: function() {
      if (this.Rs)
        return this.Rs;
      throw O2();
    },
    enumerable: false,
    configurable: true
  }), t3.prototype.addReference = function(t4, e, n) {
    return this.As.addReference(n, e), this.vs.delete(n.toString()), Ir.resolve();
  }, t3.prototype.removeReference = function(t4, e, n) {
    return this.As.removeReference(n, e), this.vs.add(n.toString()), Ir.resolve();
  }, t3.prototype.markPotentiallyOrphaned = function(t4, e) {
    return this.vs.add(e.toString()), Ir.resolve();
  }, t3.prototype.removeTarget = function(t4, e) {
    var n = this;
    this.As.Zn(e.targetId).forEach(function(t5) {
      return n.vs.add(t5.toString());
    });
    var r = this.persistence.getTargetCache();
    return r.getMatchingKeysForTargetId(t4, e.targetId).next(function(t5) {
      t5.forEach(function(t6) {
        return n.vs.add(t6.toString());
      });
    }).next(function() {
      return r.removeTargetData(t4, e);
    });
  }, t3.prototype.Es = function() {
    this.Rs = new Set();
  }, t3.prototype.Ts = function(t4) {
    var e = this, n = this.persistence.getRemoteDocumentCache().newChangeBuffer();
    return Ir.forEach(this.vs, function(r) {
      var i = ct.fromPath(r);
      return e.Ps(t4, i).next(function(t5) {
        t5 || n.removeEntry(i);
      });
    }).next(function() {
      return e.Rs = null, n.apply(t4);
    });
  }, t3.prototype.updateLimboDocument = function(t4, e) {
    var n = this;
    return this.Ps(t4, e).next(function(t5) {
      t5 ? n.vs.delete(e.toString()) : n.vs.add(e.toString());
    });
  }, t3.prototype.ps = function(t4) {
    return 0;
  }, t3.prototype.Ps = function(t4, e) {
    var n = this;
    return Ir.or([function() {
      return Ir.resolve(n.As.containsKey(e));
    }, function() {
      return n.persistence.getTargetCache().containsKey(t4, e);
    }, function() {
      return n.persistence.Is(t4, e);
    }]);
  }, t3;
}();
var fo = function() {
  function t3(t4) {
    this.uid = t4;
  }
  return t3.prototype.isAuthenticated = function() {
    return this.uid != null;
  }, t3.prototype.toKey = function() {
    return this.isAuthenticated() ? "uid:" + this.uid : "anonymous-user";
  }, t3.prototype.isEqual = function(t4) {
    return t4.uid === this.uid;
  }, t3;
}();
function lo(t3, e) {
  return "firestore_clients_" + t3 + "_" + e;
}
function po(t3, e, n) {
  var r = "firestore_mutations_" + t3 + "_" + n;
  return e.isAuthenticated() && (r += "_" + e.uid), r;
}
function yo(t3, e) {
  return "firestore_targets_" + t3 + "_" + e;
}
fo.UNAUTHENTICATED = new fo(null), fo.GOOGLE_CREDENTIALS = new fo("google-credentials-uid"), fo.FIRST_PARTY = new fo("first-party-uid"), fo.MOCK_USER = new fo("mock-user");
var vo = function() {
  function t3(t4, e, n, r) {
    this.user = t4, this.batchId = e, this.state = n, this.error = r;
  }
  return t3.Vs = function(e, n, r) {
    var i, o = JSON.parse(r), s = typeof o == "object" && ["pending", "acknowledged", "rejected"].indexOf(o.state) !== -1 && (o.error === void 0 || typeof o.error == "object");
    return s && o.error && ((s = typeof o.error.message == "string" && typeof o.error.code == "string") && (i = new D2(o.error.code, o.error.message))), s ? new t3(e, n, o.state, i) : (x2("SharedClientState", "Failed to parse mutation state for ID '" + n + "': " + r), null);
  }, t3.prototype.Ss = function() {
    var t4 = {
      state: this.state,
      updateTimeMs: Date.now()
    };
    return this.error && (t4.error = {
      code: this.error.code,
      message: this.error.message
    }), JSON.stringify(t4);
  }, t3;
}();
var mo = function() {
  function t3(t4, e, n) {
    this.targetId = t4, this.state = e, this.error = n;
  }
  return t3.Vs = function(e, n) {
    var r, i = JSON.parse(n), o = typeof i == "object" && ["not-current", "current", "rejected"].indexOf(i.state) !== -1 && (i.error === void 0 || typeof i.error == "object");
    return o && i.error && ((o = typeof i.error.message == "string" && typeof i.error.code == "string") && (r = new D2(i.error.code, i.error.message))), o ? new t3(e, i.state, r) : (x2("SharedClientState", "Failed to parse target state for ID '" + e + "': " + n), null);
  }, t3.prototype.Ss = function() {
    var t4 = {
      state: this.state,
      updateTimeMs: Date.now()
    };
    return this.error && (t4.error = {
      code: this.error.code,
      message: this.error.message
    }), JSON.stringify(t4);
  }, t3;
}();
var go = function() {
  function t3(t4, e) {
    this.clientId = t4, this.activeTargetIds = e;
  }
  return t3.Vs = function(e, n) {
    for (var r = JSON.parse(n), i = typeof r == "object" && r.activeTargetIds instanceof Array, o = an(), s = 0; i && s < r.activeTargetIds.length; ++s)
      i = at(r.activeTargetIds[s]), o = o.add(r.activeTargetIds[s]);
    return i ? new t3(e, o) : (x2("SharedClientState", "Failed to parse client data for instance '" + e + "': " + n), null);
  }, t3;
}();
var wo = function() {
  function t3(t4, e) {
    this.clientId = t4, this.onlineState = e;
  }
  return t3.Vs = function(e) {
    var n = JSON.parse(e);
    return typeof n == "object" && ["Unknown", "Online", "Offline"].indexOf(n.onlineState) !== -1 && typeof n.clientId == "string" ? new t3(n.clientId, n.onlineState) : (x2("SharedClientState", "Failed to parse online state: " + e), null);
  }, t3;
}();
var bo = function() {
  function t3() {
    this.activeTargetIds = an();
  }
  return t3.prototype.Ds = function(t4) {
    this.activeTargetIds = this.activeTargetIds.add(t4);
  }, t3.prototype.Cs = function(t4) {
    this.activeTargetIds = this.activeTargetIds.delete(t4);
  }, t3.prototype.Ss = function() {
    var t4 = {
      activeTargetIds: this.activeTargetIds.toArray(),
      updateTimeMs: Date.now()
    };
    return JSON.stringify(t4);
  }, t3;
}();
var Io = function() {
  function t3(t4, e, n, r, i) {
    this.window = t4, this.Se = e, this.persistenceKey = n, this.Ns = r, this.syncEngine = null, this.onlineStateHandler = null, this.sequenceNumberHandler = null, this.xs = this.ks.bind(this), this.Fs = new We(q2), this.started = false, this.$s = [];
    var o = n.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
    this.storage = this.window.localStorage, this.currentUser = i, this.Os = lo(this.persistenceKey, this.Ns), this.Ms = function(t5) {
      return "firestore_sequence_number_" + t5;
    }(this.persistenceKey), this.Fs = this.Fs.insert(this.Ns, new bo()), this.Ls = new RegExp("^firestore_clients_" + o + "_([^_]*)$"), this.Bs = new RegExp("^firestore_mutations_" + o + "_(\\d+)(?:_(.*))?$"), this.qs = new RegExp("^firestore_targets_" + o + "_(\\d+)$"), this.Us = function(t5) {
      return "firestore_online_state_" + t5;
    }(this.persistenceKey), this.Ks = function(t5) {
      return "firestore_bundle_loaded_" + t5;
    }(this.persistenceKey), this.window.addEventListener("storage", this.xs);
  }
  return t3.yt = function(t4) {
    return !(!t4 || !t4.localStorage);
  }, t3.prototype.start = function() {
    return __awaiter(this, void 0, void 0, function() {
      var t4, e, n, i, o, s, u, a, c, h, f, l2 = this;
      return __generator(this, function(r) {
        switch (r.label) {
          case 0:
            return [4, this.syncEngine.fn()];
          case 1:
            for (t4 = r.sent(), e = 0, n = t4; e < n.length; e++)
              (i = n[e]) !== this.Ns && (o = this.getItem(lo(this.persistenceKey, i))) && (s = go.Vs(i, o)) && (this.Fs = this.Fs.insert(s.clientId, s));
            for (this.Qs(), (u = this.storage.getItem(this.Us)) && (a = this.js(u)) && this.Ws(a), c = 0, h = this.$s; c < h.length; c++)
              f = h[c], this.ks(f);
            return this.$s = [], this.window.addEventListener("pagehide", function() {
              return l2.shutdown();
            }), this.started = true, [2];
        }
      });
    });
  }, t3.prototype.writeSequenceNumber = function(t4) {
    this.setItem(this.Ms, JSON.stringify(t4));
  }, t3.prototype.getAllActiveQueryTargets = function() {
    return this.Gs(this.Fs);
  }, t3.prototype.isActiveQueryTarget = function(t4) {
    var e = false;
    return this.Fs.forEach(function(n, r) {
      r.activeTargetIds.has(t4) && (e = true);
    }), e;
  }, t3.prototype.addPendingMutation = function(t4) {
    this.zs(t4, "pending");
  }, t3.prototype.updateMutationState = function(t4, e, n) {
    this.zs(t4, e, n), this.Hs(t4);
  }, t3.prototype.addLocalQueryTarget = function(t4) {
    var e = "not-current";
    if (this.isActiveQueryTarget(t4)) {
      var n = this.storage.getItem(yo(this.persistenceKey, t4));
      if (n) {
        var r = mo.Vs(t4, n);
        r && (e = r.state);
      }
    }
    return this.Js.Ds(t4), this.Qs(), e;
  }, t3.prototype.removeLocalQueryTarget = function(t4) {
    this.Js.Cs(t4), this.Qs();
  }, t3.prototype.isLocalQueryTarget = function(t4) {
    return this.Js.activeTargetIds.has(t4);
  }, t3.prototype.clearQueryState = function(t4) {
    this.removeItem(yo(this.persistenceKey, t4));
  }, t3.prototype.updateQueryState = function(t4, e, n) {
    this.Ys(t4, e, n);
  }, t3.prototype.handleUserChange = function(t4, e, n) {
    var r = this;
    e.forEach(function(t5) {
      r.Hs(t5);
    }), this.currentUser = t4, n.forEach(function(t5) {
      r.addPendingMutation(t5);
    });
  }, t3.prototype.setOnlineState = function(t4) {
    this.Xs(t4);
  }, t3.prototype.notifyBundleLoaded = function() {
    this.Zs();
  }, t3.prototype.shutdown = function() {
    this.started && (this.window.removeEventListener("storage", this.xs), this.removeItem(this.Os), this.started = false);
  }, t3.prototype.getItem = function(t4) {
    var e = this.storage.getItem(t4);
    return C2("SharedClientState", "READ", t4, e), e;
  }, t3.prototype.setItem = function(t4, e) {
    C2("SharedClientState", "SET", t4, e), this.storage.setItem(t4, e);
  }, t3.prototype.removeItem = function(t4) {
    C2("SharedClientState", "REMOVE", t4), this.storage.removeItem(t4);
  }, t3.prototype.ks = function(t4) {
    var e = this, i = t4;
    if (i.storageArea === this.storage) {
      if (C2("SharedClientState", "EVENT", i.key, i.newValue), i.key === this.Os)
        return void x2("Received WebStorage notification for local change. Another client might have garbage-collected our state");
      this.Se.enqueueRetryable(function() {
        return __awaiter(e, void 0, void 0, function() {
          var t5, e2, n, o, s, u;
          return __generator(this, function(r) {
            if (this.started) {
              if (i.key !== null) {
                if (this.Ls.test(i.key)) {
                  if (i.newValue == null)
                    return t5 = this.ti(i.key), [2, this.ei(t5, null)];
                  if (e2 = this.ni(i.key, i.newValue))
                    return [2, this.ei(e2.clientId, e2)];
                } else if (this.Bs.test(i.key)) {
                  if (i.newValue !== null && (n = this.si(i.key, i.newValue)))
                    return [2, this.ii(n)];
                } else if (this.qs.test(i.key)) {
                  if (i.newValue !== null && (o = this.ri(i.key, i.newValue)))
                    return [2, this.oi(o)];
                } else if (i.key === this.Us) {
                  if (i.newValue !== null && (s = this.js(i.newValue)))
                    return [2, this.Ws(s)];
                } else if (i.key === this.Ms)
                  (u = function(t6) {
                    var e3 = S2.o;
                    if (t6 != null)
                      try {
                        var n2 = JSON.parse(t6);
                        P2(typeof n2 == "number"), e3 = n2;
                      } catch (t7) {
                        x2("SharedClientState", "Failed to read sequence number from WebStorage", t7);
                      }
                    return e3;
                  }(i.newValue)) !== S2.o && this.sequenceNumberHandler(u);
                else if (i.key === this.Ks)
                  return [2, this.syncEngine.ci()];
              }
            } else
              this.$s.push(i);
            return [2];
          });
        });
      });
    }
  }, Object.defineProperty(t3.prototype, "Js", {
    get: function() {
      return this.Fs.get(this.Ns);
    },
    enumerable: false,
    configurable: true
  }), t3.prototype.Qs = function() {
    this.setItem(this.Os, this.Js.Ss());
  }, t3.prototype.zs = function(t4, e, n) {
    var r = new vo(this.currentUser, t4, e, n), i = po(this.persistenceKey, this.currentUser, t4);
    this.setItem(i, r.Ss());
  }, t3.prototype.Hs = function(t4) {
    var e = po(this.persistenceKey, this.currentUser, t4);
    this.removeItem(e);
  }, t3.prototype.Xs = function(t4) {
    var e = {
      clientId: this.Ns,
      onlineState: t4
    };
    this.storage.setItem(this.Us, JSON.stringify(e));
  }, t3.prototype.Ys = function(t4, e, n) {
    var r = yo(this.persistenceKey, t4), i = new mo(t4, e, n);
    this.setItem(r, i.Ss());
  }, t3.prototype.Zs = function() {
    this.setItem(this.Ks, "value-not-used");
  }, t3.prototype.ti = function(t4) {
    var e = this.Ls.exec(t4);
    return e ? e[1] : null;
  }, t3.prototype.ni = function(t4, e) {
    var n = this.ti(t4);
    return go.Vs(n, e);
  }, t3.prototype.si = function(t4, e) {
    var n = this.Bs.exec(t4), r = Number(n[1]), i = n[2] !== void 0 ? n[2] : null;
    return vo.Vs(new fo(i), r, e);
  }, t3.prototype.ri = function(t4, e) {
    var n = this.qs.exec(t4), r = Number(n[1]);
    return mo.Vs(r, e);
  }, t3.prototype.js = function(t4) {
    return wo.Vs(t4);
  }, t3.prototype.ii = function(t4) {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(e) {
        return t4.user.uid === this.currentUser.uid ? [2, this.syncEngine.ui(t4.batchId, t4.state, t4.error)] : (C2("SharedClientState", "Ignoring mutation for non-active user " + t4.user.uid), [2]);
      });
    });
  }, t3.prototype.oi = function(t4) {
    return this.syncEngine.ai(t4.targetId, t4.state, t4.error);
  }, t3.prototype.ei = function(t4, e) {
    var n = this, r = e ? this.Fs.insert(t4, e) : this.Fs.remove(t4), i = this.Gs(this.Fs), o = this.Gs(r), s = [], u = [];
    return o.forEach(function(t5) {
      i.has(t5) || s.push(t5);
    }), i.forEach(function(t5) {
      o.has(t5) || u.push(t5);
    }), this.syncEngine.hi(s, u).then(function() {
      n.Fs = r;
    });
  }, t3.prototype.Ws = function(t4) {
    this.Fs.get(t4.clientId) && this.onlineStateHandler(t4.onlineState);
  }, t3.prototype.Gs = function(t4) {
    var e = an();
    return t4.forEach(function(t5, n) {
      e = e.unionWith(n.activeTargetIds);
    }), e;
  }, t3;
}();
var To = function() {
  function t3() {
    this.li = new bo(), this.fi = {}, this.onlineStateHandler = null, this.sequenceNumberHandler = null;
  }
  return t3.prototype.addPendingMutation = function(t4) {
  }, t3.prototype.updateMutationState = function(t4, e, n) {
  }, t3.prototype.addLocalQueryTarget = function(t4) {
    return this.li.Ds(t4), this.fi[t4] || "not-current";
  }, t3.prototype.updateQueryState = function(t4, e, n) {
    this.fi[t4] = e;
  }, t3.prototype.removeLocalQueryTarget = function(t4) {
    this.li.Cs(t4);
  }, t3.prototype.isLocalQueryTarget = function(t4) {
    return this.li.activeTargetIds.has(t4);
  }, t3.prototype.clearQueryState = function(t4) {
    delete this.fi[t4];
  }, t3.prototype.getAllActiveQueryTargets = function() {
    return this.li.activeTargetIds;
  }, t3.prototype.isActiveQueryTarget = function(t4) {
    return this.li.activeTargetIds.has(t4);
  }, t3.prototype.start = function() {
    return this.li = new bo(), Promise.resolve();
  }, t3.prototype.handleUserChange = function(t4, e, n) {
  }, t3.prototype.setOnlineState = function(t4) {
  }, t3.prototype.shutdown = function() {
  }, t3.prototype.writeSequenceNumber = function(t4) {
  }, t3.prototype.notifyBundleLoaded = function() {
  }, t3;
}();
var Eo = function() {
  function t3() {
  }
  return t3.prototype.di = function(t4) {
  }, t3.prototype.shutdown = function() {
  }, t3;
}();
var _o = function() {
  function t3() {
    var t4 = this;
    this.wi = function() {
      return t4._i();
    }, this.mi = function() {
      return t4.yi();
    }, this.gi = [], this.pi();
  }
  return t3.prototype.di = function(t4) {
    this.gi.push(t4);
  }, t3.prototype.shutdown = function() {
    window.removeEventListener("online", this.wi), window.removeEventListener("offline", this.mi);
  }, t3.prototype.pi = function() {
    window.addEventListener("online", this.wi), window.addEventListener("offline", this.mi);
  }, t3.prototype._i = function() {
    C2("ConnectivityMonitor", "Network connectivity changed: AVAILABLE");
    for (var t4 = 0, e = this.gi; t4 < e.length; t4++) {
      (0, e[t4])(0);
    }
  }, t3.prototype.yi = function() {
    C2("ConnectivityMonitor", "Network connectivity changed: UNAVAILABLE");
    for (var t4 = 0, e = this.gi; t4 < e.length; t4++) {
      (0, e[t4])(1);
    }
  }, t3.yt = function() {
    return typeof window != "undefined" && window.addEventListener !== void 0 && window.removeEventListener !== void 0;
  }, t3;
}();
var So = {
  BatchGetDocuments: "batchGet",
  Commit: "commit",
  RunQuery: "runQuery"
};
var No = function() {
  function t3(t4) {
    this.Ei = t4.Ei, this.Ti = t4.Ti;
  }
  return t3.prototype.Ii = function(t4) {
    this.Ai = t4;
  }, t3.prototype.Ri = function(t4) {
    this.bi = t4;
  }, t3.prototype.onMessage = function(t4) {
    this.vi = t4;
  }, t3.prototype.close = function() {
    this.Ti();
  }, t3.prototype.send = function(t4) {
    this.Ei(t4);
  }, t3.prototype.Pi = function() {
    this.Ai();
  }, t3.prototype.Vi = function(t4) {
    this.bi(t4);
  }, t3.prototype.Si = function(t4) {
    this.vi(t4);
  }, t3;
}();
var Do = function(e) {
  function n(t3) {
    var n2 = this;
    return (n2 = e.call(this, t3) || this).forceLongPolling = t3.forceLongPolling, n2.autoDetectLongPolling = t3.autoDetectLongPolling, n2.useFetchStreams = t3.useFetchStreams, n2;
  }
  return __extends(n, e), n.prototype.Fi = function(t3, e2, n2, r) {
    return new Promise(function(i, o) {
      var s = new XhrIo();
      s.listenOnce(EventType.COMPLETE, function() {
        try {
          switch (s.getLastErrorCode()) {
            case ErrorCode.NO_ERROR:
              var e3 = s.getResponseJson();
              C2("Connection", "XHR received:", JSON.stringify(e3)), i(e3);
              break;
            case ErrorCode.TIMEOUT:
              C2("Connection", 'RPC "' + t3 + '" timed out'), o(new D2(N2.DEADLINE_EXCEEDED, "Request time out"));
              break;
            case ErrorCode.HTTP_ERROR:
              var n3 = s.getStatus();
              if (C2("Connection", 'RPC "' + t3 + '" failed with status:', n3, "response text:", s.getResponseText()), n3 > 0) {
                var r2 = s.getResponseJson().error;
                if (r2 && r2.status && r2.message) {
                  var u2 = function(t4) {
                    var e4 = t4.toLowerCase().replace(/_/g, "-");
                    return Object.values(N2).indexOf(e4) >= 0 ? e4 : N2.UNKNOWN;
                  }(r2.status);
                  o(new D2(u2, r2.message));
                } else
                  o(new D2(N2.UNKNOWN, "Server responded with status " + s.getStatus()));
              } else
                o(new D2(N2.UNAVAILABLE, "Connection failed."));
              break;
            default:
              O2();
          }
        } finally {
          C2("Connection", 'RPC "' + t3 + '" completed.');
        }
      });
      var u = JSON.stringify(r);
      s.send(e2, "POST", u, n2, 15);
    });
  }, n.prototype.Oi = function(t3, e2) {
    var n2 = [this.Di, "/", "google.firestore.v1.Firestore", "/", t3, "/channel"], r = createWebChannelTransport(), i = getStatEventTarget(), o = {
      httpSessionIdParam: "gsessionid",
      initMessageHeaders: {},
      messageUrlParams: {
        database: "projects/" + this.databaseId.projectId + "/databases/" + this.databaseId.database
      },
      sendRawJson: true,
      supportsCrossDomainXhr: true,
      internalChannelParams: {
        forwardChannelRequestTimeoutMs: 6e5
      },
      forceLongPolling: this.forceLongPolling,
      detectBufferingProxy: this.autoDetectLongPolling
    };
    this.useFetchStreams && (o.xmlHttpFactory = new FetchXmlHttpFactory({})), this.ki(o.initMessageHeaders, e2), isMobileCordova() || isReactNative() || isElectron() || isIE() || isUWP() || isBrowserExtension() || (o.httpHeadersOverwriteParam = "$httpHeaders");
    var l2 = n2.join("");
    C2("Connection", "Creating WebChannel: " + l2, o);
    var d = r.createWebChannel(l2, o), p2 = false, y2 = false, v2 = new No({
      Ei: function(t4) {
        y2 ? C2("Connection", "Not sending because WebChannel is closed:", t4) : (p2 || (C2("Connection", "Opening WebChannel transport."), d.open(), p2 = true), C2("Connection", "WebChannel sending:", t4), d.send(t4));
      },
      Ti: function() {
        return d.close();
      }
    }), m = function(t4, e3, n3) {
      t4.listen(e3, function(t5) {
        try {
          n3(t5);
        } catch (t6) {
          setTimeout(function() {
            throw t6;
          }, 0);
        }
      });
    };
    return m(d, WebChannel.EventType.OPEN, function() {
      y2 || C2("Connection", "WebChannel transport opened.");
    }), m(d, WebChannel.EventType.CLOSE, function() {
      y2 || (y2 = true, C2("Connection", "WebChannel transport closed"), v2.Vi());
    }), m(d, WebChannel.EventType.ERROR, function(t4) {
      y2 || (y2 = true, R2("Connection", "WebChannel transport errored:", t4), v2.Vi(new D2(N2.UNAVAILABLE, "The operation could not be completed")));
    }), m(d, WebChannel.EventType.MESSAGE, function(t4) {
      var e3;
      if (!y2) {
        var n3 = t4.data[0];
        P2(!!n3);
        var r2 = n3, i2 = r2.error || ((e3 = r2[0]) === null || e3 === void 0 ? void 0 : e3.error);
        if (i2) {
          C2("Connection", "WebChannel received error:", i2);
          var o2 = i2.status, s = function(t5) {
            var e4 = Ue[t5];
            if (e4 !== void 0)
              return ze(e4);
          }(o2), u = i2.message;
          s === void 0 && (s = N2.INTERNAL, u = "Unknown error status: " + o2 + " with message " + i2.message), y2 = true, v2.Vi(new D2(s, u)), d.close();
        } else
          C2("Connection", "WebChannel received:", n3), v2.Si(n3);
      }
    }), m(i, Event.STAT_EVENT, function(t4) {
      t4.stat === Stat.PROXY ? C2("Connection", "Detected buffering proxy") : t4.stat === Stat.NOPROXY && C2("Connection", "Detected no buffering proxy");
    }), setTimeout(function() {
      v2.Pi();
    }, 0), v2;
  }, n;
}(function() {
  function t3(t4) {
    this.databaseInfo = t4, this.databaseId = t4.databaseId;
    var e = t4.ssl ? "https" : "http";
    this.Di = e + "://" + t4.host, this.Ci = "projects/" + this.databaseId.projectId + "/databases/" + this.databaseId.database + "/documents";
  }
  return t3.prototype.Ni = function(t4, e, n, r) {
    var i = this.xi(t4, e);
    C2("RestConnection", "Sending: ", i, n);
    var o = {};
    return this.ki(o, r), this.Fi(t4, i, o, n).then(function(t5) {
      return C2("RestConnection", "Received: ", t5), t5;
    }, function(e2) {
      throw R2("RestConnection", t4 + " failed with error: ", e2, "url: ", i, "request:", n), e2;
    });
  }, t3.prototype.$i = function(t4, e, n, r) {
    return this.Ni(t4, e, n, r);
  }, t3.prototype.ki = function(t4, e) {
    if (t4["X-Goog-Api-Client"] = "gl-js/ fire/8.10.0", t4["Content-Type"] = "text/plain", this.databaseInfo.appId && (t4["X-Firebase-GMPID"] = this.databaseInfo.appId), e)
      for (var n in e.authHeaders)
        e.authHeaders.hasOwnProperty(n) && (t4[n] = e.authHeaders[n]);
  }, t3.prototype.xi = function(t4, e) {
    var n = So[t4];
    return this.Di + "/v1/" + e + ":" + n;
  }, t3;
}());
function Ao() {
  return typeof window != "undefined" ? window : null;
}
function ko() {
  return typeof document != "undefined" ? document : null;
}
function Co(t3) {
  return new bn(t3, true);
}
var xo = function() {
  function t3(t4, e, n, r, i) {
    n === void 0 && (n = 1e3), r === void 0 && (r = 1.5), i === void 0 && (i = 6e4), this.Se = t4, this.timerId = e, this.Mi = n, this.Li = r, this.Bi = i, this.qi = 0, this.Ui = null, this.Ki = Date.now(), this.reset();
  }
  return t3.prototype.reset = function() {
    this.qi = 0;
  }, t3.prototype.Qi = function() {
    this.qi = this.Bi;
  }, t3.prototype.ji = function(t4) {
    var e = this;
    this.cancel();
    var n = Math.floor(this.qi + this.Wi()), r = Math.max(0, Date.now() - this.Ki), i = Math.max(0, n - r);
    i > 0 && C2("ExponentialBackoff", "Backing off for " + i + " ms (base delay: " + this.qi + " ms, delay with jitter: " + n + " ms, last attempt: " + r + " ms ago)"), this.Ui = this.Se.enqueueAfterDelay(this.timerId, i, function() {
      return e.Ki = Date.now(), t4();
    }), this.qi *= this.Li, this.qi < this.Mi && (this.qi = this.Mi), this.qi > this.Bi && (this.qi = this.Bi);
  }, t3.prototype.Gi = function() {
    this.Ui !== null && (this.Ui.skipDelay(), this.Ui = null);
  }, t3.prototype.cancel = function() {
    this.Ui !== null && (this.Ui.cancel(), this.Ui = null);
  }, t3.prototype.Wi = function() {
    return (Math.random() - 0.5) * this.qi;
  }, t3;
}();
var Ro = function() {
  function t3(t4, e, n, r, i, o) {
    this.Se = t4, this.zi = n, this.Hi = r, this.Ji = i, this.listener = o, this.state = 0, this.Yi = 0, this.Xi = null, this.stream = null, this.Zi = new xo(t4, e);
  }
  return t3.prototype.tr = function() {
    return this.state === 1 || this.state === 2 || this.state === 4;
  }, t3.prototype.er = function() {
    return this.state === 2;
  }, t3.prototype.start = function() {
    this.state !== 3 ? this.auth() : this.nr();
  }, t3.prototype.stop = function() {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(t4) {
        switch (t4.label) {
          case 0:
            return this.tr() ? [4, this.close(0)] : [3, 2];
          case 1:
            t4.sent(), t4.label = 2;
          case 2:
            return [2];
        }
      });
    });
  }, t3.prototype.sr = function() {
    this.state = 0, this.Zi.reset();
  }, t3.prototype.ir = function() {
    var t4 = this;
    this.er() && this.Xi === null && (this.Xi = this.Se.enqueueAfterDelay(this.zi, 6e4, function() {
      return t4.rr();
    }));
  }, t3.prototype.cr = function(t4) {
    this.ur(), this.stream.send(t4);
  }, t3.prototype.rr = function() {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(t4) {
        return this.er() ? [2, this.close(0)] : [2];
      });
    });
  }, t3.prototype.ur = function() {
    this.Xi && (this.Xi.cancel(), this.Xi = null);
  }, t3.prototype.close = function(t4, e) {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(n) {
        switch (n.label) {
          case 0:
            return this.ur(), this.Zi.cancel(), this.Yi++, t4 !== 3 ? this.Zi.reset() : e && e.code === N2.RESOURCE_EXHAUSTED ? (x2(e.toString()), x2("Using maximum backoff delay to prevent overloading the backend."), this.Zi.Qi()) : e && e.code === N2.UNAUTHENTICATED && this.Ji.invalidateToken(), this.stream !== null && (this.ar(), this.stream.close(), this.stream = null), this.state = t4, [4, this.listener.Ri(e)];
          case 1:
            return n.sent(), [2];
        }
      });
    });
  }, t3.prototype.ar = function() {
  }, t3.prototype.auth = function() {
    var t4 = this;
    this.state = 1;
    var e = this.hr(this.Yi), n = this.Yi;
    this.Ji.getToken().then(function(e2) {
      t4.Yi === n && t4.lr(e2);
    }, function(n2) {
      e(function() {
        var e2 = new D2(N2.UNKNOWN, "Fetching auth token failed: " + n2.message);
        return t4.dr(e2);
      });
    });
  }, t3.prototype.lr = function(t4) {
    var e = this, n = this.hr(this.Yi);
    this.stream = this.wr(t4), this.stream.Ii(function() {
      n(function() {
        return e.state = 2, e.listener.Ii();
      });
    }), this.stream.Ri(function(t5) {
      n(function() {
        return e.dr(t5);
      });
    }), this.stream.onMessage(function(t5) {
      n(function() {
        return e.onMessage(t5);
      });
    });
  }, t3.prototype.nr = function() {
    var t4 = this;
    this.state = 4, this.Zi.ji(function() {
      return __awaiter(t4, void 0, void 0, function() {
        return __generator(this, function(t5) {
          return this.state = 0, this.start(), [2];
        });
      });
    });
  }, t3.prototype.dr = function(t4) {
    return C2("PersistentStream", "close with error: " + t4), this.stream = null, this.close(3, t4);
  }, t3.prototype.hr = function(t4) {
    var e = this;
    return function(n) {
      e.Se.enqueueAndForget(function() {
        return e.Yi === t4 ? n() : (C2("PersistentStream", "stream callback skipped by getCloseGuardedDispatcher."), Promise.resolve());
      });
    };
  }, t3;
}();
var Lo = function(e) {
  function n(t3, n2, r, i, o) {
    var s = this;
    return (s = e.call(this, t3, "listen_stream_connection_backoff", "listen_stream_idle", n2, r, o) || this).R = i, s;
  }
  return __extends(n, e), n.prototype.wr = function(t3) {
    return this.Hi.Oi("Listen", t3);
  }, n.prototype.onMessage = function(t3) {
    this.Zi.reset();
    var e2 = function(t4, e3) {
      var n3;
      if ("targetChange" in e3) {
        e3.targetChange;
        var r = function(t5) {
          return t5 === "NO_CHANGE" ? 0 : t5 === "ADD" ? 1 : t5 === "REMOVE" ? 2 : t5 === "CURRENT" ? 3 : t5 === "RESET" ? 4 : O2();
        }(e3.targetChange.targetChangeType || "NO_CHANGE"), i = e3.targetChange.targetIds || [], o = function(t5, e4) {
          return t5.I ? (P2(e4 === void 0 || typeof e4 == "string"), J2.fromBase64String(e4 || "")) : (P2(e4 === void 0 || e4 instanceof Uint8Array), J2.fromUint8Array(e4 || new Uint8Array()));
        }(t4, e3.targetChange.resumeToken), s = (u = e3.targetChange.cause) && function(t5) {
          var e4 = t5.code === void 0 ? N2.UNKNOWN : ze(t5.code);
          return new D2(e4, t5.message || "");
        }(u);
        n3 = new dn(r, i, o, s || null);
      } else if ("documentChange" in e3) {
        e3.documentChange, (r = e3.documentChange).document, r.document.name, r.document.updateTime, i = An(t4, r.document.name), o = _n(r.document.updateTime);
        var u = new _t({
          mapValue: {
            fields: r.document.fields
          }
        }), a = (s = Nt.newFoundDocument(i, o, u), r.targetIds || []), c = r.removedTargetIds || [];
        n3 = new fn(a, c, s.key, s);
      } else if ("documentDelete" in e3)
        e3.documentDelete, (r = e3.documentDelete).document, i = An(t4, r.document), o = r.readTime ? _n(r.readTime) : K2.min(), u = Nt.newNoDocument(i, o), s = r.removedTargetIds || [], n3 = new fn([], s, u.key, u);
      else if ("documentRemove" in e3)
        e3.documentRemove, (r = e3.documentRemove).document, i = An(t4, r.document), o = r.removedTargetIds || [], n3 = new fn([], o, i, null);
      else {
        if (!("filter" in e3))
          return O2();
        e3.filter;
        var h = e3.filter;
        h.targetId, r = h.count || 0, i = new Qe(r), o = h.targetId, n3 = new ln(o, i);
      }
      return n3;
    }(this.R, t3), n2 = function(t4) {
      if (!("targetChange" in t4))
        return K2.min();
      var e3 = t4.targetChange;
      return e3.targetIds && e3.targetIds.length ? K2.min() : e3.readTime ? _n(e3.readTime) : K2.min();
    }(t3);
    return this.listener._r(e2, n2);
  }, n.prototype.mr = function(t3) {
    var e2 = {};
    e2.database = xn(this.R), e2.addTarget = function(t4, e3) {
      var n3, r = e3.target;
      return (n3 = xt(r) ? {
        documents: Mn(t4, r)
      } : {
        query: Vn(t4, r)
      }).targetId = e3.targetId, e3.resumeToken.approximateByteSize() > 0 ? n3.resumeToken = Tn(t4, e3.resumeToken) : e3.snapshotVersion.compareTo(K2.min()) > 0 && (n3.readTime = In(t4, e3.snapshotVersion.toTimestamp())), n3;
    }(this.R, t3);
    var n2 = function(t4, e3) {
      var n3 = function(t5, e4) {
        switch (e4) {
          case 0:
            return null;
          case 1:
            return "existence-filter-mismatch";
          case 2:
            return "limbo-document";
          default:
            return O2();
        }
      }(0, e3.purpose);
      return n3 == null ? null : {
        "goog-listen-tags": n3
      };
    }(this.R, t3);
    n2 && (e2.labels = n2), this.cr(e2);
  }, n.prototype.yr = function(t3) {
    var e2 = {};
    e2.database = xn(this.R), e2.removeTarget = t3, this.cr(e2);
  }, n;
}(Ro);
var Oo = function(e) {
  function n(t3, n2, r, i, o) {
    var s = this;
    return (s = e.call(this, t3, "write_stream_connection_backoff", "write_stream_idle", n2, r, o) || this).R = i, s.gr = false, s;
  }
  return __extends(n, e), Object.defineProperty(n.prototype, "pr", {
    get: function() {
      return this.gr;
    },
    enumerable: false,
    configurable: true
  }), n.prototype.start = function() {
    this.gr = false, this.lastStreamToken = void 0, e.prototype.start.call(this);
  }, n.prototype.ar = function() {
    this.gr && this.Er([]);
  }, n.prototype.wr = function(t3) {
    return this.Hi.Oi("Write", t3);
  }, n.prototype.onMessage = function(t3) {
    if (P2(!!t3.streamToken), this.lastStreamToken = t3.streamToken, this.gr) {
      this.Zi.reset();
      var e2 = function(t4, e3) {
        return t4 && t4.length > 0 ? (P2(e3 !== void 0), t4.map(function(t5) {
          return function(t6, e4) {
            var n3 = t6.updateTime ? _n(t6.updateTime) : _n(e4);
            return n3.isEqual(K2.min()) && (n3 = _n(e4)), new Ne(n3, t6.transformResults || []);
          }(t5, e3);
        })) : [];
      }(t3.writeResults, t3.commitTime), n2 = _n(t3.commitTime);
      return this.listener.Tr(n2, e2);
    }
    return P2(!t3.writeResults || t3.writeResults.length === 0), this.gr = true, this.listener.Ir();
  }, n.prototype.Ar = function() {
    var t3 = {};
    t3.database = xn(this.R), this.cr(t3);
  }, n.prototype.Er = function(t3) {
    var e2 = this, n2 = {
      streamToken: this.lastStreamToken,
      writes: t3.map(function(t4) {
        return Pn(e2.R, t4);
      })
    };
    this.cr(n2);
  }, n;
}(Ro);
var Po = function(e) {
  function n(t3, n2, r) {
    var i = this;
    return (i = e.call(this) || this).credentials = t3, i.Hi = n2, i.R = r, i.Rr = false, i;
  }
  return __extends(n, e), n.prototype.br = function() {
    if (this.Rr)
      throw new D2(N2.FAILED_PRECONDITION, "The client has already been terminated.");
  }, n.prototype.Ni = function(t3, e2, n2) {
    var r = this;
    return this.br(), this.credentials.getToken().then(function(i) {
      return r.Hi.Ni(t3, e2, n2, i);
    }).catch(function(t4) {
      throw t4.name === "FirebaseError" ? (t4.code === N2.UNAUTHENTICATED && r.credentials.invalidateToken(), t4) : new D2(N2.UNKNOWN, t4.toString());
    });
  }, n.prototype.$i = function(t3, e2, n2) {
    var r = this;
    return this.br(), this.credentials.getToken().then(function(i) {
      return r.Hi.$i(t3, e2, n2, i);
    }).catch(function(t4) {
      throw t4.name === "FirebaseError" ? (t4.code === N2.UNAUTHENTICATED && r.credentials.invalidateToken(), t4) : new D2(N2.UNKNOWN, t4.toString());
    });
  }, n.prototype.terminate = function() {
    this.Rr = true;
  }, n;
}(function() {
});
var Fo = function() {
  function t3(t4, e) {
    this.asyncQueue = t4, this.onlineStateHandler = e, this.state = "Unknown", this.vr = 0, this.Pr = null, this.Vr = true;
  }
  return t3.prototype.Sr = function() {
    var t4 = this;
    this.vr === 0 && (this.Dr("Unknown"), this.Pr = this.asyncQueue.enqueueAfterDelay("online_state_timeout", 1e4, function() {
      return t4.Pr = null, t4.Cr("Backend didn't respond within 10 seconds."), t4.Dr("Offline"), Promise.resolve();
    }));
  }, t3.prototype.Nr = function(t4) {
    this.state === "Online" ? this.Dr("Unknown") : (this.vr++, this.vr >= 1 && (this.kr(), this.Cr("Connection failed 1 times. Most recent error: " + t4.toString()), this.Dr("Offline")));
  }, t3.prototype.set = function(t4) {
    this.kr(), this.vr = 0, t4 === "Online" && (this.Vr = false), this.Dr(t4);
  }, t3.prototype.Dr = function(t4) {
    t4 !== this.state && (this.state = t4, this.onlineStateHandler(t4));
  }, t3.prototype.Cr = function(t4) {
    var e = "Could not reach Cloud Firestore backend. " + t4 + "\nThis typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.";
    this.Vr ? (x2(e), this.Vr = false) : C2("OnlineStateTracker", e);
  }, t3.prototype.kr = function() {
    this.Pr !== null && (this.Pr.cancel(), this.Pr = null);
  }, t3;
}();
var Mo = function(t3, e, i, o, s) {
  var u = this;
  this.localStore = t3, this.datastore = e, this.asyncQueue = i, this.remoteSyncer = {}, this.Fr = [], this.$r = new Map(), this.Or = new Set(), this.Mr = [], this.Lr = s, this.Lr.di(function(t4) {
    i.enqueueAndForget(function() {
      return __awaiter(u, void 0, void 0, function() {
        return __generator(this, function(t5) {
          switch (t5.label) {
            case 0:
              return zo(this) ? (C2("RemoteStore", "Restarting streams for network reachability change."), [4, function(t6) {
                return __awaiter(this, void 0, void 0, function() {
                  var e2;
                  return __generator(this, function(n) {
                    switch (n.label) {
                      case 0:
                        return (e2 = F2(t6)).Or.add(4), [4, qo(e2)];
                      case 1:
                        return n.sent(), e2.Br.set("Unknown"), e2.Or.delete(4), [4, Vo(e2)];
                      case 2:
                        return n.sent(), [2];
                    }
                  });
                });
              }(this)]) : [3, 2];
            case 1:
              t5.sent(), t5.label = 2;
            case 2:
              return [2];
          }
        });
      });
    });
  }), this.Br = new Fo(i, o);
};
function Vo(t3) {
  return __awaiter(this, void 0, void 0, function() {
    var e, n;
    return __generator(this, function(r) {
      switch (r.label) {
        case 0:
          if (!zo(t3))
            return [3, 4];
          e = 0, n = t3.Mr, r.label = 1;
        case 1:
          return e < n.length ? [4, (0, n[e])(true)] : [3, 4];
        case 2:
          r.sent(), r.label = 3;
        case 3:
          return e++, [3, 1];
        case 4:
          return [2];
      }
    });
  });
}
function qo(t3) {
  return __awaiter(this, void 0, void 0, function() {
    var e, n;
    return __generator(this, function(r) {
      switch (r.label) {
        case 0:
          e = 0, n = t3.Mr, r.label = 1;
        case 1:
          return e < n.length ? [4, (0, n[e])(false)] : [3, 4];
        case 2:
          r.sent(), r.label = 3;
        case 3:
          return e++, [3, 1];
        case 4:
          return [2];
      }
    });
  });
}
function Uo(t3, e) {
  var n = F2(t3);
  n.$r.has(e.targetId) || (n.$r.set(e.targetId, e), Go(n) ? Qo(n) : us(n).er() && jo(n, e));
}
function Bo(t3, e) {
  var n = F2(t3), r = us(n);
  n.$r.delete(e), r.er() && Ko(n, e), n.$r.size === 0 && (r.er() ? r.ir() : zo(n) && n.Br.set("Unknown"));
}
function jo(t3, e) {
  t3.qr.U(e.targetId), us(t3).mr(e);
}
function Ko(t3, e) {
  t3.qr.U(e), us(t3).yr(e);
}
function Qo(t3) {
  t3.qr = new yn({
    getRemoteKeysForTarget: function(e) {
      return t3.remoteSyncer.getRemoteKeysForTarget(e);
    },
    lt: function(e) {
      return t3.$r.get(e) || null;
    }
  }), us(t3).start(), t3.Br.Sr();
}
function Go(t3) {
  return zo(t3) && !us(t3).tr() && t3.$r.size > 0;
}
function zo(t3) {
  return F2(t3).Or.size === 0;
}
function Wo(t3) {
  t3.qr = void 0;
}
function Ho(t3) {
  return __awaiter(this, void 0, void 0, function() {
    return __generator(this, function(e) {
      return t3.$r.forEach(function(e2, n) {
        jo(t3, e2);
      }), [2];
    });
  });
}
function Yo(t3, e) {
  return __awaiter(this, void 0, void 0, function() {
    return __generator(this, function(n) {
      return Wo(t3), Go(t3) ? (t3.Br.Nr(e), Qo(t3)) : t3.Br.set("Unknown"), [2];
    });
  });
}
function $o(t3, e, i) {
  return __awaiter(this, void 0, void 0, function() {
    var o, s, u;
    return __generator(this, function(a) {
      switch (a.label) {
        case 0:
          if (t3.Br.set("Online"), !(e instanceof dn && e.state === 2 && e.cause))
            return [3, 6];
          a.label = 1;
        case 1:
          return a.trys.push([1, 3, , 5]), [
            4,
            function(t4, e2) {
              return __awaiter(this, void 0, void 0, function() {
                var n, i2, o2, s2;
                return __generator(this, function(r) {
                  switch (r.label) {
                    case 0:
                      n = e2.cause, i2 = 0, o2 = e2.targetIds, r.label = 1;
                    case 1:
                      return i2 < o2.length ? (s2 = o2[i2], t4.$r.has(s2) ? [4, t4.remoteSyncer.rejectListen(s2, n)] : [3, 3]) : [3, 5];
                    case 2:
                      r.sent(), t4.$r.delete(s2), t4.qr.removeTarget(s2), r.label = 3;
                    case 3:
                      r.label = 4;
                    case 4:
                      return i2++, [3, 1];
                    case 5:
                      return [2];
                  }
                });
              });
            }(t3, e)
          ];
        case 2:
          return a.sent(), [3, 5];
        case 3:
          return o = a.sent(), C2("RemoteStore", "Failed to remove targets %s: %s ", e.targetIds.join(","), o), [4, Xo(t3, o)];
        case 4:
          return a.sent(), [3, 5];
        case 5:
          return [3, 13];
        case 6:
          if (e instanceof fn ? t3.qr.X(e) : e instanceof ln ? t3.qr.rt(e) : t3.qr.et(e), i.isEqual(K2.min()))
            return [3, 13];
          a.label = 7;
        case 7:
          return a.trys.push([7, 11, , 13]), [4, Ki(t3.localStore)];
        case 8:
          return s = a.sent(), i.compareTo(s) >= 0 ? [
            4,
            function(t4, e2) {
              var n = t4.qr.ut(e2);
              return n.targetChanges.forEach(function(n2, r) {
                if (n2.resumeToken.approximateByteSize() > 0) {
                  var i2 = t4.$r.get(r);
                  i2 && t4.$r.set(r, i2.withResumeToken(n2.resumeToken, e2));
                }
              }), n.targetMismatches.forEach(function(e3) {
                var n2 = t4.$r.get(e3);
                if (n2) {
                  t4.$r.set(e3, n2.withResumeToken(J2.EMPTY_BYTE_STRING, n2.snapshotVersion)), Ko(t4, e3);
                  var r = new Pr(n2.target, e3, 1, n2.sequenceNumber);
                  jo(t4, r);
                }
              }), t4.remoteSyncer.applyRemoteEvent(n);
            }(t3, i)
          ] : [3, 10];
        case 9:
          a.sent(), a.label = 10;
        case 10:
          return [3, 13];
        case 11:
          return C2("RemoteStore", "Failed to raise snapshot:", u = a.sent()), [4, Xo(t3, u)];
        case 12:
          return a.sent(), [3, 13];
        case 13:
          return [2];
      }
    });
  });
}
function Xo(t3, e, i) {
  return __awaiter(this, void 0, void 0, function() {
    var o = this;
    return __generator(this, function(s) {
      switch (s.label) {
        case 0:
          if (!Nr(e))
            throw e;
          return t3.Or.add(1), [4, qo(t3)];
        case 1:
          return s.sent(), t3.Br.set("Offline"), i || (i = function() {
            return Ki(t3.localStore);
          }), t3.asyncQueue.enqueueRetryable(function() {
            return __awaiter(o, void 0, void 0, function() {
              return __generator(this, function(e2) {
                switch (e2.label) {
                  case 0:
                    return C2("RemoteStore", "Retrying IndexedDB access"), [4, i()];
                  case 1:
                    return e2.sent(), t3.Or.delete(1), [4, Vo(t3)];
                  case 2:
                    return e2.sent(), [2];
                }
              });
            });
          }), [2];
      }
    });
  });
}
function Jo(t3, e) {
  return e().catch(function(n) {
    return Xo(t3, n, e);
  });
}
function Zo(t3) {
  return __awaiter(this, void 0, void 0, function() {
    var e, n, i, o, s;
    return __generator(this, function(r) {
      switch (r.label) {
        case 0:
          e = F2(t3), n = as(e), i = e.Fr.length > 0 ? e.Fr[e.Fr.length - 1].batchId : -1, r.label = 1;
        case 1:
          if (!function(t4) {
            return zo(t4) && t4.Fr.length < 10;
          }(e))
            return [3, 7];
          r.label = 2;
        case 2:
          return r.trys.push([2, 4, , 6]), [4, zi(e.localStore, i)];
        case 3:
          return (o = r.sent()) === null ? (e.Fr.length === 0 && n.ir(), [3, 7]) : (i = o.batchId, function(t4, e2) {
            t4.Fr.push(e2);
            var n2 = as(t4);
            n2.er() && n2.pr && n2.Er(e2.mutations);
          }(e, o), [3, 6]);
        case 4:
          return s = r.sent(), [4, Xo(e, s)];
        case 5:
          return r.sent(), [3, 6];
        case 6:
          return [3, 1];
        case 7:
          return ts(e) && es(e), [2];
      }
    });
  });
}
function ts(t3) {
  return zo(t3) && !as(t3).tr() && t3.Fr.length > 0;
}
function es(t3) {
  as(t3).start();
}
function ns(t3) {
  return __awaiter(this, void 0, void 0, function() {
    return __generator(this, function(e) {
      return as(t3).Ar(), [2];
    });
  });
}
function rs(t3) {
  return __awaiter(this, void 0, void 0, function() {
    var e, n, i, o;
    return __generator(this, function(r) {
      for (e = as(t3), n = 0, i = t3.Fr; n < i.length; n++)
        o = i[n], e.Er(o.mutations);
      return [2];
    });
  });
}
function is(t3, e, i) {
  return __awaiter(this, void 0, void 0, function() {
    var n, o;
    return __generator(this, function(r) {
      switch (r.label) {
        case 0:
          return n = t3.Fr.shift(), o = Or.from(n, e, i), [4, Jo(t3, function() {
            return t3.remoteSyncer.applySuccessfulWrite(o);
          })];
        case 1:
          return r.sent(), [4, Zo(t3)];
        case 2:
          return r.sent(), [2];
      }
    });
  });
}
function os(t3, e) {
  return __awaiter(this, void 0, void 0, function() {
    return __generator(this, function(i) {
      switch (i.label) {
        case 0:
          return e && as(t3).pr ? [4, function(t4, e2) {
            return __awaiter(this, void 0, void 0, function() {
              var n, i2;
              return __generator(this, function(r) {
                switch (r.label) {
                  case 0:
                    return Ge(i2 = e2.code) && i2 !== N2.ABORTED ? (n = t4.Fr.shift(), as(t4).sr(), [4, Jo(t4, function() {
                      return t4.remoteSyncer.rejectFailedWrite(n.batchId, e2);
                    })]) : [3, 3];
                  case 1:
                    return r.sent(), [4, Zo(t4)];
                  case 2:
                    r.sent(), r.label = 3;
                  case 3:
                    return [2];
                }
              });
            });
          }(t3, e)] : [3, 2];
        case 1:
          i.sent(), i.label = 2;
        case 2:
          return ts(t3) && es(t3), [2];
      }
    });
  });
}
function ss(t3, e) {
  return __awaiter(this, void 0, void 0, function() {
    var n;
    return __generator(this, function(r) {
      switch (r.label) {
        case 0:
          return n = F2(t3), e ? (n.Or.delete(2), [4, Vo(n)]) : [3, 2];
        case 1:
          return r.sent(), [3, 5];
        case 2:
          return e ? [3, 4] : (n.Or.add(2), [4, qo(n)]);
        case 3:
          r.sent(), n.Br.set("Unknown"), r.label = 4;
        case 4:
          r.label = 5;
        case 5:
          return [2];
      }
    });
  });
}
function us(t3) {
  var e = this;
  return t3.Ur || (t3.Ur = function(t4, e2, n) {
    var r = F2(t4);
    return r.br(), new Lo(e2, r.Hi, r.credentials, r.R, n);
  }(t3.datastore, t3.asyncQueue, {
    Ii: Ho.bind(null, t3),
    Ri: Yo.bind(null, t3),
    _r: $o.bind(null, t3)
  }), t3.Mr.push(function(i) {
    return __awaiter(e, void 0, void 0, function() {
      return __generator(this, function(e2) {
        switch (e2.label) {
          case 0:
            return i ? (t3.Ur.sr(), Go(t3) ? Qo(t3) : t3.Br.set("Unknown"), [3, 3]) : [3, 1];
          case 1:
            return [4, t3.Ur.stop()];
          case 2:
            e2.sent(), Wo(t3), e2.label = 3;
          case 3:
            return [2];
        }
      });
    });
  })), t3.Ur;
}
function as(t3) {
  var e = this;
  return t3.Kr || (t3.Kr = function(t4, e2, n) {
    var r = F2(t4);
    return r.br(), new Oo(e2, r.Hi, r.credentials, r.R, n);
  }(t3.datastore, t3.asyncQueue, {
    Ii: ns.bind(null, t3),
    Ri: os.bind(null, t3),
    Ir: rs.bind(null, t3),
    Tr: is.bind(null, t3)
  }), t3.Mr.push(function(i) {
    return __awaiter(e, void 0, void 0, function() {
      return __generator(this, function(e2) {
        switch (e2.label) {
          case 0:
            return i ? (t3.Kr.sr(), [4, Zo(t3)]) : [3, 2];
          case 1:
            return e2.sent(), [3, 4];
          case 2:
            return [4, t3.Kr.stop()];
          case 3:
            e2.sent(), t3.Fr.length > 0 && (C2("RemoteStore", "Stopping write stream with " + t3.Fr.length + " pending writes"), t3.Fr = []), e2.label = 4;
          case 4:
            return [2];
        }
      });
    });
  })), t3.Kr;
}
var cs = function() {
  function t3(t4, e, n, r, i) {
    this.asyncQueue = t4, this.timerId = e, this.targetTimeMs = n, this.op = r, this.removalCallback = i, this.deferred = new br(), this.then = this.deferred.promise.then.bind(this.deferred.promise), this.deferred.promise.catch(function(t5) {
    });
  }
  return t3.createAndSchedule = function(e, n, r, i, o) {
    var s = new t3(e, n, Date.now() + r, i, o);
    return s.start(r), s;
  }, t3.prototype.start = function(t4) {
    var e = this;
    this.timerHandle = setTimeout(function() {
      return e.handleDelayElapsed();
    }, t4);
  }, t3.prototype.skipDelay = function() {
    return this.handleDelayElapsed();
  }, t3.prototype.cancel = function(t4) {
    this.timerHandle !== null && (this.clearTimeout(), this.deferred.reject(new D2(N2.CANCELLED, "Operation cancelled" + (t4 ? ": " + t4 : ""))));
  }, t3.prototype.handleDelayElapsed = function() {
    var t4 = this;
    this.asyncQueue.enqueueAndForget(function() {
      return t4.timerHandle !== null ? (t4.clearTimeout(), t4.op().then(function(e) {
        return t4.deferred.resolve(e);
      })) : Promise.resolve();
    });
  }, t3.prototype.clearTimeout = function() {
    this.timerHandle !== null && (this.removalCallback(this), clearTimeout(this.timerHandle), this.timerHandle = null);
  }, t3;
}();
function hs(t3, e) {
  if (x2("AsyncQueue", e + ": " + t3), Nr(t3))
    return new D2(N2.UNAVAILABLE, e + ": " + t3);
  throw t3;
}
var fs = function() {
  function t3(t4) {
    this.comparator = t4 ? function(e, n) {
      return t4(e, n) || ct.comparator(e.key, n.key);
    } : function(t5, e) {
      return ct.comparator(t5.key, e.key);
    }, this.keyedMap = en(), this.sortedSet = new We(this.comparator);
  }
  return t3.emptySet = function(e) {
    return new t3(e.comparator);
  }, t3.prototype.has = function(t4) {
    return this.keyedMap.get(t4) != null;
  }, t3.prototype.get = function(t4) {
    return this.keyedMap.get(t4);
  }, t3.prototype.first = function() {
    return this.sortedSet.minKey();
  }, t3.prototype.last = function() {
    return this.sortedSet.maxKey();
  }, t3.prototype.isEmpty = function() {
    return this.sortedSet.isEmpty();
  }, t3.prototype.indexOf = function(t4) {
    var e = this.keyedMap.get(t4);
    return e ? this.sortedSet.indexOf(e) : -1;
  }, Object.defineProperty(t3.prototype, "size", {
    get: function() {
      return this.sortedSet.size;
    },
    enumerable: false,
    configurable: true
  }), t3.prototype.forEach = function(t4) {
    this.sortedSet.inorderTraversal(function(e, n) {
      return t4(e), false;
    });
  }, t3.prototype.add = function(t4) {
    var e = this.delete(t4.key);
    return e.copy(e.keyedMap.insert(t4.key, t4), e.sortedSet.insert(t4, null));
  }, t3.prototype.delete = function(t4) {
    var e = this.get(t4);
    return e ? this.copy(this.keyedMap.remove(t4), this.sortedSet.remove(e)) : this;
  }, t3.prototype.isEqual = function(e) {
    if (!(e instanceof t3))
      return false;
    if (this.size !== e.size)
      return false;
    for (var n = this.sortedSet.getIterator(), r = e.sortedSet.getIterator(); n.hasNext(); ) {
      var i = n.getNext().key, o = r.getNext().key;
      if (!i.isEqual(o))
        return false;
    }
    return true;
  }, t3.prototype.toString = function() {
    var t4 = [];
    return this.forEach(function(e) {
      t4.push(e.toString());
    }), t4.length === 0 ? "DocumentSet ()" : "DocumentSet (\n  " + t4.join("  \n") + "\n)";
  }, t3.prototype.copy = function(e, n) {
    var r = new t3();
    return r.comparator = this.comparator, r.keyedMap = e, r.sortedSet = n, r;
  }, t3;
}();
var ls = function() {
  function t3() {
    this.Qr = new We(ct.comparator);
  }
  return t3.prototype.track = function(t4) {
    var e = t4.doc.key, n = this.Qr.get(e);
    n ? t4.type !== 0 && n.type === 3 ? this.Qr = this.Qr.insert(e, t4) : t4.type === 3 && n.type !== 1 ? this.Qr = this.Qr.insert(e, {
      type: n.type,
      doc: t4.doc
    }) : t4.type === 2 && n.type === 2 ? this.Qr = this.Qr.insert(e, {
      type: 2,
      doc: t4.doc
    }) : t4.type === 2 && n.type === 0 ? this.Qr = this.Qr.insert(e, {
      type: 0,
      doc: t4.doc
    }) : t4.type === 1 && n.type === 0 ? this.Qr = this.Qr.remove(e) : t4.type === 1 && n.type === 2 ? this.Qr = this.Qr.insert(e, {
      type: 1,
      doc: n.doc
    }) : t4.type === 0 && n.type === 1 ? this.Qr = this.Qr.insert(e, {
      type: 2,
      doc: t4.doc
    }) : O2() : this.Qr = this.Qr.insert(e, t4);
  }, t3.prototype.jr = function() {
    var t4 = [];
    return this.Qr.inorderTraversal(function(e, n) {
      t4.push(n);
    }), t4;
  }, t3;
}();
var ds = function() {
  function t3(t4, e, n, r, i, o, s, u) {
    this.query = t4, this.docs = e, this.oldDocs = n, this.docChanges = r, this.mutatedKeys = i, this.fromCache = o, this.syncStateChanged = s, this.excludesMetadataChanges = u;
  }
  return t3.fromInitialDocuments = function(e, n, r, i) {
    var o = [];
    return n.forEach(function(t4) {
      o.push({
        type: 0,
        doc: t4
      });
    }), new t3(e, n, fs.emptySet(n), o, r, i, true, false);
  }, Object.defineProperty(t3.prototype, "hasPendingWrites", {
    get: function() {
      return !this.mutatedKeys.isEmpty();
    },
    enumerable: false,
    configurable: true
  }), t3.prototype.isEqual = function(t4) {
    if (!(this.fromCache === t4.fromCache && this.syncStateChanged === t4.syncStateChanged && this.mutatedKeys.isEqual(t4.mutatedKeys) && ie(this.query, t4.query) && this.docs.isEqual(t4.docs) && this.oldDocs.isEqual(t4.oldDocs)))
      return false;
    var e = this.docChanges, n = t4.docChanges;
    if (e.length !== n.length)
      return false;
    for (var r = 0; r < e.length; r++)
      if (e[r].type !== n[r].type || !e[r].doc.isEqual(n[r].doc))
        return false;
    return true;
  }, t3;
}();
var ps = function() {
  this.Wr = void 0, this.listeners = [];
};
var ys = function() {
  this.queries = new Ii(function(t3) {
    return oe(t3);
  }, ie), this.onlineState = "Unknown", this.Gr = new Set();
};
function vs(t3, e) {
  return __awaiter(this, void 0, void 0, function() {
    var n, i, o, s, u, a, c;
    return __generator(this, function(r) {
      switch (r.label) {
        case 0:
          if (n = F2(t3), i = e.query, o = false, (s = n.queries.get(i)) || (o = true, s = new ps()), !o)
            return [3, 4];
          r.label = 1;
        case 1:
          return r.trys.push([1, 3, , 4]), u = s, [4, n.onListen(i)];
        case 2:
          return u.Wr = r.sent(), [3, 4];
        case 3:
          return a = r.sent(), c = hs(a, "Initialization of query '" + se(e.query) + "' failed"), [2, void e.onError(c)];
        case 4:
          return n.queries.set(i, s), s.listeners.push(e), e.zr(n.onlineState), s.Wr && e.Hr(s.Wr) && bs(n), [2];
      }
    });
  });
}
function ms(t3, e) {
  return __awaiter(this, void 0, void 0, function() {
    var n, i, o, s, u;
    return __generator(this, function(r) {
      return n = F2(t3), i = e.query, o = false, (s = n.queries.get(i)) && (u = s.listeners.indexOf(e)) >= 0 && (s.listeners.splice(u, 1), o = s.listeners.length === 0), o ? [2, (n.queries.delete(i), n.onUnlisten(i))] : [2];
    });
  });
}
function gs(t3, e) {
  for (var n = F2(t3), r = false, i = 0, o = e; i < o.length; i++) {
    var s = o[i], u = s.query, a = n.queries.get(u);
    if (a) {
      for (var c = 0, h = a.listeners; c < h.length; c++) {
        h[c].Hr(s) && (r = true);
      }
      a.Wr = s;
    }
  }
  r && bs(n);
}
function ws(t3, e, n) {
  var r = F2(t3), i = r.queries.get(e);
  if (i)
    for (var o = 0, s = i.listeners; o < s.length; o++) {
      s[o].onError(n);
    }
  r.queries.delete(e);
}
function bs(t3) {
  t3.Gr.forEach(function(t4) {
    t4.next();
  });
}
var Is = function() {
  function t3(t4, e, n) {
    this.query = t4, this.Jr = e, this.Yr = false, this.Xr = null, this.onlineState = "Unknown", this.options = n || {};
  }
  return t3.prototype.Hr = function(t4) {
    if (!this.options.includeMetadataChanges) {
      for (var e = [], n = 0, r = t4.docChanges; n < r.length; n++) {
        var i = r[n];
        i.type !== 3 && e.push(i);
      }
      t4 = new ds(t4.query, t4.docs, t4.oldDocs, e, t4.mutatedKeys, t4.fromCache, t4.syncStateChanged, true);
    }
    var o = false;
    return this.Yr ? this.Zr(t4) && (this.Jr.next(t4), o = true) : this.eo(t4, this.onlineState) && (this.no(t4), o = true), this.Xr = t4, o;
  }, t3.prototype.onError = function(t4) {
    this.Jr.error(t4);
  }, t3.prototype.zr = function(t4) {
    this.onlineState = t4;
    var e = false;
    return this.Xr && !this.Yr && this.eo(this.Xr, t4) && (this.no(this.Xr), e = true), e;
  }, t3.prototype.eo = function(t4, e) {
    if (!t4.fromCache)
      return true;
    var n = e !== "Offline";
    return !(this.options.so && n || t4.docs.isEmpty() && e !== "Offline");
  }, t3.prototype.Zr = function(t4) {
    if (t4.docChanges.length > 0)
      return true;
    var e = this.Xr && this.Xr.hasPendingWrites !== t4.hasPendingWrites;
    return !(!t4.syncStateChanged && !e) && this.options.includeMetadataChanges === true;
  }, t3.prototype.no = function(t4) {
    t4 = ds.fromInitialDocuments(t4.query, t4.docs, t4.mutatedKeys, t4.fromCache), this.Yr = true, this.Jr.next(t4);
  }, t3;
}();
var Ts = function() {
  function t3(t4, e) {
    this.payload = t4, this.byteLength = e;
  }
  return t3.prototype.io = function() {
    return "metadata" in this.payload;
  }, t3;
}();
var Es = function() {
  function t3(t4) {
    this.R = t4;
  }
  return t3.prototype.qn = function(t4) {
    return An(this.R, t4);
  }, t3.prototype.Un = function(t4) {
    return t4.metadata.exists ? On(this.R, t4.document, false) : Nt.newNoDocument(this.qn(t4.metadata.name), this.Kn(t4.metadata.readTime));
  }, t3.prototype.Kn = function(t4) {
    return _n(t4);
  }, t3;
}();
var _s = function() {
  function t3(t4, e, n) {
    this.ro = t4, this.localStore = e, this.R = n, this.queries = [], this.documents = [], this.progress = Ss(t4);
  }
  return t3.prototype.oo = function(t4) {
    this.progress.bytesLoaded += t4.byteLength;
    var e = this.progress.documentsLoaded;
    return t4.payload.namedQuery ? this.queries.push(t4.payload.namedQuery) : t4.payload.documentMetadata ? (this.documents.push({
      metadata: t4.payload.documentMetadata
    }), t4.payload.documentMetadata.exists || ++e) : t4.payload.document && (this.documents[this.documents.length - 1].document = t4.payload.document, ++e), e !== this.progress.documentsLoaded ? (this.progress.documentsLoaded = e, Object.assign({}, this.progress)) : null;
  }, t3.prototype.co = function(t4) {
    for (var e = new Map(), n = new Es(this.R), r = 0, i = t4; r < i.length; r++) {
      var o = i[r];
      if (o.metadata.queries)
        for (var s = n.qn(o.metadata.name), u = 0, a = o.metadata.queries; u < a.length; u++) {
          var c = a[u], h = (e.get(c) || sn()).add(s);
          e.set(c, h);
        }
    }
    return e;
  }, t3.prototype.complete = function() {
    return __awaiter(this, void 0, void 0, function() {
      var t4, e, n, i, o;
      return __generator(this, function(r) {
        switch (r.label) {
          case 0:
            return [4, Zi(this.localStore, new Es(this.R), this.documents, this.ro.id)];
          case 1:
            t4 = r.sent(), e = this.co(this.documents), n = 0, i = this.queries, r.label = 2;
          case 2:
            return n < i.length ? (o = i[n], [4, to(this.localStore, o, e.get(o.name))]) : [3, 5];
          case 3:
            r.sent(), r.label = 4;
          case 4:
            return n++, [3, 2];
          case 5:
            return [2, (this.progress.taskState = "Success", new Pi(Object.assign({}, this.progress), t4))];
        }
      });
    });
  }, t3;
}();
function Ss(t3) {
  return {
    taskState: "Running",
    documentsLoaded: 0,
    bytesLoaded: 0,
    totalDocuments: t3.totalDocuments,
    totalBytes: t3.totalBytes
  };
}
var Ns = function(t3) {
  this.key = t3;
};
var Ds = function(t3) {
  this.key = t3;
};
var As = function() {
  function t3(t4, e) {
    this.query = t4, this.uo = e, this.ao = null, this.current = false, this.ho = sn(), this.mutatedKeys = sn(), this.lo = ae(t4), this.fo = new fs(this.lo);
  }
  return Object.defineProperty(t3.prototype, "wo", {
    get: function() {
      return this.uo;
    },
    enumerable: false,
    configurable: true
  }), t3.prototype._o = function(t4, e) {
    var n = this, r = e ? e.mo : new ls(), i = e ? e.fo : this.fo, o = e ? e.mutatedKeys : this.mutatedKeys, s = i, u = false, a = $t(this.query) && i.size === this.query.limit ? i.last() : null, c = Xt(this.query) && i.size === this.query.limit ? i.first() : null;
    if (t4.inorderTraversal(function(t5, e2) {
      var h2 = i.get(t5), f = ue(n.query, e2) ? e2 : null, l2 = !!h2 && n.mutatedKeys.has(h2.key), d = !!f && (f.hasLocalMutations || n.mutatedKeys.has(f.key) && f.hasCommittedMutations), p2 = false;
      h2 && f ? h2.data.isEqual(f.data) ? l2 !== d && (r.track({
        type: 3,
        doc: f
      }), p2 = true) : n.yo(h2, f) || (r.track({
        type: 2,
        doc: f
      }), p2 = true, (a && n.lo(f, a) > 0 || c && n.lo(f, c) < 0) && (u = true)) : !h2 && f ? (r.track({
        type: 0,
        doc: f
      }), p2 = true) : h2 && !f && (r.track({
        type: 1,
        doc: h2
      }), p2 = true, (a || c) && (u = true)), p2 && (f ? (s = s.add(f), o = d ? o.add(t5) : o.delete(t5)) : (s = s.delete(t5), o = o.delete(t5)));
    }), $t(this.query) || Xt(this.query))
      for (; s.size > this.query.limit; ) {
        var h = $t(this.query) ? s.last() : s.first();
        s = s.delete(h.key), o = o.delete(h.key), r.track({
          type: 1,
          doc: h
        });
      }
    return {
      fo: s,
      mo: r,
      Nn: u,
      mutatedKeys: o
    };
  }, t3.prototype.yo = function(t4, e) {
    return t4.hasLocalMutations && e.hasCommittedMutations && !e.hasLocalMutations;
  }, t3.prototype.applyChanges = function(t4, e, n) {
    var r = this, i = this.fo;
    this.fo = t4.fo, this.mutatedKeys = t4.mutatedKeys;
    var o = t4.mo.jr();
    o.sort(function(t5, e2) {
      return function(t6, e3) {
        var n2 = function(t7) {
          switch (t7) {
            case 0:
              return 1;
            case 2:
            case 3:
              return 2;
            case 1:
              return 0;
            default:
              return O2();
          }
        };
        return n2(t6) - n2(e3);
      }(t5.type, e2.type) || r.lo(t5.doc, e2.doc);
    }), this.po(n);
    var s = e ? this.Eo() : [], u = this.ho.size === 0 && this.current ? 1 : 0, a = u !== this.ao;
    return this.ao = u, o.length !== 0 || a ? {
      snapshot: new ds(this.query, t4.fo, i, o, t4.mutatedKeys, u === 0, a, false),
      To: s
    } : {
      To: s
    };
  }, t3.prototype.zr = function(t4) {
    return this.current && t4 === "Offline" ? (this.current = false, this.applyChanges({
      fo: this.fo,
      mo: new ls(),
      mutatedKeys: this.mutatedKeys,
      Nn: false
    }, false)) : {
      To: []
    };
  }, t3.prototype.Io = function(t4) {
    return !this.uo.has(t4) && !!this.fo.has(t4) && !this.fo.get(t4).hasLocalMutations;
  }, t3.prototype.po = function(t4) {
    var e = this;
    t4 && (t4.addedDocuments.forEach(function(t5) {
      return e.uo = e.uo.add(t5);
    }), t4.modifiedDocuments.forEach(function(t5) {
    }), t4.removedDocuments.forEach(function(t5) {
      return e.uo = e.uo.delete(t5);
    }), this.current = t4.current);
  }, t3.prototype.Eo = function() {
    var t4 = this;
    if (!this.current)
      return [];
    var e = this.ho;
    this.ho = sn(), this.fo.forEach(function(e2) {
      t4.Io(e2.key) && (t4.ho = t4.ho.add(e2.key));
    });
    var n = [];
    return e.forEach(function(e2) {
      t4.ho.has(e2) || n.push(new Ds(e2));
    }), this.ho.forEach(function(t5) {
      e.has(t5) || n.push(new Ns(t5));
    }), n;
  }, t3.prototype.Ao = function(t4) {
    this.uo = t4.Bn, this.ho = sn();
    var e = this._o(t4.documents);
    return this.applyChanges(e, true);
  }, t3.prototype.Ro = function() {
    return ds.fromInitialDocuments(this.query, this.fo, this.mutatedKeys, this.ao === 0);
  }, t3;
}();
var ks = function(t3, e, n) {
  this.query = t3, this.targetId = e, this.view = n;
};
var Cs = function(t3) {
  this.key = t3, this.bo = false;
};
var xs = function() {
  function t3(t4, e, n, r, i, o) {
    this.localStore = t4, this.remoteStore = e, this.eventManager = n, this.sharedClientState = r, this.currentUser = i, this.maxConcurrentLimboResolutions = o, this.vo = {}, this.Po = new Ii(function(t5) {
      return oe(t5);
    }, ie), this.Vo = new Map(), this.So = new Set(), this.Do = new We(ct.comparator), this.Co = new Map(), this.No = new no(), this.xo = {}, this.ko = new Map(), this.Fo = ci.Yt(), this.onlineState = "Unknown", this.$o = void 0;
  }
  return Object.defineProperty(t3.prototype, "isPrimaryClient", {
    get: function() {
      return this.$o === true;
    },
    enumerable: false,
    configurable: true
  }), t3;
}();
function Rs(t3, e) {
  return __awaiter(this, void 0, void 0, function() {
    var n, i, o, s, u, a;
    return __generator(this, function(r) {
      switch (r.label) {
        case 0:
          return n = uu(t3), (s = n.Po.get(e)) ? (i = s.targetId, n.sharedClientState.addLocalQueryTarget(i), o = s.view.Ro(), [3, 4]) : [3, 1];
        case 1:
          return [4, Wi(n.localStore, ne(e))];
        case 2:
          return u = r.sent(), a = n.sharedClientState.addLocalQueryTarget(u.targetId), i = u.targetId, [4, Ls(n, e, i, a === "current")];
        case 3:
          o = r.sent(), n.isPrimaryClient && Uo(n.remoteStore, u), r.label = 4;
        case 4:
          return [2, o];
      }
    });
  });
}
function Ls(t3, e, i, o) {
  return __awaiter(this, void 0, void 0, function() {
    var s, u, a, c, h, f;
    return __generator(this, function(l2) {
      switch (l2.label) {
        case 0:
          return t3.Oo = function(e2, i2, o2) {
            return function(t4, e3, i3, o3) {
              return __awaiter(this, void 0, void 0, function() {
                var n, s2, u2;
                return __generator(this, function(r) {
                  switch (r.label) {
                    case 0:
                      return n = e3.view._o(i3), n.Nn ? [4, Yi(t4.localStore, e3.query, false).then(function(t5) {
                        var r2 = t5.documents;
                        return e3.view._o(r2, n);
                      })] : [3, 2];
                    case 1:
                      n = r.sent(), r.label = 2;
                    case 2:
                      return s2 = o3 && o3.targetChanges.get(e3.targetId), u2 = e3.view.applyChanges(n, t4.isPrimaryClient, s2), [2, (zs(t4, e3.targetId, u2.To), u2.snapshot)];
                  }
                });
              });
            }(t3, e2, i2, o2);
          }, [4, Yi(t3.localStore, e, true)];
        case 1:
          return s = l2.sent(), u = new As(e, s.Bn), a = u._o(s.documents), c = hn.createSynthesizedTargetChangeForCurrentChange(i, o && t3.onlineState !== "Offline"), h = u.applyChanges(a, t3.isPrimaryClient, c), zs(t3, i, h.To), f = new ks(e, i, u), [2, (t3.Po.set(e, f), t3.Vo.has(i) ? t3.Vo.get(i).push(e) : t3.Vo.set(i, [e]), h.snapshot)];
      }
    });
  });
}
function Os(t3, e) {
  return __awaiter(this, void 0, void 0, function() {
    var n, i, o;
    return __generator(this, function(r) {
      switch (r.label) {
        case 0:
          return n = F2(t3), i = n.Po.get(e), (o = n.Vo.get(i.targetId)).length > 1 ? [2, (n.Vo.set(i.targetId, o.filter(function(t4) {
            return !ie(t4, e);
          })), void n.Po.delete(e))] : n.isPrimaryClient ? (n.sharedClientState.removeLocalQueryTarget(i.targetId), n.sharedClientState.isActiveQueryTarget(i.targetId) ? [3, 2] : [4, Hi(n.localStore, i.targetId, false).then(function() {
            n.sharedClientState.clearQueryState(i.targetId), Bo(n.remoteStore, i.targetId), Qs(n, i.targetId);
          }).catch(pi)]) : [3, 3];
        case 1:
          r.sent(), r.label = 2;
        case 2:
          return [3, 5];
        case 3:
          return Qs(n, i.targetId), [4, Hi(n.localStore, i.targetId, true)];
        case 4:
          r.sent(), r.label = 5;
        case 5:
          return [2];
      }
    });
  });
}
function Ps(t3, e, i) {
  return __awaiter(this, void 0, void 0, function() {
    var n, o, s, u;
    return __generator(this, function(r) {
      switch (r.label) {
        case 0:
          n = au(t3), r.label = 1;
        case 1:
          return r.trys.push([1, 5, , 6]), [4, function(t4, e2) {
            var n2, r2 = F2(t4), i2 = j.now(), o2 = e2.reduce(function(t5, e3) {
              return t5.add(e3.key);
            }, sn());
            return r2.persistence.runTransaction("Locally write mutations", "readwrite", function(t5) {
              return r2.Mn.pn(t5, o2).next(function(o3) {
                n2 = o3;
                for (var s2 = [], u2 = 0, a = e2; u2 < a.length; u2++) {
                  var c = a[u2], h = Re(c, n2.get(c.key));
                  h != null && s2.push(new Fe(c.key, h, St(h.value.mapValue), De.exists(true)));
                }
                return r2._n.addMutationBatch(t5, i2, s2, e2);
              });
            }).then(function(t5) {
              return t5.applyToLocalDocumentSet(n2), {
                batchId: t5.batchId,
                changes: n2
              };
            });
          }(n.localStore, e)];
        case 2:
          return o = r.sent(), n.sharedClientState.addPendingMutation(o.batchId), function(t4, e2, n2) {
            var r2 = t4.xo[t4.currentUser.toKey()];
            r2 || (r2 = new We(q2)), r2 = r2.insert(e2, n2), t4.xo[t4.currentUser.toKey()] = r2;
          }(n, o.batchId, i), [4, Ys(n, o.changes)];
        case 3:
          return r.sent(), [4, Zo(n.remoteStore)];
        case 4:
          return r.sent(), [3, 6];
        case 5:
          return s = r.sent(), u = hs(s, "Failed to persist write"), i.reject(u), [3, 6];
        case 6:
          return [2];
      }
    });
  });
}
function Fs(t3, e) {
  return __awaiter(this, void 0, void 0, function() {
    var n, i;
    return __generator(this, function(r) {
      switch (r.label) {
        case 0:
          n = F2(t3), r.label = 1;
        case 1:
          return r.trys.push([1, 4, , 6]), [4, Qi(n.localStore, e)];
        case 2:
          return i = r.sent(), e.targetChanges.forEach(function(t4, e2) {
            var r2 = n.Co.get(e2);
            r2 && (P2(t4.addedDocuments.size + t4.modifiedDocuments.size + t4.removedDocuments.size <= 1), t4.addedDocuments.size > 0 ? r2.bo = true : t4.modifiedDocuments.size > 0 ? P2(r2.bo) : t4.removedDocuments.size > 0 && (P2(r2.bo), r2.bo = false));
          }), [4, Ys(n, i, e)];
        case 3:
          return r.sent(), [3, 6];
        case 4:
          return [4, pi(r.sent())];
        case 5:
          return r.sent(), [3, 6];
        case 6:
          return [2];
      }
    });
  });
}
function Ms(t3, e, n) {
  var r = F2(t3);
  if (r.isPrimaryClient && n === 0 || !r.isPrimaryClient && n === 1) {
    var i = [];
    r.Po.forEach(function(t4, n2) {
      var r2 = n2.view.zr(e);
      r2.snapshot && i.push(r2.snapshot);
    }), function(t4, e2) {
      var n2 = F2(t4);
      n2.onlineState = e2;
      var r2 = false;
      n2.queries.forEach(function(t5, n3) {
        for (var i2 = 0, o = n3.listeners; i2 < o.length; i2++) {
          o[i2].zr(e2) && (r2 = true);
        }
      }), r2 && bs(n2);
    }(r.eventManager, e), i.length && r.vo._r(i), r.onlineState = e, r.isPrimaryClient && r.sharedClientState.setOnlineState(e);
  }
}
function Vs(t3, e, i) {
  return __awaiter(this, void 0, void 0, function() {
    var n, o, s, u, a, c;
    return __generator(this, function(r) {
      switch (r.label) {
        case 0:
          return (n = F2(t3)).sharedClientState.updateQueryState(e, "rejected", i), o = n.Co.get(e), (s = o && o.key) ? (u = (u = new We(ct.comparator)).insert(s, Nt.newNoDocument(s, K2.min())), a = sn().add(s), c = new cn(K2.min(), new Map(), new $e(q2), u, a), [4, Fs(n, c)]) : [3, 2];
        case 1:
          return r.sent(), n.Do = n.Do.remove(s), n.Co.delete(e), Hs(n), [3, 4];
        case 2:
          return [4, Hi(n.localStore, e, false).then(function() {
            return Qs(n, e, i);
          }).catch(pi)];
        case 3:
          r.sent(), r.label = 4;
        case 4:
          return [2];
      }
    });
  });
}
function qs(t3, e) {
  return __awaiter(this, void 0, void 0, function() {
    var n, i, o;
    return __generator(this, function(r) {
      switch (r.label) {
        case 0:
          n = F2(t3), i = e.batch.batchId, r.label = 1;
        case 1:
          return r.trys.push([1, 4, , 6]), [4, ji(n.localStore, e)];
        case 2:
          return o = r.sent(), Ks(n, i, null), js(n, i), n.sharedClientState.updateMutationState(i, "acknowledged"), [4, Ys(n, o)];
        case 3:
          return r.sent(), [3, 6];
        case 4:
          return [4, pi(r.sent())];
        case 5:
          return r.sent(), [3, 6];
        case 6:
          return [2];
      }
    });
  });
}
function Us(t3, e, i) {
  return __awaiter(this, void 0, void 0, function() {
    var n, o;
    return __generator(this, function(r) {
      switch (r.label) {
        case 0:
          n = F2(t3), r.label = 1;
        case 1:
          return r.trys.push([1, 4, , 6]), [4, function(t4, e2) {
            var n2 = F2(t4);
            return n2.persistence.runTransaction("Reject batch", "readwrite-primary", function(t5) {
              var r2;
              return n2._n.lookupMutationBatch(t5, e2).next(function(e3) {
                return P2(e3 !== null), r2 = e3.keys(), n2._n.removeMutationBatch(t5, e3);
              }).next(function() {
                return n2._n.performConsistencyCheck(t5);
              }).next(function() {
                return n2.Mn.pn(t5, r2);
              });
            });
          }(n.localStore, e)];
        case 2:
          return o = r.sent(), Ks(n, e, i), js(n, e), n.sharedClientState.updateMutationState(e, "rejected", i), [4, Ys(n, o)];
        case 3:
          return r.sent(), [3, 6];
        case 4:
          return [4, pi(r.sent())];
        case 5:
          return r.sent(), [3, 6];
        case 6:
          return [2];
      }
    });
  });
}
function Bs(t3, e) {
  return __awaiter(this, void 0, void 0, function() {
    var n, i, o, s, u;
    return __generator(this, function(r) {
      switch (r.label) {
        case 0:
          zo((n = F2(t3)).remoteStore) || C2("SyncEngine", "The network is disabled. The task returned by 'awaitPendingWrites()' will not complete until the network is enabled."), r.label = 1;
        case 1:
          return r.trys.push([1, 3, , 4]), [4, function(t4) {
            var e2 = F2(t4);
            return e2.persistence.runTransaction("Get highest unacknowledged batch id", "readonly", function(t5) {
              return e2._n.getHighestUnacknowledgedBatchId(t5);
            });
          }(n.localStore)];
        case 2:
          return (i = r.sent()) === -1 ? [2, void e.resolve()] : ((o = n.ko.get(i) || []).push(e), n.ko.set(i, o), [3, 4]);
        case 3:
          return s = r.sent(), u = hs(s, "Initialization of waitForPendingWrites() operation failed"), e.reject(u), [3, 4];
        case 4:
          return [2];
      }
    });
  });
}
function js(t3, e) {
  (t3.ko.get(e) || []).forEach(function(t4) {
    t4.resolve();
  }), t3.ko.delete(e);
}
function Ks(t3, e, n) {
  var r = F2(t3), i = r.xo[r.currentUser.toKey()];
  if (i) {
    var o = i.get(e);
    o && (n ? o.reject(n) : o.resolve(), i = i.remove(e)), r.xo[r.currentUser.toKey()] = i;
  }
}
function Qs(t3, e, n) {
  n === void 0 && (n = null), t3.sharedClientState.removeLocalQueryTarget(e);
  for (var r = 0, i = t3.Vo.get(e); r < i.length; r++) {
    var o = i[r];
    t3.Po.delete(o), n && t3.vo.Mo(o, n);
  }
  t3.Vo.delete(e), t3.isPrimaryClient && t3.No.Zn(e).forEach(function(e2) {
    t3.No.containsKey(e2) || Gs(t3, e2);
  });
}
function Gs(t3, e) {
  t3.So.delete(e.path.canonicalString());
  var n = t3.Do.get(e);
  n !== null && (Bo(t3.remoteStore, n), t3.Do = t3.Do.remove(e), t3.Co.delete(n), Hs(t3));
}
function zs(t3, e, n) {
  for (var r = 0, i = n; r < i.length; r++) {
    var o = i[r];
    o instanceof Ns ? (t3.No.addReference(o.key, e), Ws(t3, o)) : o instanceof Ds ? (C2("SyncEngine", "Document no longer in limbo: " + o.key), t3.No.removeReference(o.key, e), t3.No.containsKey(o.key) || Gs(t3, o.key)) : O2();
  }
}
function Ws(t3, e) {
  var n = e.key, r = n.path.canonicalString();
  t3.Do.get(n) || t3.So.has(r) || (C2("SyncEngine", "New document in limbo: " + n), t3.So.add(r), Hs(t3));
}
function Hs(t3) {
  for (; t3.So.size > 0 && t3.Do.size < t3.maxConcurrentLimboResolutions; ) {
    var e = t3.So.values().next().value;
    t3.So.delete(e);
    var n = new ct(H2.fromString(e)), r = t3.Fo.next();
    t3.Co.set(r, new Cs(n)), t3.Do = t3.Do.insert(n, r), Uo(t3.remoteStore, new Pr(ne(Yt(n.path)), r, 2, S2.o));
  }
}
function Ys(t3, e, i) {
  return __awaiter(this, void 0, void 0, function() {
    var o, s, u, a;
    return __generator(this, function(c) {
      switch (c.label) {
        case 0:
          return o = F2(t3), s = [], u = [], a = [], o.Po.isEmpty() ? [3, 3] : (o.Po.forEach(function(t4, n) {
            a.push(o.Oo(n, e, i).then(function(t5) {
              if (t5) {
                o.isPrimaryClient && o.sharedClientState.updateQueryState(n.targetId, t5.fromCache ? "not-current" : "current"), s.push(t5);
                var e2 = Mi.Pn(n.targetId, t5);
                u.push(e2);
              }
            }));
          }), [4, Promise.all(a)]);
        case 1:
          return c.sent(), o.vo._r(s), [4, function(t4, e2) {
            return __awaiter(this, void 0, void 0, function() {
              var n, i2, o2, s2, u2, a2, c2, h, f;
              return __generator(this, function(r) {
                switch (r.label) {
                  case 0:
                    n = F2(t4), r.label = 1;
                  case 1:
                    return r.trys.push([1, 3, , 4]), [4, n.persistence.runTransaction("notifyLocalViewChanges", "readwrite", function(t5) {
                      return Ir.forEach(e2, function(e3) {
                        return Ir.forEach(e3.bn, function(r2) {
                          return n.persistence.referenceDelegate.addReference(t5, e3.targetId, r2);
                        }).next(function() {
                          return Ir.forEach(e3.vn, function(r2) {
                            return n.persistence.referenceDelegate.removeReference(t5, e3.targetId, r2);
                          });
                        });
                      });
                    })];
                  case 2:
                    return r.sent(), [3, 4];
                  case 3:
                    if (!Nr(i2 = r.sent()))
                      throw i2;
                    return C2("LocalStore", "Failed to update sequence numbers: " + i2), [3, 4];
                  case 4:
                    for (o2 = 0, s2 = e2; o2 < s2.length; o2++)
                      u2 = s2[o2], a2 = u2.targetId, u2.fromCache || (c2 = n.kn.get(a2), h = c2.snapshotVersion, f = c2.withLastLimboFreeSnapshotVersion(h), n.kn = n.kn.insert(a2, f));
                    return [2];
                }
              });
            });
          }(o.localStore, u)];
        case 2:
          c.sent(), c.label = 3;
        case 3:
          return [2];
      }
    });
  });
}
function $s(t3, e) {
  return __awaiter(this, void 0, void 0, function() {
    var n, i;
    return __generator(this, function(r) {
      switch (r.label) {
        case 0:
          return (n = F2(t3)).currentUser.isEqual(e) ? [3, 3] : (C2("SyncEngine", "User change. New user:", e.toKey()), [4, Bi(n.localStore, e)]);
        case 1:
          return i = r.sent(), n.currentUser = e, function(t4, e2) {
            t4.ko.forEach(function(t5) {
              t5.forEach(function(t6) {
                t6.reject(new D2(N2.CANCELLED, "'waitForPendingWrites' promise is rejected due to a user change."));
              });
            }), t4.ko.clear();
          }(n), n.sharedClientState.handleUserChange(e, i.removedBatchIds, i.addedBatchIds), [4, Ys(n, i.Ln)];
        case 2:
          r.sent(), r.label = 3;
        case 3:
          return [2];
      }
    });
  });
}
function Xs(t3, e) {
  var n = F2(t3), r = n.Co.get(e);
  if (r && r.bo)
    return sn().add(r.key);
  var i = sn(), o = n.Vo.get(e);
  if (!o)
    return i;
  for (var s = 0, u = o; s < u.length; s++) {
    var a = u[s], c = n.Po.get(a);
    i = i.unionWith(c.view.wo);
  }
  return i;
}
function Js(t3, e) {
  return __awaiter(this, void 0, void 0, function() {
    var n, i, o;
    return __generator(this, function(r) {
      switch (r.label) {
        case 0:
          return [4, Yi((n = F2(t3)).localStore, e.query, true)];
        case 1:
          return i = r.sent(), o = e.view.Ao(i), [2, (n.isPrimaryClient && zs(n, e.targetId, o.To), o)];
      }
    });
  });
}
function Zs(t3) {
  return __awaiter(this, void 0, void 0, function() {
    var e;
    return __generator(this, function(n) {
      return [2, Xi((e = F2(t3)).localStore).then(function(t4) {
        return Ys(e, t4);
      })];
    });
  });
}
function tu(t3, e, i, o) {
  return __awaiter(this, void 0, void 0, function() {
    var n, s;
    return __generator(this, function(r) {
      switch (r.label) {
        case 0:
          return [4, function(t4, e2) {
            var n2 = F2(t4), r2 = F2(n2._n);
            return n2.persistence.runTransaction("Lookup mutation documents", "readonly", function(t5) {
              return r2.jt(t5, e2).next(function(e3) {
                return e3 ? n2.Mn.pn(t5, e3) : Ir.resolve(null);
              });
            });
          }((n = F2(t3)).localStore, e)];
        case 1:
          return (s = r.sent()) === null ? [3, 6] : i !== "pending" ? [3, 3] : [4, Zo(n.remoteStore)];
        case 2:
          return r.sent(), [3, 4];
        case 3:
          i === "acknowledged" || i === "rejected" ? (Ks(n, e, o || null), js(n, e), function(t4, e2) {
            F2(F2(t4)._n).Gt(e2);
          }(n.localStore, e)) : O2(), r.label = 4;
        case 4:
          return [4, Ys(n, s)];
        case 5:
          return r.sent(), [3, 7];
        case 6:
          C2("SyncEngine", "Cannot apply mutation batch with id: " + e), r.label = 7;
        case 7:
          return [2];
      }
    });
  });
}
function eu(t3, e) {
  return __awaiter(this, void 0, void 0, function() {
    var n, i, o, s, u, a, c, h;
    return __generator(this, function(r) {
      switch (r.label) {
        case 0:
          return uu(n = F2(t3)), au(n), e !== true || n.$o === true ? [3, 3] : (i = n.sharedClientState.getAllActiveQueryTargets(), [4, nu(n, i.toArray())]);
        case 1:
          return o = r.sent(), n.$o = true, [4, ss(n.remoteStore, true)];
        case 2:
          for (r.sent(), s = 0, u = o; s < u.length; s++)
            a = u[s], Uo(n.remoteStore, a);
          return [3, 7];
        case 3:
          return e !== false || n.$o === false ? [3, 7] : (c = [], h = Promise.resolve(), n.Vo.forEach(function(t4, e2) {
            n.sharedClientState.isLocalQueryTarget(e2) ? c.push(e2) : h = h.then(function() {
              return Qs(n, e2), Hi(n.localStore, e2, true);
            }), Bo(n.remoteStore, e2);
          }), [4, h]);
        case 4:
          return r.sent(), [4, nu(n, c)];
        case 5:
          return r.sent(), function(t4) {
            var e2 = F2(t4);
            e2.Co.forEach(function(t5, n2) {
              Bo(e2.remoteStore, n2);
            }), e2.No.ts(), e2.Co = new Map(), e2.Do = new We(ct.comparator);
          }(n), n.$o = false, [4, ss(n.remoteStore, false)];
        case 6:
          r.sent(), r.label = 7;
        case 7:
          return [2];
      }
    });
  });
}
function nu(t3, e, i) {
  return __awaiter(this, void 0, void 0, function() {
    var n, i2, o, s, u, a, c, h, f, l2, d, p2, y2, v2;
    return __generator(this, function(r) {
      switch (r.label) {
        case 0:
          n = F2(t3), i2 = [], o = [], s = 0, u = e, r.label = 1;
        case 1:
          return s < u.length ? (a = u[s], c = void 0, (h = n.Vo.get(a)) && h.length !== 0 ? [4, Wi(n.localStore, ne(h[0]))] : [3, 7]) : [3, 13];
        case 2:
          c = r.sent(), f = 0, l2 = h, r.label = 3;
        case 3:
          return f < l2.length ? (d = l2[f], p2 = n.Po.get(d), [4, Js(n, p2)]) : [3, 6];
        case 4:
          (y2 = r.sent()).snapshot && o.push(y2.snapshot), r.label = 5;
        case 5:
          return f++, [3, 3];
        case 6:
          return [3, 11];
        case 7:
          return [4, $i(n.localStore, a)];
        case 8:
          return v2 = r.sent(), [4, Wi(n.localStore, v2)];
        case 9:
          return c = r.sent(), [4, Ls(n, ru(v2), a, false)];
        case 10:
          r.sent(), r.label = 11;
        case 11:
          i2.push(c), r.label = 12;
        case 12:
          return s++, [3, 1];
        case 13:
          return [2, (n.vo._r(o), i2)];
      }
    });
  });
}
function ru(t3) {
  return Ht(t3.path, t3.collectionGroup, t3.orderBy, t3.filters, t3.limit, "F", t3.startAt, t3.endAt);
}
function iu(t3) {
  var e = F2(t3);
  return F2(F2(e.localStore).persistence).fn();
}
function ou(t3, e, i, o) {
  return __awaiter(this, void 0, void 0, function() {
    var n, s, u;
    return __generator(this, function(r) {
      switch (r.label) {
        case 0:
          return (n = F2(t3)).$o ? (C2("SyncEngine", "Ignoring unexpected query state notification."), [3, 8]) : [3, 1];
        case 1:
          if (!n.Vo.has(e))
            return [3, 8];
          switch (i) {
            case "current":
            case "not-current":
              return [3, 2];
            case "rejected":
              return [3, 5];
          }
          return [3, 7];
        case 2:
          return [4, Xi(n.localStore)];
        case 3:
          return s = r.sent(), u = cn.createSynthesizedRemoteEventForCurrentChange(e, i === "current"), [4, Ys(n, s, u)];
        case 4:
          return r.sent(), [3, 8];
        case 5:
          return [4, Hi(n.localStore, e, true)];
        case 6:
          return r.sent(), Qs(n, e, o), [3, 8];
        case 7:
          O2(), r.label = 8;
        case 8:
          return [2];
      }
    });
  });
}
function su(t3, e, i) {
  return __awaiter(this, void 0, void 0, function() {
    var n, o, s, u, a, c, h, f, l2, d;
    return __generator(this, function(p2) {
      switch (p2.label) {
        case 0:
          if (!(n = uu(t3)).$o)
            return [3, 10];
          o = 0, s = e, p2.label = 1;
        case 1:
          return o < s.length ? (u = s[o], n.Vo.has(u) ? (C2("SyncEngine", "Adding an already active target " + u), [3, 5]) : [4, $i(n.localStore, u)]) : [3, 6];
        case 2:
          return a = p2.sent(), [4, Wi(n.localStore, a)];
        case 3:
          return c = p2.sent(), [4, Ls(n, ru(a), c.targetId, false)];
        case 4:
          p2.sent(), Uo(n.remoteStore, c), p2.label = 5;
        case 5:
          return o++, [3, 1];
        case 6:
          h = function(t4) {
            return __generator(this, function(e2) {
              switch (e2.label) {
                case 0:
                  return n.Vo.has(t4) ? [4, Hi(n.localStore, t4, false).then(function() {
                    Bo(n.remoteStore, t4), Qs(n, t4);
                  }).catch(pi)] : [3, 2];
                case 1:
                  e2.sent(), e2.label = 2;
                case 2:
                  return [2];
              }
            });
          }, f = 0, l2 = i, p2.label = 7;
        case 7:
          return f < l2.length ? (d = l2[f], [5, h(d)]) : [3, 10];
        case 8:
          p2.sent(), p2.label = 9;
        case 9:
          return f++, [3, 7];
        case 10:
          return [2];
      }
    });
  });
}
function uu(t3) {
  var e = F2(t3);
  return e.remoteStore.remoteSyncer.applyRemoteEvent = Fs.bind(null, e), e.remoteStore.remoteSyncer.getRemoteKeysForTarget = Xs.bind(null, e), e.remoteStore.remoteSyncer.rejectListen = Vs.bind(null, e), e.vo._r = gs.bind(null, e.eventManager), e.vo.Mo = ws.bind(null, e.eventManager), e;
}
function au(t3) {
  var e = F2(t3);
  return e.remoteStore.remoteSyncer.applySuccessfulWrite = qs.bind(null, e), e.remoteStore.remoteSyncer.rejectFailedWrite = Us.bind(null, e), e;
}
function cu(t3, e, i) {
  var o = F2(t3);
  (function(t4, e2, i2) {
    return __awaiter(this, void 0, void 0, function() {
      var n, o2, s, u, a, c;
      return __generator(this, function(r) {
        switch (r.label) {
          case 0:
            return r.trys.push([0, 14, , 15]), [4, e2.getMetadata()];
          case 1:
            return n = r.sent(), [4, function(t5, e3) {
              var n2 = F2(t5), r2 = _n(e3.createTime);
              return n2.persistence.runTransaction("hasNewerBundle", "readonly", function(t6) {
                return n2.Ke.getBundleMetadata(t6, e3.id);
              }).then(function(t6) {
                return !!t6 && t6.createTime.compareTo(r2) >= 0;
              });
            }(t4.localStore, n)];
          case 2:
            return r.sent() ? [4, e2.close()] : [3, 4];
          case 3:
            return [2, (r.sent(), void i2._completeWith(function(t5) {
              return {
                taskState: "Success",
                documentsLoaded: t5.totalDocuments,
                bytesLoaded: t5.totalBytes,
                totalDocuments: t5.totalDocuments,
                totalBytes: t5.totalBytes
              };
            }(n)))];
          case 4:
            return i2._updateProgress(Ss(n)), o2 = new _s(n, t4.localStore, e2.R), [4, e2.Lo()];
          case 5:
            s = r.sent(), r.label = 6;
          case 6:
            return s ? [4, o2.oo(s)] : [3, 10];
          case 7:
            return (u = r.sent()) && i2._updateProgress(u), [4, e2.Lo()];
          case 8:
            s = r.sent(), r.label = 9;
          case 9:
            return [3, 6];
          case 10:
            return [4, o2.complete()];
          case 11:
            return a = r.sent(), [4, Ys(t4, a.wn, void 0)];
          case 12:
            return r.sent(), [4, function(t5, e3) {
              var n2 = F2(t5);
              return n2.persistence.runTransaction("Save bundle", "readwrite", function(t6) {
                return n2.Ke.saveBundleMetadata(t6, e3);
              });
            }(t4.localStore, n)];
          case 13:
            return r.sent(), i2._completeWith(a.progress), [3, 15];
          case 14:
            return R2("SyncEngine", "Loading bundle failed with " + (c = r.sent())), i2._failWith(c), [3, 15];
          case 15:
            return [2];
        }
      });
    });
  })(o, e, i).then(function() {
    o.sharedClientState.notifyBundleLoaded();
  });
}
var hu = function() {
  function t3() {
    this.synchronizeTabs = false;
  }
  return t3.prototype.initialize = function(t4) {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(e) {
        switch (e.label) {
          case 0:
            return this.R = Co(t4.databaseInfo.databaseId), this.sharedClientState = this.Bo(t4), this.persistence = this.qo(t4), [4, this.persistence.start()];
          case 1:
            return e.sent(), this.gcScheduler = this.Uo(t4), this.localStore = this.Ko(t4), [2];
        }
      });
    });
  }, t3.prototype.Uo = function(t4) {
    return null;
  }, t3.prototype.Ko = function(t4) {
    return Ui(this.persistence, new Vi(), t4.initialUser, this.R);
  }, t3.prototype.qo = function(t4) {
    return new ao(ho.bs, this.R);
  }, t3.prototype.Bo = function(t4) {
    return new To();
  }, t3.prototype.terminate = function() {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(t4) {
        switch (t4.label) {
          case 0:
            return this.gcScheduler && this.gcScheduler.stop(), [4, this.sharedClientState.shutdown()];
          case 1:
            return t4.sent(), [4, this.persistence.shutdown()];
          case 2:
            return t4.sent(), [2];
        }
      });
    });
  }, t3;
}();
var fu = function(e) {
  function i(t3, n, r) {
    var i2 = this;
    return (i2 = e.call(this) || this).Qo = t3, i2.cacheSizeBytes = n, i2.forceOwnership = r, i2.synchronizeTabs = false, i2;
  }
  return __extends(i, e), i.prototype.initialize = function(t3) {
    return __awaiter(this, void 0, void 0, function() {
      var n = this;
      return __generator(this, function(r) {
        switch (r.label) {
          case 0:
            return [4, e.prototype.initialize.call(this, t3)];
          case 1:
            return r.sent(), [4, Ji(this.localStore)];
          case 2:
            return r.sent(), [4, this.Qo.initialize(this, t3)];
          case 3:
            return r.sent(), [4, au(this.Qo.syncEngine)];
          case 4:
            return r.sent(), [4, Zo(this.Qo.remoteStore)];
          case 5:
            return r.sent(), [4, this.persistence.He(function() {
              return n.gcScheduler && !n.gcScheduler.started && n.gcScheduler.start(n.localStore), Promise.resolve();
            })];
          case 6:
            return r.sent(), [2];
        }
      });
    });
  }, i.prototype.Ko = function(t3) {
    return Ui(this.persistence, new Vi(), t3.initialUser, this.R);
  }, i.prototype.Uo = function(t3) {
    var e2 = this.persistence.referenceDelegate.garbageCollector;
    return new mi(e2, t3.asyncQueue);
  }, i.prototype.qo = function(t3) {
    var e2 = Oi(t3.databaseInfo.databaseId, t3.databaseInfo.persistenceKey), n = this.cacheSizeBytes !== void 0 ? ei.withCacheSize(this.cacheSizeBytes) : ei.DEFAULT;
    return new xi(this.synchronizeTabs, e2, t3.clientId, n, t3.asyncQueue, Ao(), ko(), this.R, this.sharedClientState, !!this.forceOwnership);
  }, i.prototype.Bo = function(t3) {
    return new To();
  }, i;
}(hu);
var lu = function(e) {
  function i(t3, n) {
    var r = this;
    return (r = e.call(this, t3, n, false) || this).Qo = t3, r.cacheSizeBytes = n, r.synchronizeTabs = true, r;
  }
  return __extends(i, e), i.prototype.initialize = function(t3) {
    return __awaiter(this, void 0, void 0, function() {
      var i2, o = this;
      return __generator(this, function(s) {
        switch (s.label) {
          case 0:
            return [4, e.prototype.initialize.call(this, t3)];
          case 1:
            return s.sent(), i2 = this.Qo.syncEngine, this.sharedClientState instanceof Io ? (this.sharedClientState.syncEngine = {
              ui: tu.bind(null, i2),
              ai: ou.bind(null, i2),
              hi: su.bind(null, i2),
              fn: iu.bind(null, i2),
              ci: Zs.bind(null, i2)
            }, [4, this.sharedClientState.start()]) : [3, 3];
          case 2:
            s.sent(), s.label = 3;
          case 3:
            return [4, this.persistence.He(function(t4) {
              return __awaiter(o, void 0, void 0, function() {
                return __generator(this, function(e2) {
                  switch (e2.label) {
                    case 0:
                      return [4, eu(this.Qo.syncEngine, t4)];
                    case 1:
                      return e2.sent(), this.gcScheduler && (t4 && !this.gcScheduler.started ? this.gcScheduler.start(this.localStore) : t4 || this.gcScheduler.stop()), [2];
                  }
                });
              });
            })];
          case 4:
            return s.sent(), [2];
        }
      });
    });
  }, i.prototype.Bo = function(t3) {
    var e2 = Ao();
    if (!Io.yt(e2))
      throw new D2(N2.UNIMPLEMENTED, "IndexedDB persistence is only available on platforms that support LocalStorage.");
    var n = Oi(t3.databaseInfo.databaseId, t3.databaseInfo.persistenceKey);
    return new Io(e2, t3.asyncQueue, n, t3.clientId, t3.initialUser);
  }, i;
}(fu);
var du = function() {
  function t3() {
  }
  return t3.prototype.initialize = function(t4, e) {
    return __awaiter(this, void 0, void 0, function() {
      var n = this;
      return __generator(this, function(r) {
        switch (r.label) {
          case 0:
            return this.localStore ? [3, 2] : (this.localStore = t4.localStore, this.sharedClientState = t4.sharedClientState, this.datastore = this.createDatastore(e), this.remoteStore = this.createRemoteStore(e), this.eventManager = this.createEventManager(e), this.syncEngine = this.createSyncEngine(e, !t4.synchronizeTabs), this.sharedClientState.onlineStateHandler = function(t5) {
              return Ms(n.syncEngine, t5, 1);
            }, this.remoteStore.remoteSyncer.handleCredentialChange = $s.bind(null, this.syncEngine), [4, ss(this.remoteStore, this.syncEngine.isPrimaryClient)]);
          case 1:
            r.sent(), r.label = 2;
          case 2:
            return [2];
        }
      });
    });
  }, t3.prototype.createEventManager = function(t4) {
    return new ys();
  }, t3.prototype.createDatastore = function(t4) {
    var e, n = Co(t4.databaseInfo.databaseId), r = (e = t4.databaseInfo, new Do(e));
    return function(t5, e2, n2) {
      return new Po(t5, e2, n2);
    }(t4.credentials, r, n);
  }, t3.prototype.createRemoteStore = function(t4) {
    var e, n, r, i, o, s = this;
    return e = this.localStore, n = this.datastore, r = t4.asyncQueue, i = function(t5) {
      return Ms(s.syncEngine, t5, 0);
    }, o = _o.yt() ? new _o() : new Eo(), new Mo(e, n, r, i, o);
  }, t3.prototype.createSyncEngine = function(t4, e) {
    return function(t5, e2, n, r, i, o, s) {
      var u = new xs(t5, e2, n, r, i, o);
      return s && (u.$o = true), u;
    }(this.localStore, this.remoteStore, this.eventManager, this.sharedClientState, t4.initialUser, t4.maxConcurrentLimboResolutions, e);
  }, t3.prototype.terminate = function() {
    return function(t4) {
      return __awaiter(this, void 0, void 0, function() {
        var e;
        return __generator(this, function(n) {
          switch (n.label) {
            case 0:
              return e = F2(t4), C2("RemoteStore", "RemoteStore shutting down."), e.Or.add(5), [4, qo(e)];
            case 1:
              return n.sent(), e.Lr.shutdown(), e.Br.set("Unknown"), [2];
          }
        });
      });
    }(this.remoteStore);
  }, t3;
}();
function pu(t3, e) {
  e === void 0 && (e = 10240);
  var i = 0;
  return {
    read: function() {
      return __awaiter(this, void 0, void 0, function() {
        var n;
        return __generator(this, function(r) {
          return i < t3.byteLength ? (n = {
            value: t3.slice(i, i + e),
            done: false
          }, [2, (i += e, n)]) : [2, {
            done: true
          }];
        });
      });
    },
    cancel: function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(t4) {
          return [2];
        });
      });
    },
    releaseLock: function() {
    },
    closed: Promise.reject("unimplemented")
  };
}
var yu = function() {
  function t3(t4) {
    this.observer = t4, this.muted = false;
  }
  return t3.prototype.next = function(t4) {
    this.observer.next && this.jo(this.observer.next, t4);
  }, t3.prototype.error = function(t4) {
    this.observer.error ? this.jo(this.observer.error, t4) : console.error("Uncaught Error in snapshot listener:", t4);
  }, t3.prototype.Wo = function() {
    this.muted = true;
  }, t3.prototype.jo = function(t4, e) {
    var n = this;
    this.muted || setTimeout(function() {
      n.muted || t4(e);
    }, 0);
  }, t3;
}();
var vu = function() {
  function t3(t4, e) {
    var n = this;
    this.Go = t4, this.R = e, this.metadata = new br(), this.buffer = new Uint8Array(), this.zo = new TextDecoder("utf-8"), this.Ho().then(function(t5) {
      t5 && t5.io() ? n.metadata.resolve(t5.payload.metadata) : n.metadata.reject(new Error("The first element of the bundle is not a metadata, it is\n             " + JSON.stringify(t5 == null ? void 0 : t5.payload)));
    }, function(t5) {
      return n.metadata.reject(t5);
    });
  }
  return t3.prototype.close = function() {
    return this.Go.cancel();
  }, t3.prototype.getMetadata = function() {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(t4) {
        return [2, this.metadata.promise];
      });
    });
  }, t3.prototype.Lo = function() {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(t4) {
        switch (t4.label) {
          case 0:
            return [4, this.getMetadata()];
          case 1:
            return [2, (t4.sent(), this.Ho())];
        }
      });
    });
  }, t3.prototype.Ho = function() {
    return __awaiter(this, void 0, void 0, function() {
      var t4, e, n, i;
      return __generator(this, function(r) {
        switch (r.label) {
          case 0:
            return [4, this.Jo()];
          case 1:
            return (t4 = r.sent()) === null ? [2, null] : (e = this.zo.decode(t4), n = Number(e), isNaN(n) && this.Yo("length string (" + e + ") is not valid number"), [4, this.Xo(n)]);
          case 2:
            return i = r.sent(), [2, new Ts(JSON.parse(i), t4.length + n)];
        }
      });
    });
  }, t3.prototype.Zo = function() {
    return this.buffer.findIndex(function(t4) {
      return t4 === "{".charCodeAt(0);
    });
  }, t3.prototype.Jo = function() {
    return __awaiter(this, void 0, void 0, function() {
      var t4, e;
      return __generator(this, function(n) {
        switch (n.label) {
          case 0:
            return this.Zo() < 0 ? [4, this.tc()] : [3, 3];
          case 1:
            if (n.sent())
              return [3, 3];
            n.label = 2;
          case 2:
            return [3, 0];
          case 3:
            return this.buffer.length === 0 ? [2, null] : ((t4 = this.Zo()) < 0 && this.Yo("Reached the end of bundle when a length string is expected."), e = this.buffer.slice(0, t4), [2, (this.buffer = this.buffer.slice(t4), e)]);
        }
      });
    });
  }, t3.prototype.Xo = function(t4) {
    return __awaiter(this, void 0, void 0, function() {
      var e;
      return __generator(this, function(n) {
        switch (n.label) {
          case 0:
            return this.buffer.length < t4 ? [4, this.tc()] : [3, 3];
          case 1:
            n.sent() && this.Yo("Reached the end of bundle when more is expected."), n.label = 2;
          case 2:
            return [3, 0];
          case 3:
            return e = this.zo.decode(this.buffer.slice(0, t4)), [2, (this.buffer = this.buffer.slice(t4), e)];
        }
      });
    });
  }, t3.prototype.Yo = function(t4) {
    throw this.Go.cancel(), new Error("Invalid bundle format: " + t4);
  }, t3.prototype.tc = function() {
    return __awaiter(this, void 0, void 0, function() {
      var t4, e;
      return __generator(this, function(n) {
        switch (n.label) {
          case 0:
            return [4, this.Go.read()];
          case 1:
            return (t4 = n.sent()).done || ((e = new Uint8Array(this.buffer.length + t4.value.length)).set(this.buffer), e.set(t4.value, this.buffer.length), this.buffer = e), [2, t4.done];
        }
      });
    });
  }, t3;
}();
var mu = function() {
  function t3(t4) {
    this.datastore = t4, this.readVersions = new Map(), this.mutations = [], this.committed = false, this.lastWriteError = null, this.writtenDocs = new Set();
  }
  return t3.prototype.lookup = function(t4) {
    return __awaiter(this, void 0, void 0, function() {
      var e, i = this;
      return __generator(this, function(o) {
        switch (o.label) {
          case 0:
            if (this.ensureCommitNotCalled(), this.mutations.length > 0)
              throw new D2(N2.INVALID_ARGUMENT, "Firestore transactions require all reads to be executed before all writes.");
            return [4, function(t5, e2) {
              return __awaiter(this, void 0, void 0, function() {
                var n, i2, o2, s, u, a;
                return __generator(this, function(r) {
                  switch (r.label) {
                    case 0:
                      return n = F2(t5), i2 = xn(n.R) + "/documents", o2 = {
                        documents: e2.map(function(t6) {
                          return Dn(n.R, t6);
                        })
                      }, [4, n.$i("BatchGetDocuments", i2, o2)];
                    case 1:
                      return s = r.sent(), u = new Map(), s.forEach(function(t6) {
                        var e3 = function(t7, e4) {
                          return "found" in e4 ? function(t8, e5) {
                            P2(!!e5.found), e5.found.name, e5.found.updateTime;
                            var n2 = An(t8, e5.found.name), r2 = _n(e5.found.updateTime), i3 = new _t({
                              mapValue: {
                                fields: e5.found.fields
                              }
                            });
                            return Nt.newFoundDocument(n2, r2, i3);
                          }(t7, e4) : "missing" in e4 ? function(t8, e5) {
                            P2(!!e5.missing), P2(!!e5.readTime);
                            var n2 = An(t8, e5.missing), r2 = _n(e5.readTime);
                            return Nt.newNoDocument(n2, r2);
                          }(t7, e4) : O2();
                        }(n.R, t6);
                        u.set(e3.key.toString(), e3);
                      }), a = [], [2, (e2.forEach(function(t6) {
                        var e3 = u.get(t6.toString());
                        P2(!!e3), a.push(e3);
                      }), a)];
                  }
                });
              });
            }(this.datastore, t4)];
          case 1:
            return [2, ((e = o.sent()).forEach(function(t5) {
              return i.recordVersion(t5);
            }), e)];
        }
      });
    });
  }, t3.prototype.set = function(t4, e) {
    this.write(e.toMutation(t4, this.precondition(t4))), this.writtenDocs.add(t4.toString());
  }, t3.prototype.update = function(t4, e) {
    try {
      this.write(e.toMutation(t4, this.preconditionForUpdate(t4)));
    } catch (t5) {
      this.lastWriteError = t5;
    }
    this.writtenDocs.add(t4.toString());
  }, t3.prototype.delete = function(t4) {
    this.write(new je(t4, this.precondition(t4))), this.writtenDocs.add(t4.toString());
  }, t3.prototype.commit = function() {
    return __awaiter(this, void 0, void 0, function() {
      var t4, e = this;
      return __generator(this, function(i) {
        switch (i.label) {
          case 0:
            if (this.ensureCommitNotCalled(), this.lastWriteError)
              throw this.lastWriteError;
            return t4 = this.readVersions, this.mutations.forEach(function(e2) {
              t4.delete(e2.key.toString());
            }), t4.forEach(function(t5, n) {
              var r = ct.fromPath(n);
              e.mutations.push(new Ke(r, e.precondition(r)));
            }), [4, function(t5, e2) {
              return __awaiter(this, void 0, void 0, function() {
                var n, i2, o;
                return __generator(this, function(r) {
                  switch (r.label) {
                    case 0:
                      return n = F2(t5), i2 = xn(n.R) + "/documents", o = {
                        writes: e2.map(function(t6) {
                          return Pn(n.R, t6);
                        })
                      }, [4, n.Ni("Commit", i2, o)];
                    case 1:
                      return r.sent(), [2];
                  }
                });
              });
            }(this.datastore, this.mutations)];
          case 1:
            return i.sent(), this.committed = true, [2];
        }
      });
    });
  }, t3.prototype.recordVersion = function(t4) {
    var e;
    if (t4.isFoundDocument())
      e = t4.version;
    else {
      if (!t4.isNoDocument())
        throw O2();
      e = K2.min();
    }
    var n = this.readVersions.get(t4.key.toString());
    if (n) {
      if (!e.isEqual(n))
        throw new D2(N2.ABORTED, "Document version changed between two reads.");
    } else
      this.readVersions.set(t4.key.toString(), e);
  }, t3.prototype.precondition = function(t4) {
    var e = this.readVersions.get(t4.toString());
    return !this.writtenDocs.has(t4.toString()) && e ? De.updateTime(e) : De.none();
  }, t3.prototype.preconditionForUpdate = function(t4) {
    var e = this.readVersions.get(t4.toString());
    if (!this.writtenDocs.has(t4.toString()) && e) {
      if (e.isEqual(K2.min()))
        throw new D2(N2.INVALID_ARGUMENT, "Can't update a document that doesn't exist.");
      return De.updateTime(e);
    }
    return De.exists(true);
  }, t3.prototype.write = function(t4) {
    this.ensureCommitNotCalled(), this.mutations.push(t4);
  }, t3.prototype.ensureCommitNotCalled = function() {
  }, t3;
}();
var gu = function() {
  function t3(t4, e, n, r) {
    this.asyncQueue = t4, this.datastore = e, this.updateFunction = n, this.deferred = r, this.ec = 5, this.Zi = new xo(this.asyncQueue, "transaction_retry");
  }
  return t3.prototype.run = function() {
    this.ec -= 1, this.nc();
  }, t3.prototype.nc = function() {
    var t4 = this;
    this.Zi.ji(function() {
      return __awaiter(t4, void 0, void 0, function() {
        var t5, e, n = this;
        return __generator(this, function(r) {
          return t5 = new mu(this.datastore), (e = this.sc(t5)) && e.then(function(e2) {
            n.asyncQueue.enqueueAndForget(function() {
              return t5.commit().then(function() {
                n.deferred.resolve(e2);
              }).catch(function(t6) {
                n.ic(t6);
              });
            });
          }).catch(function(t6) {
            n.ic(t6);
          }), [2];
        });
      });
    });
  }, t3.prototype.sc = function(t4) {
    try {
      var e = this.updateFunction(t4);
      return !st(e) && e.catch && e.then ? e : (this.deferred.reject(Error("Transaction callback must return a Promise")), null);
    } catch (t5) {
      return this.deferred.reject(t5), null;
    }
  }, t3.prototype.ic = function(t4) {
    var e = this;
    this.ec > 0 && this.rc(t4) ? (this.ec -= 1, this.asyncQueue.enqueueAndForget(function() {
      return e.nc(), Promise.resolve();
    })) : this.deferred.reject(t4);
  }, t3.prototype.rc = function(t4) {
    if (t4.name === "FirebaseError") {
      var e = t4.code;
      return e === "aborted" || e === "failed-precondition" || !Ge(e);
    }
    return false;
  }, t3;
}();
var wu = function() {
  function t3(t4, e, i) {
    var o = this;
    this.credentials = t4, this.asyncQueue = e, this.databaseInfo = i, this.user = fo.UNAUTHENTICATED, this.clientId = V2.u(), this.credentialListener = function() {
      return Promise.resolve();
    }, this.credentials.setChangeListener(e, function(t5) {
      return __awaiter(o, void 0, void 0, function() {
        return __generator(this, function(e2) {
          switch (e2.label) {
            case 0:
              return C2("FirestoreClient", "Received user=", t5.uid), [4, this.credentialListener(t5)];
            case 1:
              return e2.sent(), this.user = t5, [2];
          }
        });
      });
    });
  }
  return t3.prototype.getConfiguration = function() {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(t4) {
        return [2, {
          asyncQueue: this.asyncQueue,
          databaseInfo: this.databaseInfo,
          clientId: this.clientId,
          credentials: this.credentials,
          initialUser: this.user,
          maxConcurrentLimboResolutions: 100
        }];
      });
    });
  }, t3.prototype.setCredentialChangeListener = function(t4) {
    this.credentialListener = t4;
  }, t3.prototype.verifyNotTerminated = function() {
    if (this.asyncQueue.isShuttingDown)
      throw new D2(N2.FAILED_PRECONDITION, "The client has already been terminated.");
  }, t3.prototype.terminate = function() {
    var t4 = this;
    this.asyncQueue.enterRestrictedMode();
    var e = new br();
    return this.asyncQueue.enqueueAndForgetEvenWhileRestricted(function() {
      return __awaiter(t4, void 0, void 0, function() {
        var t5, n;
        return __generator(this, function(r) {
          switch (r.label) {
            case 0:
              return r.trys.push([0, 5, , 6]), this.onlineComponents ? [4, this.onlineComponents.terminate()] : [3, 2];
            case 1:
              r.sent(), r.label = 2;
            case 2:
              return this.offlineComponents ? [4, this.offlineComponents.terminate()] : [3, 4];
            case 3:
              r.sent(), r.label = 4;
            case 4:
              return this.credentials.removeChangeListener(), e.resolve(), [3, 6];
            case 5:
              return t5 = r.sent(), n = hs(t5, "Failed to shutdown persistence"), e.reject(n), [3, 6];
            case 6:
              return [2];
          }
        });
      });
    }), e.promise;
  }, t3;
}();
function bu(t3, e) {
  return __awaiter(this, void 0, void 0, function() {
    var i, o, s = this;
    return __generator(this, function(u) {
      switch (u.label) {
        case 0:
          return t3.asyncQueue.verifyOperationInProgress(), C2("FirestoreClient", "Initializing OfflineComponentProvider"), [4, t3.getConfiguration()];
        case 1:
          return i = u.sent(), [4, e.initialize(i)];
        case 2:
          return u.sent(), o = i.initialUser, t3.setCredentialChangeListener(function(t4) {
            return __awaiter(s, void 0, void 0, function() {
              return __generator(this, function(n) {
                switch (n.label) {
                  case 0:
                    return o.isEqual(t4) ? [3, 2] : [4, Bi(e.localStore, t4)];
                  case 1:
                    n.sent(), o = t4, n.label = 2;
                  case 2:
                    return [2];
                }
              });
            });
          }), e.persistence.setDatabaseDeletedListener(function() {
            return t3.terminate();
          }), t3.offlineComponents = e, [2];
      }
    });
  });
}
function Iu(t3, e) {
  return __awaiter(this, void 0, void 0, function() {
    var i, o;
    return __generator(this, function(s) {
      switch (s.label) {
        case 0:
          return t3.asyncQueue.verifyOperationInProgress(), [4, Tu(t3)];
        case 1:
          return i = s.sent(), C2("FirestoreClient", "Initializing OnlineComponentProvider"), [4, t3.getConfiguration()];
        case 2:
          return o = s.sent(), [4, e.initialize(i, o)];
        case 3:
          return s.sent(), t3.setCredentialChangeListener(function(t4) {
            return function(t5, e2) {
              return __awaiter(this, void 0, void 0, function() {
                var n, i2;
                return __generator(this, function(r) {
                  switch (r.label) {
                    case 0:
                      return (n = F2(t5)).asyncQueue.verifyOperationInProgress(), C2("RemoteStore", "RemoteStore received new credentials"), i2 = zo(n), n.Or.add(3), [4, qo(n)];
                    case 1:
                      return r.sent(), i2 && n.Br.set("Unknown"), [4, n.remoteSyncer.handleCredentialChange(e2)];
                    case 2:
                      return r.sent(), n.Or.delete(3), [4, Vo(n)];
                    case 3:
                      return r.sent(), [2];
                  }
                });
              });
            }(e.remoteStore, t4);
          }), t3.onlineComponents = e, [2];
      }
    });
  });
}
function Tu(t3) {
  return __awaiter(this, void 0, void 0, function() {
    return __generator(this, function(e) {
      switch (e.label) {
        case 0:
          return t3.offlineComponents ? [3, 2] : (C2("FirestoreClient", "Using default OfflineComponentProvider"), [4, bu(t3, new hu())]);
        case 1:
          e.sent(), e.label = 2;
        case 2:
          return [2, t3.offlineComponents];
      }
    });
  });
}
function Eu(t3) {
  return __awaiter(this, void 0, void 0, function() {
    return __generator(this, function(e) {
      switch (e.label) {
        case 0:
          return t3.onlineComponents ? [3, 2] : (C2("FirestoreClient", "Using default OnlineComponentProvider"), [4, Iu(t3, new du())]);
        case 1:
          e.sent(), e.label = 2;
        case 2:
          return [2, t3.onlineComponents];
      }
    });
  });
}
function _u(t3) {
  return Tu(t3).then(function(t4) {
    return t4.persistence;
  });
}
function Su(t3) {
  return Tu(t3).then(function(t4) {
    return t4.localStore;
  });
}
function Nu(t3) {
  return Eu(t3).then(function(t4) {
    return t4.remoteStore;
  });
}
function Du(t3) {
  return Eu(t3).then(function(t4) {
    return t4.syncEngine;
  });
}
function Au(t3) {
  return __awaiter(this, void 0, void 0, function() {
    var e, n;
    return __generator(this, function(r) {
      switch (r.label) {
        case 0:
          return [4, Eu(t3)];
        case 1:
          return e = r.sent(), [2, ((n = e.eventManager).onListen = Rs.bind(null, e.syncEngine), n.onUnlisten = Os.bind(null, e.syncEngine), n)];
      }
    });
  });
}
function ku(t3, e, i) {
  var o = this;
  i === void 0 && (i = {});
  var s = new br();
  return t3.asyncQueue.enqueueAndForget(function() {
    return __awaiter(o, void 0, void 0, function() {
      var n;
      return __generator(this, function(r) {
        switch (r.label) {
          case 0:
            return n = function(t4, e2, n2, r2, i2) {
              var o2 = new yu({
                next: function(o3) {
                  e2.enqueueAndForget(function() {
                    return ms(t4, s2);
                  });
                  var u = o3.docs.has(n2);
                  !u && o3.fromCache ? i2.reject(new D2(N2.UNAVAILABLE, "Failed to get document because the client is offline.")) : u && o3.fromCache && r2 && r2.source === "server" ? i2.reject(new D2(N2.UNAVAILABLE, 'Failed to get document from server. (However, this document does exist in the local cache. Run again without setting source to "server" to retrieve the cached document.)')) : i2.resolve(o3);
                },
                error: function(t5) {
                  return i2.reject(t5);
                }
              }), s2 = new Is(Yt(n2.path), o2, {
                includeMetadataChanges: true,
                so: true
              });
              return vs(t4, s2);
            }, [4, Au(t3)];
          case 1:
            return [2, n.apply(void 0, [r.sent(), t3.asyncQueue, e, i, s])];
        }
      });
    });
  }), s.promise;
}
function Cu(t3, e, i) {
  var o = this;
  i === void 0 && (i = {});
  var s = new br();
  return t3.asyncQueue.enqueueAndForget(function() {
    return __awaiter(o, void 0, void 0, function() {
      var n;
      return __generator(this, function(r) {
        switch (r.label) {
          case 0:
            return n = function(t4, e2, n2, r2, i2) {
              var o2 = new yu({
                next: function(n3) {
                  e2.enqueueAndForget(function() {
                    return ms(t4, s2);
                  }), n3.fromCache && r2.source === "server" ? i2.reject(new D2(N2.UNAVAILABLE, 'Failed to get documents from server. (However, these documents may exist in the local cache. Run again without setting source to "server" to retrieve the cached documents.)')) : i2.resolve(n3);
                },
                error: function(t5) {
                  return i2.reject(t5);
                }
              }), s2 = new Is(n2, o2, {
                includeMetadataChanges: true,
                so: true
              });
              return vs(t4, s2);
            }, [4, Au(t3)];
          case 1:
            return [2, n.apply(void 0, [r.sent(), t3.asyncQueue, e, i, s])];
        }
      });
    });
  }), s.promise;
}
var xu = function(t3, e, n, r, i, o, s, u) {
  this.databaseId = t3, this.appId = e, this.persistenceKey = n, this.host = r, this.ssl = i, this.forceLongPolling = o, this.autoDetectLongPolling = s, this.useFetchStreams = u;
};
var Ru = function() {
  function t3(t4, e) {
    this.projectId = t4, this.database = e || "(default)";
  }
  return Object.defineProperty(t3.prototype, "isDefaultDatabase", {
    get: function() {
      return this.database === "(default)";
    },
    enumerable: false,
    configurable: true
  }), t3.prototype.isEqual = function(e) {
    return e instanceof t3 && e.projectId === this.projectId && e.database === this.database;
  }, t3;
}();
var Lu = new Map();
var Ou = function(t3, e) {
  this.user = e, this.type = "OAuth", this.authHeaders = {}, this.authHeaders.Authorization = "Bearer " + t3;
};
var Pu = function() {
  function t3() {
    this.changeListener = null;
  }
  return t3.prototype.getToken = function() {
    return Promise.resolve(null);
  }, t3.prototype.invalidateToken = function() {
  }, t3.prototype.setChangeListener = function(t4, e) {
    this.changeListener = e, t4.enqueueRetryable(function() {
      return e(fo.UNAUTHENTICATED);
    });
  }, t3.prototype.removeChangeListener = function() {
    this.changeListener = null;
  }, t3;
}();
var Fu = function() {
  function t3(t4) {
    this.token = t4, this.changeListener = null;
  }
  return t3.prototype.getToken = function() {
    return Promise.resolve(this.token);
  }, t3.prototype.invalidateToken = function() {
  }, t3.prototype.setChangeListener = function(t4, e) {
    var n = this;
    this.changeListener = e, t4.enqueueRetryable(function() {
      return e(n.token.user);
    });
  }, t3.prototype.removeChangeListener = function() {
    this.changeListener = null;
  }, t3;
}();
var Mu = function() {
  function t3(t4) {
    var e = this;
    this.currentUser = fo.UNAUTHENTICATED, this.oc = new br(), this.cc = 0, this.forceRefresh = false, this.auth = null, this.asyncQueue = null, this.uc = function() {
      e.cc++, e.currentUser = e.ac(), e.oc.resolve(), e.changeListener && e.asyncQueue.enqueueRetryable(function() {
        return e.changeListener(e.currentUser);
      });
    };
    var n = function(t5) {
      C2("FirebaseCredentialsProvider", "Auth detected"), e.auth = t5, e.auth.addAuthTokenListener(e.uc);
    };
    t4.onInit(function(t5) {
      return n(t5);
    }), setTimeout(function() {
      if (!e.auth) {
        var r = t4.getImmediate({
          optional: true
        });
        r ? n(r) : (C2("FirebaseCredentialsProvider", "Auth not yet detected"), e.oc.resolve());
      }
    }, 0);
  }
  return t3.prototype.getToken = function() {
    var t4 = this, e = this.cc, n = this.forceRefresh;
    return this.forceRefresh = false, this.auth ? this.auth.getToken(n).then(function(n2) {
      return t4.cc !== e ? (C2("FirebaseCredentialsProvider", "getToken aborted due to token change."), t4.getToken()) : n2 ? (P2(typeof n2.accessToken == "string"), new Ou(n2.accessToken, t4.currentUser)) : null;
    }) : Promise.resolve(null);
  }, t3.prototype.invalidateToken = function() {
    this.forceRefresh = true;
  }, t3.prototype.setChangeListener = function(t4, e) {
    var i = this;
    this.asyncQueue = t4, this.asyncQueue.enqueueRetryable(function() {
      return __awaiter(i, void 0, void 0, function() {
        return __generator(this, function(t5) {
          switch (t5.label) {
            case 0:
              return [4, this.oc.promise];
            case 1:
              return t5.sent(), [4, e(this.currentUser)];
            case 2:
              return t5.sent(), this.changeListener = e, [2];
          }
        });
      });
    });
  }, t3.prototype.removeChangeListener = function() {
    this.auth && this.auth.removeAuthTokenListener(this.uc), this.changeListener = function() {
      return Promise.resolve();
    };
  }, t3.prototype.ac = function() {
    var t4 = this.auth && this.auth.getUid();
    return P2(t4 === null || typeof t4 == "string"), new fo(t4);
  }, t3;
}();
var Vu = function() {
  function t3(t4, e, n) {
    this.hc = t4, this.lc = e, this.fc = n, this.type = "FirstParty", this.user = fo.FIRST_PARTY;
  }
  return Object.defineProperty(t3.prototype, "authHeaders", {
    get: function() {
      var t4 = {
        "X-Goog-AuthUser": this.lc
      }, e = this.hc.auth.getAuthHeaderValueForFirstParty([]);
      return e && (t4.Authorization = e), this.fc && (t4["X-Goog-Iam-Authorization-Token"] = this.fc), t4;
    },
    enumerable: false,
    configurable: true
  }), t3;
}();
var qu = function() {
  function t3(t4, e, n) {
    this.hc = t4, this.lc = e, this.fc = n;
  }
  return t3.prototype.getToken = function() {
    return Promise.resolve(new Vu(this.hc, this.lc, this.fc));
  }, t3.prototype.setChangeListener = function(t4, e) {
    t4.enqueueRetryable(function() {
      return e(fo.FIRST_PARTY);
    });
  }, t3.prototype.removeChangeListener = function() {
  }, t3.prototype.invalidateToken = function() {
  }, t3;
}();
function Uu(t3, e, n) {
  if (!n)
    throw new D2(N2.INVALID_ARGUMENT, "Function " + t3 + "() cannot be called with an empty " + e + ".");
}
function Bu(t3, e) {
  if (e === void 0)
    return {
      merge: false
    };
  if (e.mergeFields !== void 0 && e.merge !== void 0)
    throw new D2(N2.INVALID_ARGUMENT, "Invalid options passed to function " + t3 + '(): You cannot specify both "merge" and "mergeFields".');
  return e;
}
function ju(t3, e, n, r) {
  if (e === true && r === true)
    throw new D2(N2.INVALID_ARGUMENT, t3 + " and " + n + " cannot be used together.");
}
function Ku(t3) {
  if (!ct.isDocumentKey(t3))
    throw new D2(N2.INVALID_ARGUMENT, "Invalid document reference. Document references must have an even number of segments, but " + t3 + " has " + t3.length + ".");
}
function Qu(t3) {
  if (ct.isDocumentKey(t3))
    throw new D2(N2.INVALID_ARGUMENT, "Invalid collection reference. Collection references must have an odd number of segments, but " + t3 + " has " + t3.length + ".");
}
function Gu(t3) {
  if (t3 === void 0)
    return "undefined";
  if (t3 === null)
    return "null";
  if (typeof t3 == "string")
    return t3.length > 20 && (t3 = t3.substring(0, 20) + "..."), JSON.stringify(t3);
  if (typeof t3 == "number" || typeof t3 == "boolean")
    return "" + t3;
  if (typeof t3 == "object") {
    if (t3 instanceof Array)
      return "an array";
    var e = function(t4) {
      if (t4.constructor) {
        var e2 = /function\s+([^\s(]+)\s*\(/.exec(t4.constructor.toString());
        if (e2 && e2.length > 1)
          return e2[1];
      }
      return null;
    }(t3);
    return e ? "a custom " + e + " object" : "an object";
  }
  return typeof t3 == "function" ? "a function" : O2();
}
function zu(t3, e) {
  if ("_delegate" in t3 && (t3 = t3._delegate), !(t3 instanceof e)) {
    if (e.name === t3.constructor.name)
      throw new D2(N2.INVALID_ARGUMENT, "Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?");
    var n = Gu(t3);
    throw new D2(N2.INVALID_ARGUMENT, "Expected type '" + e.name + "', but it was: " + n);
  }
  return t3;
}
function Wu(t3, e) {
  if (e <= 0)
    throw new D2(N2.INVALID_ARGUMENT, "Function " + t3 + "() requires a positive number, but it was: " + e + ".");
}
var Hu = function() {
  function t3(t4) {
    var e;
    if (t4.host === void 0) {
      if (t4.ssl !== void 0)
        throw new D2(N2.INVALID_ARGUMENT, "Can't provide ssl option if host option is not set");
      this.host = "firestore.googleapis.com", this.ssl = true;
    } else
      this.host = t4.host, this.ssl = (e = t4.ssl) === null || e === void 0 || e;
    if (this.credentials = t4.credentials, this.ignoreUndefinedProperties = !!t4.ignoreUndefinedProperties, t4.cacheSizeBytes === void 0)
      this.cacheSizeBytes = 41943040;
    else {
      if (t4.cacheSizeBytes !== -1 && t4.cacheSizeBytes < 1048576)
        throw new D2(N2.INVALID_ARGUMENT, "cacheSizeBytes must be at least 1048576");
      this.cacheSizeBytes = t4.cacheSizeBytes;
    }
    this.experimentalForceLongPolling = !!t4.experimentalForceLongPolling, this.experimentalAutoDetectLongPolling = !!t4.experimentalAutoDetectLongPolling, this.useFetchStreams = !!t4.useFetchStreams, ju("experimentalForceLongPolling", t4.experimentalForceLongPolling, "experimentalAutoDetectLongPolling", t4.experimentalAutoDetectLongPolling);
  }
  return t3.prototype.isEqual = function(t4) {
    return this.host === t4.host && this.ssl === t4.ssl && this.credentials === t4.credentials && this.cacheSizeBytes === t4.cacheSizeBytes && this.experimentalForceLongPolling === t4.experimentalForceLongPolling && this.experimentalAutoDetectLongPolling === t4.experimentalAutoDetectLongPolling && this.ignoreUndefinedProperties === t4.ignoreUndefinedProperties && this.useFetchStreams === t4.useFetchStreams;
  }, t3;
}();
var Yu = function() {
  function t3(t4, e) {
    this.type = "firestore-lite", this._persistenceKey = "(lite)", this._settings = new Hu({}), this._settingsFrozen = false, t4 instanceof Ru ? (this._databaseId = t4, this._credentials = new Pu()) : (this._app = t4, this._databaseId = function(t5) {
      if (!Object.prototype.hasOwnProperty.apply(t5.options, ["projectId"]))
        throw new D2(N2.INVALID_ARGUMENT, '"projectId" not provided in firebase.initializeApp.');
      return new Ru(t5.options.projectId);
    }(t4), this._credentials = new Mu(e));
  }
  return Object.defineProperty(t3.prototype, "app", {
    get: function() {
      if (!this._app)
        throw new D2(N2.FAILED_PRECONDITION, "Firestore was not initialized using the Firebase SDK. 'app' is not available");
      return this._app;
    },
    enumerable: false,
    configurable: true
  }), Object.defineProperty(t3.prototype, "_initialized", {
    get: function() {
      return this._settingsFrozen;
    },
    enumerable: false,
    configurable: true
  }), Object.defineProperty(t3.prototype, "_terminated", {
    get: function() {
      return this._terminateTask !== void 0;
    },
    enumerable: false,
    configurable: true
  }), t3.prototype._setSettings = function(t4) {
    if (this._settingsFrozen)
      throw new D2(N2.FAILED_PRECONDITION, "Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.");
    this._settings = new Hu(t4), t4.credentials !== void 0 && (this._credentials = function(t5) {
      if (!t5)
        return new Pu();
      switch (t5.type) {
        case "gapi":
          var e = t5.client;
          return P2(!(typeof e != "object" || e === null || !e.auth || !e.auth.getAuthHeaderValueForFirstParty)), new qu(e, t5.sessionIndex || "0", t5.iamToken || null);
        case "provider":
          return t5.client;
        default:
          throw new D2(N2.INVALID_ARGUMENT, "makeCredentialsProvider failed due to invalid credential type");
      }
    }(t4.credentials));
  }, t3.prototype._getSettings = function() {
    return this._settings;
  }, t3.prototype._freezeSettings = function() {
    return this._settingsFrozen = true, this._settings;
  }, t3.prototype._delete = function() {
    return this._terminateTask || (this._terminateTask = this._terminate()), this._terminateTask;
  }, t3.prototype.toJSON = function() {
    return {
      app: this._app,
      databaseId: this._databaseId,
      settings: this._settings
    };
  }, t3.prototype._terminate = function() {
    return t4 = this, (e = Lu.get(t4)) && (C2("ComponentProvider", "Removing Datastore"), Lu.delete(t4), e.terminate()), Promise.resolve();
    var t4, e;
  }, t3;
}();
var $u = function() {
  function t3(t4, e, n) {
    this.converter = e, this._key = n, this.type = "document", this.firestore = t4;
  }
  return Object.defineProperty(t3.prototype, "_path", {
    get: function() {
      return this._key.path;
    },
    enumerable: false,
    configurable: true
  }), Object.defineProperty(t3.prototype, "id", {
    get: function() {
      return this._key.path.lastSegment();
    },
    enumerable: false,
    configurable: true
  }), Object.defineProperty(t3.prototype, "path", {
    get: function() {
      return this._key.path.canonicalString();
    },
    enumerable: false,
    configurable: true
  }), Object.defineProperty(t3.prototype, "parent", {
    get: function() {
      return new Ju(this.firestore, this.converter, this._key.path.popLast());
    },
    enumerable: false,
    configurable: true
  }), t3.prototype.withConverter = function(e) {
    return new t3(this.firestore, e, this._key);
  }, t3;
}();
var Xu = function() {
  function t3(t4, e, n) {
    this.converter = e, this._query = n, this.type = "query", this.firestore = t4;
  }
  return t3.prototype.withConverter = function(e) {
    return new t3(this.firestore, e, this._query);
  }, t3;
}();
var Ju = function(e) {
  function n(t3, n2, r) {
    var i = this;
    return (i = e.call(this, t3, n2, Yt(r)) || this)._path = r, i.type = "collection", i;
  }
  return __extends(n, e), Object.defineProperty(n.prototype, "id", {
    get: function() {
      return this._query.path.lastSegment();
    },
    enumerable: false,
    configurable: true
  }), Object.defineProperty(n.prototype, "path", {
    get: function() {
      return this._query.path.canonicalString();
    },
    enumerable: false,
    configurable: true
  }), Object.defineProperty(n.prototype, "parent", {
    get: function() {
      var t3 = this._path.popLast();
      return t3.isEmpty() ? null : new $u(this.firestore, null, new ct(t3));
    },
    enumerable: false,
    configurable: true
  }), n.prototype.withConverter = function(t3) {
    return new n(this.firestore, t3, this._path);
  }, n;
}(Xu);
function Zu(t3, n) {
  for (var r, i = [], o = 2; o < arguments.length; o++)
    i[o - 2] = arguments[o];
  if (t3 = getModularInstance(t3), Uu("collection", "path", n), t3 instanceof Yu)
    return Qu(r = H2.fromString.apply(H2, __spreadArray([n], i))), new Ju(t3, null, r);
  if (!(t3 instanceof $u || t3 instanceof Ju))
    throw new D2(N2.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
  return Qu(r = H2.fromString.apply(H2, __spreadArray([t3.path], i)).child(H2.fromString(n))), new Ju(t3.firestore, null, r);
}
function ta2(t3, n) {
  for (var r, i = [], o = 2; o < arguments.length; o++)
    i[o - 2] = arguments[o];
  if (t3 = getModularInstance(t3), arguments.length === 1 && (n = V2.u()), Uu("doc", "path", n), t3 instanceof Yu)
    return Ku(r = H2.fromString.apply(H2, __spreadArray([n], i))), new $u(t3, null, new ct(r));
  if (!(t3 instanceof $u || t3 instanceof Ju))
    throw new D2(N2.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
  return Ku(r = t3._path.child(H2.fromString.apply(H2, __spreadArray([n], i)))), new $u(t3.firestore, t3 instanceof Ju ? t3.converter : null, new ct(r));
}
function ea2(t3, e) {
  return t3 = getModularInstance(t3), e = getModularInstance(e), (t3 instanceof $u || t3 instanceof Ju) && (e instanceof $u || e instanceof Ju) && t3.firestore === e.firestore && t3.path === e.path && t3.converter === e.converter;
}
function na2(t3, e) {
  return t3 = getModularInstance(t3), e = getModularInstance(e), t3 instanceof Xu && e instanceof Xu && t3.firestore === e.firestore && ie(t3._query, e._query) && t3.converter === e.converter;
}
var ra2 = function() {
  function t3() {
    var t4 = this;
    this.dc = Promise.resolve(), this.wc = [], this._c = false, this.mc = [], this.yc = null, this.gc = false, this.Ec = false, this.Tc = [], this.Zi = new xo(this, "async_queue_retry"), this.Ic = function() {
      var e2 = ko();
      e2 && C2("AsyncQueue", "Visibility state changed to " + e2.visibilityState), t4.Zi.Gi();
    };
    var e = ko();
    e && typeof e.addEventListener == "function" && e.addEventListener("visibilitychange", this.Ic);
  }
  return Object.defineProperty(t3.prototype, "isShuttingDown", {
    get: function() {
      return this._c;
    },
    enumerable: false,
    configurable: true
  }), t3.prototype.enqueueAndForget = function(t4) {
    this.enqueue(t4);
  }, t3.prototype.enqueueAndForgetEvenWhileRestricted = function(t4) {
    this.Ac(), this.Rc(t4);
  }, t3.prototype.enterRestrictedMode = function(t4) {
    if (!this._c) {
      this._c = true, this.Ec = t4 || false;
      var e = ko();
      e && typeof e.removeEventListener == "function" && e.removeEventListener("visibilitychange", this.Ic);
    }
  }, t3.prototype.enqueue = function(t4) {
    var e = this;
    if (this.Ac(), this._c)
      return new Promise(function() {
      });
    var n = new br();
    return this.Rc(function() {
      return e._c && e.Ec ? Promise.resolve() : (t4().then(n.resolve, n.reject), n.promise);
    }).then(function() {
      return n.promise;
    });
  }, t3.prototype.enqueueRetryable = function(t4) {
    var e = this;
    this.enqueueAndForget(function() {
      return e.wc.push(t4), e.bc();
    });
  }, t3.prototype.bc = function() {
    return __awaiter(this, void 0, void 0, function() {
      var t4, e = this;
      return __generator(this, function(n) {
        switch (n.label) {
          case 0:
            if (this.wc.length === 0)
              return [3, 5];
            n.label = 1;
          case 1:
            return n.trys.push([1, 3, , 4]), [4, this.wc[0]()];
          case 2:
            return n.sent(), this.wc.shift(), this.Zi.reset(), [3, 4];
          case 3:
            if (!Nr(t4 = n.sent()))
              throw t4;
            return C2("AsyncQueue", "Operation failed with retryable error: " + t4), [3, 4];
          case 4:
            this.wc.length > 0 && this.Zi.ji(function() {
              return e.bc();
            }), n.label = 5;
          case 5:
            return [2];
        }
      });
    });
  }, t3.prototype.Rc = function(t4) {
    var e = this, n = this.dc.then(function() {
      return e.gc = true, t4().catch(function(t5) {
        throw e.yc = t5, e.gc = false, x2("INTERNAL UNHANDLED ERROR: ", function(t6) {
          var e2 = t6.message || "";
          return t6.stack && (e2 = t6.stack.includes(t6.message) ? t6.stack : t6.message + "\n" + t6.stack), e2;
        }(t5)), t5;
      }).then(function(t5) {
        return e.gc = false, t5;
      });
    });
    return this.dc = n, n;
  }, t3.prototype.enqueueAfterDelay = function(t4, e, n) {
    var r = this;
    this.Ac(), this.Tc.indexOf(t4) > -1 && (e = 0);
    var i = cs.createAndSchedule(this, t4, e, n, function(t5) {
      return r.vc(t5);
    });
    return this.mc.push(i), i;
  }, t3.prototype.Ac = function() {
    this.yc && O2();
  }, t3.prototype.verifyOperationInProgress = function() {
  }, t3.prototype.Pc = function() {
    return __awaiter(this, void 0, void 0, function() {
      var t4;
      return __generator(this, function(e) {
        switch (e.label) {
          case 0:
            return [4, t4 = this.dc];
          case 1:
            e.sent(), e.label = 2;
          case 2:
            if (t4 !== this.dc)
              return [3, 0];
            e.label = 3;
          case 3:
            return [2];
        }
      });
    });
  }, t3.prototype.Vc = function(t4) {
    for (var e = 0, n = this.mc; e < n.length; e++) {
      if (n[e].timerId === t4)
        return true;
    }
    return false;
  }, t3.prototype.Sc = function(t4) {
    var e = this;
    return this.Pc().then(function() {
      e.mc.sort(function(t5, e2) {
        return t5.targetTimeMs - e2.targetTimeMs;
      });
      for (var n = 0, r = e.mc; n < r.length; n++) {
        var i = r[n];
        if (i.skipDelay(), t4 !== "all" && i.timerId === t4)
          break;
      }
      return e.Pc();
    });
  }, t3.prototype.Dc = function(t4) {
    this.Tc.push(t4);
  }, t3.prototype.vc = function(t4) {
    var e = this.mc.indexOf(t4);
    this.mc.splice(e, 1);
  }, t3;
}();
function ia2(t3) {
  return function(t4, e) {
    if (typeof t4 != "object" || t4 === null)
      return false;
    for (var n = t4, r = 0, i = ["next", "error", "complete"]; r < i.length; r++) {
      var o = i[r];
      if (o in n && typeof n[o] == "function")
        return true;
    }
    return false;
  }(t3);
}
var oa2 = function() {
  function t3() {
    this._progressObserver = {}, this._taskCompletionResolver = new br(), this._lastProgress = {
      taskState: "Running",
      totalBytes: 0,
      totalDocuments: 0,
      bytesLoaded: 0,
      documentsLoaded: 0
    };
  }
  return t3.prototype.onProgress = function(t4, e, n) {
    this._progressObserver = {
      next: t4,
      error: e,
      complete: n
    };
  }, t3.prototype.catch = function(t4) {
    return this._taskCompletionResolver.promise.catch(t4);
  }, t3.prototype.then = function(t4, e) {
    return this._taskCompletionResolver.promise.then(t4, e);
  }, t3.prototype._completeWith = function(t4) {
    this._updateProgress(t4), this._progressObserver.complete && this._progressObserver.complete(), this._taskCompletionResolver.resolve(t4);
  }, t3.prototype._failWith = function(t4) {
    this._lastProgress.taskState = "Error", this._progressObserver.next && this._progressObserver.next(this._lastProgress), this._progressObserver.error && this._progressObserver.error(t4), this._taskCompletionResolver.reject(t4);
  }, t3.prototype._updateProgress = function(t4) {
    this._lastProgress = t4, this._progressObserver.next && this._progressObserver.next(t4);
  }, t3;
}();
var sa2 = -1;
var ua2 = function(e) {
  function n(t3, n2) {
    var r = this;
    return (r = e.call(this, t3, n2) || this).type = "firestore", r._queue = new ra2(), r._persistenceKey = "name" in t3 ? t3.name : "[DEFAULT]", r;
  }
  return __extends(n, e), n.prototype._terminate = function() {
    return this._firestoreClient || ca(this), this._firestoreClient.terminate();
  }, n;
}(Yu);
function aa2(t3) {
  return t3._firestoreClient || ca(t3), t3._firestoreClient.verifyNotTerminated(), t3._firestoreClient;
}
function ca(t3) {
  var e, n = t3._freezeSettings(), r = function(t4, e2, n2, r2) {
    return new xu(t4, e2, n2, r2.host, r2.ssl, r2.experimentalForceLongPolling, r2.experimentalAutoDetectLongPolling, r2.useFetchStreams);
  }(t3._databaseId, ((e = t3._app) === null || e === void 0 ? void 0 : e.options.appId) || "", t3._persistenceKey, n);
  t3._firestoreClient = new wu(t3._credentials, t3._queue, r);
}
function ha2(t3, e, i) {
  var o = this, s = new br();
  return t3.asyncQueue.enqueue(function() {
    return __awaiter(o, void 0, void 0, function() {
      var n;
      return __generator(this, function(r) {
        switch (r.label) {
          case 0:
            return r.trys.push([0, 3, , 4]), [4, bu(t3, i)];
          case 1:
            return r.sent(), [4, Iu(t3, e)];
          case 2:
            return r.sent(), s.resolve(), [3, 4];
          case 3:
            if (!function(t4) {
              return t4.name === "FirebaseError" ? t4.code === N2.FAILED_PRECONDITION || t4.code === N2.UNIMPLEMENTED : !(typeof DOMException != "undefined" && t4 instanceof DOMException) || (t4.code === 22 || t4.code === 20 || t4.code === 11);
            }(n = r.sent()))
              throw n;
            return console.warn("Error enabling offline persistence. Falling back to persistence disabled: " + n), s.reject(n), [3, 4];
          case 4:
            return [2];
        }
      });
    });
  }).then(function() {
    return s.promise;
  });
}
function fa2(t3) {
  if (t3._initialized || t3._terminated)
    throw new D2(N2.FAILED_PRECONDITION, "Firestore has already been started and persistence can no longer be enabled. You can only enable persistence before calling any other methods on a Firestore object.");
}
var la2 = function() {
  function t3() {
    for (var t4 = [], e = 0; e < arguments.length; e++)
      t4[e] = arguments[e];
    for (var n = 0; n < t4.length; ++n)
      if (t4[n].length === 0)
        throw new D2(N2.INVALID_ARGUMENT, "Invalid field name at argument $(i + 1). Field names must not be empty.");
    this._internalPath = new $(t4);
  }
  return t3.prototype.isEqual = function(t4) {
    return this._internalPath.isEqual(t4._internalPath);
  }, t3;
}();
var da2 = function() {
  function t3(t4) {
    this._byteString = t4;
  }
  return t3.fromBase64String = function(e) {
    try {
      return new t3(J2.fromBase64String(e));
    } catch (e2) {
      throw new D2(N2.INVALID_ARGUMENT, "Failed to construct data from Base64 string: " + e2);
    }
  }, t3.fromUint8Array = function(e) {
    return new t3(J2.fromUint8Array(e));
  }, t3.prototype.toBase64 = function() {
    return this._byteString.toBase64();
  }, t3.prototype.toUint8Array = function() {
    return this._byteString.toUint8Array();
  }, t3.prototype.toString = function() {
    return "Bytes(base64: " + this.toBase64() + ")";
  }, t3.prototype.isEqual = function(t4) {
    return this._byteString.isEqual(t4._byteString);
  }, t3;
}();
var pa2 = function(t3) {
  this._methodName = t3;
};
var ya2 = function() {
  function t3(t4, e) {
    if (!isFinite(t4) || t4 < -90 || t4 > 90)
      throw new D2(N2.INVALID_ARGUMENT, "Latitude must be a number between -90 and 90, but was: " + t4);
    if (!isFinite(e) || e < -180 || e > 180)
      throw new D2(N2.INVALID_ARGUMENT, "Longitude must be a number between -180 and 180, but was: " + e);
    this._lat = t4, this._long = e;
  }
  return Object.defineProperty(t3.prototype, "latitude", {
    get: function() {
      return this._lat;
    },
    enumerable: false,
    configurable: true
  }), Object.defineProperty(t3.prototype, "longitude", {
    get: function() {
      return this._long;
    },
    enumerable: false,
    configurable: true
  }), t3.prototype.isEqual = function(t4) {
    return this._lat === t4._lat && this._long === t4._long;
  }, t3.prototype.toJSON = function() {
    return {
      latitude: this._lat,
      longitude: this._long
    };
  }, t3.prototype._compareTo = function(t4) {
    return q2(this._lat, t4._lat) || q2(this._long, t4._long);
  }, t3;
}();
var va = /^__.*__$/;
var ma2 = function() {
  function t3(t4, e, n) {
    this.data = t4, this.fieldMask = e, this.fieldTransforms = n;
  }
  return t3.prototype.toMutation = function(t4, e) {
    return this.fieldMask !== null ? new Fe(t4, this.data, this.fieldMask, e, this.fieldTransforms) : new Pe(t4, this.data, e, this.fieldTransforms);
  }, t3;
}();
var ga = function() {
  function t3(t4, e, n) {
    this.data = t4, this.fieldMask = e, this.fieldTransforms = n;
  }
  return t3.prototype.toMutation = function(t4, e) {
    return new Fe(t4, this.data, this.fieldMask, e, this.fieldTransforms);
  }, t3;
}();
function wa(t3) {
  switch (t3) {
    case 0:
    case 2:
    case 1:
      return true;
    case 3:
    case 4:
      return false;
    default:
      throw O2();
  }
}
var ba2 = function() {
  function t3(t4, e, n, r, i, o) {
    this.settings = t4, this.databaseId = e, this.R = n, this.ignoreUndefinedProperties = r, i === void 0 && this.Cc(), this.fieldTransforms = i || [], this.fieldMask = o || [];
  }
  return Object.defineProperty(t3.prototype, "path", {
    get: function() {
      return this.settings.path;
    },
    enumerable: false,
    configurable: true
  }), Object.defineProperty(t3.prototype, "Nc", {
    get: function() {
      return this.settings.Nc;
    },
    enumerable: false,
    configurable: true
  }), t3.prototype.xc = function(e) {
    return new t3(Object.assign(Object.assign({}, this.settings), e), this.databaseId, this.R, this.ignoreUndefinedProperties, this.fieldTransforms, this.fieldMask);
  }, t3.prototype.kc = function(t4) {
    var e, n = (e = this.path) === null || e === void 0 ? void 0 : e.child(t4), r = this.xc({
      path: n,
      Fc: false
    });
    return r.$c(t4), r;
  }, t3.prototype.Oc = function(t4) {
    var e, n = (e = this.path) === null || e === void 0 ? void 0 : e.child(t4), r = this.xc({
      path: n,
      Fc: false
    });
    return r.Cc(), r;
  }, t3.prototype.Mc = function(t4) {
    return this.xc({
      path: void 0,
      Fc: true
    });
  }, t3.prototype.Lc = function(t4) {
    return Ua2(t4, this.settings.methodName, this.settings.Bc || false, this.path, this.settings.qc);
  }, t3.prototype.contains = function(t4) {
    return this.fieldMask.find(function(e) {
      return t4.isPrefixOf(e);
    }) !== void 0 || this.fieldTransforms.find(function(e) {
      return t4.isPrefixOf(e.field);
    }) !== void 0;
  }, t3.prototype.Cc = function() {
    if (this.path)
      for (var t4 = 0; t4 < this.path.length; t4++)
        this.$c(this.path.get(t4));
  }, t3.prototype.$c = function(t4) {
    if (t4.length === 0)
      throw this.Lc("Document fields must not be empty");
    if (wa(this.Nc) && va.test(t4))
      throw this.Lc('Document fields cannot begin and end with "__"');
  }, t3;
}();
var Ia2 = function() {
  function t3(t4, e, n) {
    this.databaseId = t4, this.ignoreUndefinedProperties = e, this.R = n || Co(t4);
  }
  return t3.prototype.Uc = function(t4, e, n, r) {
    return r === void 0 && (r = false), new ba2({
      Nc: t4,
      methodName: e,
      qc: n,
      path: $.emptyPath(),
      Fc: false,
      Bc: r
    }, this.databaseId, this.R, this.ignoreUndefinedProperties);
  }, t3;
}();
function Ta(t3) {
  var e = t3._freezeSettings(), n = Co(t3._databaseId);
  return new Ia2(t3._databaseId, !!e.ignoreUndefinedProperties, n);
}
function Ea(t3, e, n, r, i, o) {
  o === void 0 && (o = {});
  var s = t3.Uc(o.merge || o.mergeFields ? 2 : 0, e, n, i);
  Fa2("Data must be an object, but it was:", s, r);
  var u, a, c = Oa(r, s);
  if (o.merge)
    u = new X2(s.fieldMask), a = s.fieldTransforms;
  else if (o.mergeFields) {
    for (var h = [], f = 0, l2 = o.mergeFields; f < l2.length; f++) {
      var d = Ma2(e, l2[f], n);
      if (!s.contains(d))
        throw new D2(N2.INVALID_ARGUMENT, "Field '" + d + "' is specified in your field mask but missing from your input data.");
      Ba(h, d) || h.push(d);
    }
    u = new X2(h), a = s.fieldTransforms.filter(function(t4) {
      return u.covers(t4.field);
    });
  } else
    u = null, a = s.fieldTransforms;
  return new ma2(new _t(c), u, a);
}
var _a = function(e) {
  function n() {
    return e !== null && e.apply(this, arguments) || this;
  }
  return __extends(n, e), n.prototype._toFieldTransform = function(t3) {
    if (t3.Nc !== 2)
      throw t3.Nc === 1 ? t3.Lc(this._methodName + "() can only appear at the top level of your update data") : t3.Lc(this._methodName + "() cannot be used with set() unless you pass {merge:true}");
    return t3.fieldMask.push(t3.path), null;
  }, n.prototype.isEqual = function(t3) {
    return t3 instanceof n;
  }, n;
}(pa2);
function Sa2(t3, e, n) {
  return new ba2({
    Nc: 3,
    qc: e.settings.qc,
    methodName: t3._methodName,
    Fc: n
  }, e.databaseId, e.R, e.ignoreUndefinedProperties);
}
var Na2 = function(e) {
  function n() {
    return e !== null && e.apply(this, arguments) || this;
  }
  return __extends(n, e), n.prototype._toFieldTransform = function(t3) {
    return new Se(t3.path, new me());
  }, n.prototype.isEqual = function(t3) {
    return t3 instanceof n;
  }, n;
}(pa2);
var Da = function(e) {
  function n(t3, n2) {
    var r = this;
    return (r = e.call(this, t3) || this).Kc = n2, r;
  }
  return __extends(n, e), n.prototype._toFieldTransform = function(t3) {
    var e2 = Sa2(this, t3, true), n2 = this.Kc.map(function(t4) {
      return La2(t4, e2);
    }), r = new ge(n2);
    return new Se(t3.path, r);
  }, n.prototype.isEqual = function(t3) {
    return this === t3;
  }, n;
}(pa2);
var Aa2 = function(e) {
  function n(t3, n2) {
    var r = this;
    return (r = e.call(this, t3) || this).Kc = n2, r;
  }
  return __extends(n, e), n.prototype._toFieldTransform = function(t3) {
    var e2 = Sa2(this, t3, true), n2 = this.Kc.map(function(t4) {
      return La2(t4, e2);
    }), r = new be(n2);
    return new Se(t3.path, r);
  }, n.prototype.isEqual = function(t3) {
    return this === t3;
  }, n;
}(pa2);
var ka2 = function(e) {
  function n(t3, n2) {
    var r = this;
    return (r = e.call(this, t3) || this).Qc = n2, r;
  }
  return __extends(n, e), n.prototype._toFieldTransform = function(t3) {
    var e2 = new Te(t3.R, le(t3.R, this.Qc));
    return new Se(t3.path, e2);
  }, n.prototype.isEqual = function(t3) {
    return this === t3;
  }, n;
}(pa2);
function Ca2(t3, e, n, r) {
  var i = t3.Uc(1, e, n);
  Fa2("Data must be an object, but it was:", i, r);
  var o = [], s = _t.empty();
  G(r, function(t4, r2) {
    var u2 = qa2(e, t4, n);
    r2 = getModularInstance(r2);
    var a = i.Oc(u2);
    if (r2 instanceof _a)
      o.push(u2);
    else {
      var c = La2(r2, a);
      c != null && (o.push(u2), s.set(u2, c));
    }
  });
  var u = new X2(o);
  return new ga(s, u, i.fieldTransforms);
}
function xa2(t3, e, n, r, i, o) {
  var s = t3.Uc(1, e, n), u = [Ma2(e, r, n)], a = [i];
  if (o.length % 2 != 0)
    throw new D2(N2.INVALID_ARGUMENT, "Function " + e + "() needs to be called with an even number of arguments that alternate between field names and values.");
  for (var c = 0; c < o.length; c += 2)
    u.push(Ma2(e, o[c])), a.push(o[c + 1]);
  for (var h = [], f = _t.empty(), d = u.length - 1; d >= 0; --d)
    if (!Ba(h, u[d])) {
      var p2 = u[d], y2 = a[d];
      y2 = getModularInstance(y2);
      var v2 = s.Oc(p2);
      if (y2 instanceof _a)
        h.push(p2);
      else {
        var m = La2(y2, v2);
        m != null && (h.push(p2), f.set(p2, m));
      }
    }
  var g = new X2(h);
  return new ga(f, g, s.fieldTransforms);
}
function Ra2(t3, e, n, r) {
  return r === void 0 && (r = false), La2(n, t3.Uc(r ? 4 : 3, e));
}
function La2(t3, e) {
  if (Pa(t3 = getModularInstance(t3)))
    return Fa2("Unsupported field value:", e, t3), Oa(t3, e);
  if (t3 instanceof pa2)
    return function(t4, e2) {
      if (!wa(e2.Nc))
        throw e2.Lc(t4._methodName + "() can only be used with update() and set()");
      if (!e2.path)
        throw e2.Lc(t4._methodName + "() is not currently supported inside arrays");
      var n = t4._toFieldTransform(e2);
      n && e2.fieldTransforms.push(n);
    }(t3, e), null;
  if (t3 === void 0 && e.ignoreUndefinedProperties)
    return null;
  if (e.path && e.fieldMask.push(e.path), t3 instanceof Array) {
    if (e.settings.Fc && e.Nc !== 4)
      throw e.Lc("Nested arrays are not supported");
    return function(t4, e2) {
      for (var n = [], r = 0, i = 0, o = t4; i < o.length; i++) {
        var s = La2(o[i], e2.Mc(r));
        s == null && (s = {
          nullValue: "NULL_VALUE"
        }), n.push(s), r++;
      }
      return {
        arrayValue: {
          values: n
        }
      };
    }(t3, e);
  }
  return function(t4, e2) {
    if ((t4 = getModularInstance(t4)) === null)
      return {
        nullValue: "NULL_VALUE"
      };
    if (typeof t4 == "number")
      return le(e2.R, t4);
    if (typeof t4 == "boolean")
      return {
        booleanValue: t4
      };
    if (typeof t4 == "string")
      return {
        stringValue: t4
      };
    if (t4 instanceof Date) {
      var n = j.fromDate(t4);
      return {
        timestampValue: In(e2.R, n)
      };
    }
    if (t4 instanceof j) {
      n = new j(t4.seconds, 1e3 * Math.floor(t4.nanoseconds / 1e3));
      return {
        timestampValue: In(e2.R, n)
      };
    }
    if (t4 instanceof ya2)
      return {
        geoPointValue: {
          latitude: t4.latitude,
          longitude: t4.longitude
        }
      };
    if (t4 instanceof da2)
      return {
        bytesValue: Tn(e2.R, t4._byteString)
      };
    if (t4 instanceof $u) {
      n = e2.databaseId;
      var r = t4.firestore._databaseId;
      if (!r.isEqual(n))
        throw e2.Lc("Document reference is for database " + r.projectId + "/" + r.database + " but should be for database " + n.projectId + "/" + n.database);
      return {
        referenceValue: Sn(t4.firestore._databaseId || e2.databaseId, t4._key.path)
      };
    }
    throw e2.Lc("Unsupported field value: " + Gu(t4));
  }(t3, e);
}
function Oa(t3, e) {
  var n = {};
  return z2(t3) ? e.path && e.path.length > 0 && e.fieldMask.push(e.path) : G(t3, function(t4, r) {
    var i = La2(r, e.kc(t4));
    i != null && (n[t4] = i);
  }), {
    mapValue: {
      fields: n
    }
  };
}
function Pa(t3) {
  return !(typeof t3 != "object" || t3 === null || t3 instanceof Array || t3 instanceof Date || t3 instanceof j || t3 instanceof ya2 || t3 instanceof da2 || t3 instanceof $u || t3 instanceof pa2);
}
function Fa2(t3, e, n) {
  if (!Pa(n) || !function(t4) {
    return typeof t4 == "object" && t4 !== null && (Object.getPrototypeOf(t4) === Object.prototype || Object.getPrototypeOf(t4) === null);
  }(n)) {
    var r = Gu(n);
    throw r === "an object" ? e.Lc(t3 + " a custom object") : e.Lc(t3 + " " + r);
  }
}
function Ma2(t3, e, n) {
  if ((e = getModularInstance(e)) instanceof la2)
    return e._internalPath;
  if (typeof e == "string")
    return qa2(t3, e);
  throw Ua2("Field path arguments must be of type string or FieldPath.", t3, false, void 0, n);
}
var Va2 = new RegExp("[~\\*/\\[\\]]");
function qa2(t3, n, r) {
  if (n.search(Va2) >= 0)
    throw Ua2("Invalid field path (" + n + "). Paths must not contain '~', '*', '/', '[', or ']'", t3, false, void 0, r);
  try {
    return new (la2.bind.apply(la2, __spreadArray([void 0], n.split("."))))()._internalPath;
  } catch (e) {
    throw Ua2("Invalid field path (" + n + "). Paths must not be empty, begin with '.', end with '.', or contain '..'", t3, false, void 0, r);
  }
}
function Ua2(t3, e, n, r, i) {
  var o = r && !r.isEmpty(), s = i !== void 0, u = "Function " + e + "() called with invalid data";
  n && (u += " (via `toFirestore()`)");
  var a = "";
  return (o || s) && (a += " (found", o && (a += " in field " + r), s && (a += " in document " + i), a += ")"), new D2(N2.INVALID_ARGUMENT, (u += ". ") + t3 + a);
}
function Ba(t3, e) {
  return t3.some(function(t4) {
    return t4.isEqual(e);
  });
}
var ja2 = function() {
  function t3(t4, e, n, r, i) {
    this._firestore = t4, this._userDataWriter = e, this._key = n, this._document = r, this._converter = i;
  }
  return Object.defineProperty(t3.prototype, "id", {
    get: function() {
      return this._key.path.lastSegment();
    },
    enumerable: false,
    configurable: true
  }), Object.defineProperty(t3.prototype, "ref", {
    get: function() {
      return new $u(this._firestore, this._converter, this._key);
    },
    enumerable: false,
    configurable: true
  }), t3.prototype.exists = function() {
    return this._document !== null;
  }, t3.prototype.data = function() {
    if (this._document) {
      if (this._converter) {
        var t4 = new Ka2(this._firestore, this._userDataWriter, this._key, this._document, null);
        return this._converter.fromFirestore(t4);
      }
      return this._userDataWriter.convertValue(this._document.data.value);
    }
  }, t3.prototype.get = function(t4) {
    if (this._document) {
      var e = this._document.data.field(Qa("DocumentSnapshot.get", t4));
      if (e !== null)
        return this._userDataWriter.convertValue(e);
    }
  }, t3;
}();
var Ka2 = function(e) {
  function n() {
    return e !== null && e.apply(this, arguments) || this;
  }
  return __extends(n, e), n.prototype.data = function() {
    return e.prototype.data.call(this);
  }, n;
}(ja2);
function Qa(t3, e) {
  return typeof e == "string" ? qa2(t3, e) : e instanceof la2 ? e._internalPath : e._delegate._internalPath;
}
var Ga2 = function() {
  function t3(t4, e) {
    this.hasPendingWrites = t4, this.fromCache = e;
  }
  return t3.prototype.isEqual = function(t4) {
    return this.hasPendingWrites === t4.hasPendingWrites && this.fromCache === t4.fromCache;
  }, t3;
}();
var za2 = function(e) {
  function n(t3, n2, r, i, o, s) {
    var u = this;
    return (u = e.call(this, t3, n2, r, i, s) || this)._firestore = t3, u._firestoreImpl = t3, u.metadata = o, u;
  }
  return __extends(n, e), n.prototype.exists = function() {
    return e.prototype.exists.call(this);
  }, n.prototype.data = function(t3) {
    if (t3 === void 0 && (t3 = {}), this._document) {
      if (this._converter) {
        var e2 = new Wa2(this._firestore, this._userDataWriter, this._key, this._document, this.metadata, null);
        return this._converter.fromFirestore(e2, t3);
      }
      return this._userDataWriter.convertValue(this._document.data.value, t3.serverTimestamps);
    }
  }, n.prototype.get = function(t3, e2) {
    if (e2 === void 0 && (e2 = {}), this._document) {
      var n2 = this._document.data.field(Qa("DocumentSnapshot.get", t3));
      if (n2 !== null)
        return this._userDataWriter.convertValue(n2, e2.serverTimestamps);
    }
  }, n;
}(ja2);
var Wa2 = function(e) {
  function n() {
    return e !== null && e.apply(this, arguments) || this;
  }
  return __extends(n, e), n.prototype.data = function(t3) {
    return t3 === void 0 && (t3 = {}), e.prototype.data.call(this, t3);
  }, n;
}(za2);
var Ha2 = function() {
  function t3(t4, e, n, r) {
    this._firestore = t4, this._userDataWriter = e, this._snapshot = r, this.metadata = new Ga2(r.hasPendingWrites, r.fromCache), this.query = n;
  }
  return Object.defineProperty(t3.prototype, "docs", {
    get: function() {
      var t4 = [];
      return this.forEach(function(e) {
        return t4.push(e);
      }), t4;
    },
    enumerable: false,
    configurable: true
  }), Object.defineProperty(t3.prototype, "size", {
    get: function() {
      return this._snapshot.docs.size;
    },
    enumerable: false,
    configurable: true
  }), Object.defineProperty(t3.prototype, "empty", {
    get: function() {
      return this.size === 0;
    },
    enumerable: false,
    configurable: true
  }), t3.prototype.forEach = function(t4, e) {
    var n = this;
    this._snapshot.docs.forEach(function(r) {
      t4.call(e, new Wa2(n._firestore, n._userDataWriter, r.key, r, new Ga2(n._snapshot.mutatedKeys.has(r.key), n._snapshot.fromCache), n.query.converter));
    });
  }, t3.prototype.docChanges = function(t4) {
    t4 === void 0 && (t4 = {});
    var e = !!t4.includeMetadataChanges;
    if (e && this._snapshot.excludesMetadataChanges)
      throw new D2(N2.INVALID_ARGUMENT, "To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().");
    return this._cachedChanges && this._cachedChangesIncludeMetadataChanges === e || (this._cachedChanges = function(t5, e2) {
      if (t5._snapshot.oldDocs.isEmpty()) {
        var n = 0;
        return t5._snapshot.docChanges.map(function(e3) {
          return {
            type: "added",
            doc: new Wa2(t5._firestore, t5._userDataWriter, e3.doc.key, e3.doc, new Ga2(t5._snapshot.mutatedKeys.has(e3.doc.key), t5._snapshot.fromCache), t5.query.converter),
            oldIndex: -1,
            newIndex: n++
          };
        });
      }
      var r = t5._snapshot.oldDocs;
      return t5._snapshot.docChanges.filter(function(t6) {
        return e2 || t6.type !== 3;
      }).map(function(e3) {
        var n2 = new Wa2(t5._firestore, t5._userDataWriter, e3.doc.key, e3.doc, new Ga2(t5._snapshot.mutatedKeys.has(e3.doc.key), t5._snapshot.fromCache), t5.query.converter), i = -1, o = -1;
        return e3.type !== 0 && (i = r.indexOf(e3.doc.key), r = r.delete(e3.doc.key)), e3.type !== 1 && (o = (r = r.add(e3.doc)).indexOf(e3.doc.key)), {
          type: Ya2(e3.type),
          doc: n2,
          oldIndex: i,
          newIndex: o
        };
      });
    }(this, e), this._cachedChangesIncludeMetadataChanges = e), this._cachedChanges;
  }, t3;
}();
function Ya2(t3) {
  switch (t3) {
    case 0:
      return "added";
    case 2:
    case 3:
      return "modified";
    case 1:
      return "removed";
    default:
      return O2();
  }
}
function $a2(t3, e) {
  return t3 instanceof za2 && e instanceof za2 ? t3._firestore === e._firestore && t3._key.isEqual(e._key) && (t3._document === null ? e._document === null : t3._document.isEqual(e._document)) && t3._converter === e._converter : t3 instanceof Ha2 && e instanceof Ha2 && t3._firestore === e._firestore && na2(t3.query, e.query) && t3.metadata.isEqual(e.metadata) && t3._snapshot.isEqual(e._snapshot);
}
function Xa2(t3) {
  if (Xt(t3) && t3.explicitOrderBy.length === 0)
    throw new D2(N2.UNIMPLEMENTED, "limitToLast() queries require specifying at least one orderBy() clause");
}
var Ja2 = function() {
};
function Za2(t3) {
  for (var e = [], n = 1; n < arguments.length; n++)
    e[n - 1] = arguments[n];
  for (var r = 0, i = e; r < i.length; r++) {
    var o = i[r];
    t3 = o._apply(t3);
  }
  return t3;
}
var tc2 = function(e) {
  function n(t3, n2, r) {
    var i = this;
    return (i = e.call(this) || this).jc = t3, i.Wc = n2, i.Gc = r, i.type = "where", i;
  }
  return __extends(n, e), n.prototype._apply = function(t3) {
    var e2 = Ta(t3.firestore), n2 = function(t4, e3, n3, r, i, o, s) {
      var u;
      if (i.isKeyField()) {
        if (o === "array-contains" || o === "array-contains-any")
          throw new D2(N2.INVALID_ARGUMENT, "Invalid Query. You can't perform '" + o + "' queries on FieldPath.documentId().");
        if (o === "in" || o === "not-in") {
          uc2(s, o);
          for (var a = [], c = 0, h = s; c < h.length; c++) {
            var f = h[c];
            a.push(sc2(r, t4, f));
          }
          u = {
            arrayValue: {
              values: a
            }
          };
        } else
          u = sc2(r, t4, s);
      } else
        o !== "in" && o !== "not-in" && o !== "array-contains-any" || uc2(s, o), u = Ra2(n3, "where", s, o === "in" || o === "not-in");
      var l2 = Rt.create(i, o, u);
      return function(t5, e4) {
        if (e4.g()) {
          var n4 = Zt(t5);
          if (n4 !== null && !n4.isEqual(e4.field))
            throw new D2(N2.INVALID_ARGUMENT, "Invalid query. All where filters with an inequality (<, <=, !=, not-in, >, or >=) must be on the same field. But you have inequality filters on '" + n4.toString() + "' and '" + e4.field.toString() + "'");
          var r2 = Jt(t5);
          r2 !== null && ac2(t5, e4.field, r2);
        }
        var i2 = function(t6, e5) {
          for (var n5 = 0, r3 = t6.filters; n5 < r3.length; n5++) {
            var i3 = r3[n5];
            if (e5.indexOf(i3.op) >= 0)
              return i3.op;
          }
          return null;
        }(t5, function(t6) {
          switch (t6) {
            case "!=":
              return ["!=", "not-in"];
            case "array-contains":
              return ["array-contains", "array-contains-any", "not-in"];
            case "in":
              return ["array-contains-any", "in", "not-in"];
            case "array-contains-any":
              return ["array-contains", "array-contains-any", "in", "not-in"];
            case "not-in":
              return ["array-contains", "array-contains-any", "in", "not-in", "!="];
            default:
              return [];
          }
        }(e4.op));
        if (i2 !== null)
          throw i2 === e4.op ? new D2(N2.INVALID_ARGUMENT, "Invalid query. You cannot use more than one '" + e4.op.toString() + "' filter.") : new D2(N2.INVALID_ARGUMENT, "Invalid query. You cannot use '" + e4.op.toString() + "' filters with '" + i2.toString() + "' filters.");
      }(t4, l2), l2;
    }(t3._query, 0, e2, t3.firestore._databaseId, this.jc, this.Wc, this.Gc);
    return new Xu(t3.firestore, t3.converter, function(t4, e3) {
      var n3 = t4.filters.concat([e3]);
      return new Wt(t4.path, t4.collectionGroup, t4.explicitOrderBy.slice(), n3, t4.limit, t4.limitType, t4.startAt, t4.endAt);
    }(t3._query, n2));
  }, n;
}(Ja2);
var ec2 = function(e) {
  function n(t3, n2) {
    var r = this;
    return (r = e.call(this) || this).jc = t3, r.zc = n2, r.type = "orderBy", r;
  }
  return __extends(n, e), n.prototype._apply = function(t3) {
    var e2 = function(t4, e3, n2) {
      if (t4.startAt !== null)
        throw new D2(N2.INVALID_ARGUMENT, "Invalid query. You must not call startAt() or startAfter() before calling orderBy().");
      if (t4.endAt !== null)
        throw new D2(N2.INVALID_ARGUMENT, "Invalid query. You must not call endAt() or endBefore() before calling orderBy().");
      var r = new Kt(e3, n2);
      return function(t5, e4) {
        if (Jt(t5) === null) {
          var n3 = Zt(t5);
          n3 !== null && ac2(t5, n3, e4.field);
        }
      }(t4, r), r;
    }(t3._query, this.jc, this.zc);
    return new Xu(t3.firestore, t3.converter, function(t4, e3) {
      var n2 = t4.explicitOrderBy.concat([e3]);
      return new Wt(t4.path, t4.collectionGroup, n2, t4.filters.slice(), t4.limit, t4.limitType, t4.startAt, t4.endAt);
    }(t3._query, e2));
  }, n;
}(Ja2);
var nc2 = function(e) {
  function n(t3, n2, r) {
    var i = this;
    return (i = e.call(this) || this).type = t3, i.Hc = n2, i.Jc = r, i;
  }
  return __extends(n, e), n.prototype._apply = function(t3) {
    return new Xu(t3.firestore, t3.converter, re(t3._query, this.Hc, this.Jc));
  }, n;
}(Ja2);
var rc2 = function(e) {
  function n(t3, n2, r) {
    var i = this;
    return (i = e.call(this) || this).type = t3, i.Yc = n2, i.Xc = r, i;
  }
  return __extends(n, e), n.prototype._apply = function(t3) {
    var e2 = oc2(t3, this.type, this.Yc, this.Xc);
    return new Xu(t3.firestore, t3.converter, function(t4, e3) {
      return new Wt(t4.path, t4.collectionGroup, t4.explicitOrderBy.slice(), t4.filters.slice(), t4.limit, t4.limitType, e3, t4.endAt);
    }(t3._query, e2));
  }, n;
}(Ja2);
var ic2 = function(e) {
  function n(t3, n2, r) {
    var i = this;
    return (i = e.call(this) || this).type = t3, i.Yc = n2, i.Xc = r, i;
  }
  return __extends(n, e), n.prototype._apply = function(t3) {
    var e2 = oc2(t3, this.type, this.Yc, this.Xc);
    return new Xu(t3.firestore, t3.converter, function(t4, e3) {
      return new Wt(t4.path, t4.collectionGroup, t4.explicitOrderBy.slice(), t4.filters.slice(), t4.limit, t4.limitType, t4.startAt, e3);
    }(t3._query, e2));
  }, n;
}(Ja2);
function oc2(t3, e, n, r) {
  if (n[0] = getModularInstance(n[0]), n[0] instanceof ja2)
    return function(t4, e2, n2, r2, i2) {
      if (!r2)
        throw new D2(N2.NOT_FOUND, "Can't use a DocumentSnapshot that doesn't exist for " + n2 + "().");
      for (var o = [], s = 0, u = ee(t4); s < u.length; s++) {
        var a = u[s];
        if (a.field.isKeyField())
          o.push(mt(e2, r2.key));
        else {
          var c = r2.data.field(a.field);
          if (rt(c))
            throw new D2(N2.INVALID_ARGUMENT, 'Invalid query. You are trying to start or end a query using a document for which the field "' + a.field + '" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)');
          if (c === null) {
            var h = a.field.canonicalString();
            throw new D2(N2.INVALID_ARGUMENT, "Invalid query. You are trying to start or end a query using a document for which the field '" + h + "' (used as the orderBy) does not exist.");
          }
          o.push(c);
        }
      }
      return new Bt(o, i2);
    }(t3._query, t3.firestore._databaseId, e, n[0]._document, r);
  var i = Ta(t3.firestore);
  return function(t4, e2, n2, r2, i2, o) {
    var s = t4.explicitOrderBy;
    if (i2.length > s.length)
      throw new D2(N2.INVALID_ARGUMENT, "Too many arguments provided to " + r2 + "(). The number of arguments must be less than or equal to the number of orderBy() clauses");
    for (var u = [], a = 0; a < i2.length; a++) {
      var c = i2[a];
      if (s[a].field.isKeyField()) {
        if (typeof c != "string")
          throw new D2(N2.INVALID_ARGUMENT, "Invalid query. Expected a string for document ID in " + r2 + "(), but got a " + typeof c);
        if (!te(t4) && c.indexOf("/") !== -1)
          throw new D2(N2.INVALID_ARGUMENT, "Invalid query. When querying a collection and ordering by FieldPath.documentId(), the value passed to " + r2 + "() must be a plain document ID, but '" + c + "' contains a slash.");
        var h = t4.path.child(H2.fromString(c));
        if (!ct.isDocumentKey(h))
          throw new D2(N2.INVALID_ARGUMENT, "Invalid query. When querying a collection group and ordering by FieldPath.documentId(), the value passed to " + r2 + "() must result in a valid document path, but '" + h + "' is not because it contains an odd number of segments.");
        var f = new ct(h);
        u.push(mt(e2, f));
      } else {
        var l2 = Ra2(n2, r2, c);
        u.push(l2);
      }
    }
    return new Bt(u, o);
  }(t3._query, t3.firestore._databaseId, i, e, n, r);
}
function sc2(t3, e, n) {
  if (typeof (n = getModularInstance(n)) == "string") {
    if (n === "")
      throw new D2(N2.INVALID_ARGUMENT, "Invalid query. When querying with FieldPath.documentId(), you must provide a valid document ID, but it was an empty string.");
    if (!te(e) && n.indexOf("/") !== -1)
      throw new D2(N2.INVALID_ARGUMENT, "Invalid query. When querying a collection by FieldPath.documentId(), you must provide a plain document ID, but '" + n + "' contains a '/' character.");
    var r = e.path.child(H2.fromString(n));
    if (!ct.isDocumentKey(r))
      throw new D2(N2.INVALID_ARGUMENT, "Invalid query. When querying a collection group by FieldPath.documentId(), the value provided must result in a valid document path, but '" + r + "' is not because it has an odd number of segments (" + r.length + ").");
    return mt(t3, new ct(r));
  }
  if (n instanceof $u)
    return mt(t3, n._key);
  throw new D2(N2.INVALID_ARGUMENT, "Invalid query. When querying with FieldPath.documentId(), you must provide a valid string or a DocumentReference, but it was: " + Gu(n) + ".");
}
function uc2(t3, e) {
  if (!Array.isArray(t3) || t3.length === 0)
    throw new D2(N2.INVALID_ARGUMENT, "Invalid Query. A non-empty array is required for '" + e.toString() + "' filters.");
  if (t3.length > 10)
    throw new D2(N2.INVALID_ARGUMENT, "Invalid Query. '" + e.toString() + "' filters support a maximum of 10 elements in the value array.");
}
function ac2(t3, e, n) {
  if (!n.isEqual(e))
    throw new D2(N2.INVALID_ARGUMENT, "Invalid query. You have a where filter with an inequality (<, <=, !=, not-in, >, or >=) on field '" + e.toString() + "' and so you must also use '" + e.toString() + "' as your first argument to orderBy(), but your first orderBy() is on field '" + n.toString() + "' instead.");
}
var cc2 = function() {
  function t3() {
  }
  return t3.prototype.convertValue = function(t4, e) {
    switch (e === void 0 && (e = "none"), ht(t4)) {
      case 0:
        return null;
      case 1:
        return t4.booleanValue;
      case 2:
        return et(t4.integerValue || t4.doubleValue);
      case 3:
        return this.convertTimestamp(t4.timestampValue);
      case 4:
        return this.convertServerTimestamp(t4, e);
      case 5:
        return t4.stringValue;
      case 6:
        return this.convertBytes(nt(t4.bytesValue));
      case 7:
        return this.convertReference(t4.referenceValue);
      case 8:
        return this.convertGeoPoint(t4.geoPointValue);
      case 9:
        return this.convertArray(t4.arrayValue, e);
      case 10:
        return this.convertObject(t4.mapValue, e);
      default:
        throw O2();
    }
  }, t3.prototype.convertObject = function(t4, e) {
    var n = this, r = {};
    return G(t4.fields, function(t5, i) {
      r[t5] = n.convertValue(i, e);
    }), r;
  }, t3.prototype.convertGeoPoint = function(t4) {
    return new ya2(et(t4.latitude), et(t4.longitude));
  }, t3.prototype.convertArray = function(t4, e) {
    var n = this;
    return (t4.values || []).map(function(t5) {
      return n.convertValue(t5, e);
    });
  }, t3.prototype.convertServerTimestamp = function(t4, e) {
    switch (e) {
      case "previous":
        var n = it(t4);
        return n == null ? null : this.convertValue(n, e);
      case "estimate":
        return this.convertTimestamp(ot(t4));
      default:
        return null;
    }
  }, t3.prototype.convertTimestamp = function(t4) {
    var e = tt(t4);
    return new j(e.seconds, e.nanos);
  }, t3.prototype.convertDocumentKey = function(t4, e) {
    var n = H2.fromString(t4);
    P2($n(n));
    var r = new Ru(n.get(1), n.get(3)), i = new ct(n.popFirst(5));
    return r.isEqual(e) || x2("Document " + i + " contains a document reference within a different database (" + r.projectId + "/" + r.database + ") which is not supported. It will be treated as a reference in the current database (" + e.projectId + "/" + e.database + ") instead."), i;
  }, t3;
}();
function hc2(t3, e, n) {
  return t3 ? n && (n.merge || n.mergeFields) ? t3.toFirestore(e, n) : t3.toFirestore(e) : e;
}
var fc2 = function(e) {
  function n(t3) {
    var n2 = this;
    return (n2 = e.call(this) || this).firestore = t3, n2;
  }
  return __extends(n, e), n.prototype.convertBytes = function(t3) {
    return new da2(t3);
  }, n.prototype.convertReference = function(t3) {
    var e2 = this.convertDocumentKey(t3, this.firestore._databaseId);
    return new $u(this.firestore, null, e2);
  }, n;
}(cc2);
var lc2 = function() {
  function t3(t4, e) {
    this._firestore = t4, this._commitHandler = e, this._mutations = [], this._committed = false, this._dataReader = Ta(t4);
  }
  return t3.prototype.set = function(t4, e, n) {
    this._verifyNotCommitted();
    var r = dc2(t4, this._firestore), i = hc2(r.converter, e, n), o = Ea(this._dataReader, "WriteBatch.set", r._key, i, r.converter !== null, n);
    return this._mutations.push(o.toMutation(r._key, De.none())), this;
  }, t3.prototype.update = function(t4, e, n) {
    for (var r = [], i = 3; i < arguments.length; i++)
      r[i - 3] = arguments[i];
    this._verifyNotCommitted();
    var o, s = dc2(t4, this._firestore);
    return o = typeof (e = getModularInstance(e)) == "string" || e instanceof la2 ? xa2(this._dataReader, "WriteBatch.update", s._key, e, n, r) : Ca2(this._dataReader, "WriteBatch.update", s._key, e), this._mutations.push(o.toMutation(s._key, De.exists(true))), this;
  }, t3.prototype.delete = function(t4) {
    this._verifyNotCommitted();
    var e = dc2(t4, this._firestore);
    return this._mutations = this._mutations.concat(new je(e._key, De.none())), this;
  }, t3.prototype.commit = function() {
    return this._verifyNotCommitted(), this._committed = true, this._mutations.length > 0 ? this._commitHandler(this._mutations) : Promise.resolve();
  }, t3.prototype._verifyNotCommitted = function() {
    if (this._committed)
      throw new D2(N2.FAILED_PRECONDITION, "A write batch can no longer be used after commit() has been called.");
  }, t3;
}();
function dc2(t3, e) {
  if ((t3 = getModularInstance(t3)).firestore !== e)
    throw new D2(N2.INVALID_ARGUMENT, "Provided document reference is from a different Firestore instance.");
  return t3;
}
var pc2 = function(e) {
  function n(t3) {
    var n2 = this;
    return (n2 = e.call(this) || this).firestore = t3, n2;
  }
  return __extends(n, e), n.prototype.convertBytes = function(t3) {
    return new da2(t3);
  }, n.prototype.convertReference = function(t3) {
    var e2 = this.convertDocumentKey(t3, this.firestore._databaseId);
    return new $u(this.firestore, null, e2);
  }, n;
}(cc2);
function yc2(t3, e, n) {
  for (var r = [], i = 3; i < arguments.length; i++)
    r[i - 3] = arguments[i];
  t3 = zu(t3, $u);
  var o = zu(t3.firestore, ua2), s = Ta(o);
  return mc2(o, [(typeof (e = getModularInstance(e)) == "string" || e instanceof la2 ? xa2(s, "updateDoc", t3._key, e, n, r) : Ca2(s, "updateDoc", t3._key, e)).toMutation(t3._key, De.exists(true))]);
}
function vc2(t3) {
  for (var e, i, o, s = [], u = 1; u < arguments.length; u++)
    s[u - 1] = arguments[u];
  t3 = getModularInstance(t3);
  var a = {
    includeMetadataChanges: false
  }, c = 0;
  typeof s[c] != "object" || ia2(s[c]) || (a = s[c], c++);
  var h, f, d, p2 = {
    includeMetadataChanges: a.includeMetadataChanges
  };
  if (ia2(s[c])) {
    var y2 = s[c];
    s[c] = (e = y2.next) === null || e === void 0 ? void 0 : e.bind(y2), s[c + 1] = (i = y2.error) === null || i === void 0 ? void 0 : i.bind(y2), s[c + 2] = (o = y2.complete) === null || o === void 0 ? void 0 : o.bind(y2);
  }
  if (t3 instanceof $u)
    f = zu(t3.firestore, ua2), d = Yt(t3._key.path), h = {
      next: function(e2) {
        s[c] && s[c](gc2(f, t3, e2));
      },
      error: s[c + 1],
      complete: s[c + 2]
    };
  else {
    var v2 = zu(t3, Xu);
    f = zu(v2.firestore, ua2), d = v2._query;
    var m = new pc2(f);
    h = {
      next: function(t4) {
        s[c] && s[c](new Ha2(f, m, v2, t4));
      },
      error: s[c + 1],
      complete: s[c + 2]
    }, Xa2(t3._query);
  }
  return function(t4, e2, i2, o2) {
    var s2 = this, u2 = new yu(o2), a2 = new Is(e2, u2, i2);
    return t4.asyncQueue.enqueueAndForget(function() {
      return __awaiter(s2, void 0, void 0, function() {
        var e3;
        return __generator(this, function(n) {
          switch (n.label) {
            case 0:
              return e3 = vs, [4, Au(t4)];
            case 1:
              return [2, e3.apply(void 0, [n.sent(), a2])];
          }
        });
      });
    }), function() {
      u2.Wo(), t4.asyncQueue.enqueueAndForget(function() {
        return __awaiter(s2, void 0, void 0, function() {
          var e3;
          return __generator(this, function(n) {
            switch (n.label) {
              case 0:
                return e3 = ms, [4, Au(t4)];
              case 1:
                return [2, e3.apply(void 0, [n.sent(), a2])];
            }
          });
        });
      });
    };
  }(aa2(f), d, p2, h);
}
function mc2(t3, e) {
  return function(t4, e2) {
    var i = this, o = new br();
    return t4.asyncQueue.enqueueAndForget(function() {
      return __awaiter(i, void 0, void 0, function() {
        var n;
        return __generator(this, function(r) {
          switch (r.label) {
            case 0:
              return n = Ps, [4, Du(t4)];
            case 1:
              return [2, n.apply(void 0, [r.sent(), e2, o])];
          }
        });
      });
    }), o.promise;
  }(aa2(t3), e);
}
function gc2(t3, e, n) {
  var r = n.docs.get(e._key), i = new pc2(t3);
  return new za2(t3, i, e._key, r, new Ga2(n.hasPendingWrites, n.fromCache), e.converter);
}
var wc2 = function(e) {
  function n(t3, n2) {
    var r = this;
    return (r = e.call(this, t3, n2) || this)._firestore = t3, r;
  }
  return __extends(n, e), n.prototype.get = function(t3) {
    var n2 = this, r = dc2(t3, this._firestore), i = new pc2(this._firestore);
    return e.prototype.get.call(this, t3).then(function(t4) {
      return new za2(n2._firestore, i, r._key, t4._document, new Ga2(false, false), r.converter);
    });
  }, n;
}(function() {
  function t3(t4, e) {
    this._firestore = t4, this._transaction = e, this._dataReader = Ta(t4);
  }
  return t3.prototype.get = function(t4) {
    var e = this, n = dc2(t4, this._firestore), r = new fc2(this._firestore);
    return this._transaction.lookup([n._key]).then(function(t5) {
      if (!t5 || t5.length !== 1)
        return O2();
      var i = t5[0];
      if (i.isFoundDocument())
        return new ja2(e._firestore, r, i.key, i, n.converter);
      if (i.isNoDocument())
        return new ja2(e._firestore, r, n._key, null, n.converter);
      throw O2();
    });
  }, t3.prototype.set = function(t4, e, n) {
    var r = dc2(t4, this._firestore), i = hc2(r.converter, e, n), o = Ea(this._dataReader, "Transaction.set", r._key, i, r.converter !== null, n);
    return this._transaction.set(r._key, o), this;
  }, t3.prototype.update = function(t4, e, n) {
    for (var r = [], i = 3; i < arguments.length; i++)
      r[i - 3] = arguments[i];
    var o, s = dc2(t4, this._firestore);
    return o = typeof (e = getModularInstance(e)) == "string" || e instanceof la2 ? xa2(this._dataReader, "Transaction.update", s._key, e, n, r) : Ca2(this._dataReader, "Transaction.update", s._key, e), this._transaction.update(s._key, o), this;
  }, t3.prototype.delete = function(t4) {
    var e = dc2(t4, this._firestore);
    return this._transaction.delete(e._key), this;
  }, t3;
}());
function bc2() {
  if (typeof Uint8Array == "undefined")
    throw new D2(N2.UNIMPLEMENTED, "Uint8Arrays are not available in this environment.");
}
function Ic2() {
  if (typeof atob == "undefined")
    throw new D2(N2.UNIMPLEMENTED, "Blobs are unavailable in Firestore in this environment.");
}
var Tc2 = function() {
  function t3(t4) {
    this._delegate = t4;
  }
  return t3.fromBase64String = function(e) {
    return Ic2(), new t3(da2.fromBase64String(e));
  }, t3.fromUint8Array = function(e) {
    return bc2(), new t3(da2.fromUint8Array(e));
  }, t3.prototype.toBase64 = function() {
    return Ic2(), this._delegate.toBase64();
  }, t3.prototype.toUint8Array = function() {
    return bc2(), this._delegate.toUint8Array();
  }, t3.prototype.isEqual = function(t4) {
    return this._delegate.isEqual(t4._delegate);
  }, t3.prototype.toString = function() {
    return "Blob(base64: " + this.toBase64() + ")";
  }, t3;
}();
var Ec2 = function() {
  function t3() {
  }
  return t3.prototype.enableIndexedDbPersistence = function(t4, e) {
    return function(t5, e2) {
      fa2(t5 = zu(t5, ua2));
      var n = aa2(t5), r = t5._freezeSettings(), i = new du();
      return ha2(n, i, new fu(i, r.cacheSizeBytes, e2 == null ? void 0 : e2.forceOwnership));
    }(t4._delegate, {
      forceOwnership: e
    });
  }, t3.prototype.enableMultiTabIndexedDbPersistence = function(t4) {
    return function(t5) {
      fa2(t5 = zu(t5, ua2));
      var e = aa2(t5), n = t5._freezeSettings(), r = new du();
      return ha2(e, r, new lu(r, n.cacheSizeBytes));
    }(t4._delegate);
  }, t3.prototype.clearIndexedDbPersistence = function(t4) {
    return function(t5) {
      var e = this;
      if (t5._initialized && !t5._terminated)
        throw new D2(N2.FAILED_PRECONDITION, "Persistence can only be cleared before a Firestore instance is initialized or after it is terminated.");
      var i = new br();
      return t5._queue.enqueueAndForgetEvenWhileRestricted(function() {
        return __awaiter(e, void 0, void 0, function() {
          var e2;
          return __generator(this, function(o) {
            switch (o.label) {
              case 0:
                return o.trys.push([0, 2, , 3]), [4, function(t6) {
                  return __awaiter(this, void 0, void 0, function() {
                    var e3;
                    return __generator(this, function(n) {
                      switch (n.label) {
                        case 0:
                          return Er.yt() ? (e3 = t6 + "main", [4, Er.delete(e3)]) : [2, Promise.resolve()];
                        case 1:
                          return n.sent(), [2];
                      }
                    });
                  });
                }(Oi(t5._databaseId, t5._persistenceKey))];
              case 1:
                return o.sent(), i.resolve(), [3, 3];
              case 2:
                return e2 = o.sent(), i.reject(e2), [3, 3];
              case 3:
                return [2];
            }
          });
        });
      }), i.promise;
    }(t4._delegate);
  }, t3;
}();
var _c = function() {
  function t3(t4, e, n) {
    var r = this;
    this._delegate = e, this.Zc = n, this.INTERNAL = {
      delete: function() {
        return r.terminate();
      }
    }, t4 instanceof Ru || (this.tu = t4);
  }
  return Object.defineProperty(t3.prototype, "_databaseId", {
    get: function() {
      return this._delegate._databaseId;
    },
    enumerable: false,
    configurable: true
  }), t3.prototype.settings = function(t4) {
    var e = this._delegate._getSettings();
    t4.merge || e.host === t4.host || R2("You are overriding the original host. If you did not intend to override your settings, use {merge: true}."), t4.merge && delete (t4 = Object.assign(Object.assign({}, e), t4)).merge, this._delegate._setSettings(t4);
  }, t3.prototype.useEmulator = function(t4, e, n) {
    n === void 0 && (n = {}), function(t5, e2, n2, r) {
      var i;
      r === void 0 && (r = {});
      var o = (t5 = zu(t5, Yu))._getSettings();
      if (o.host !== "firestore.googleapis.com" && o.host !== e2 && R2("Host has been set in both settings() and useEmulator(), emulator host will be used"), t5._setSettings(Object.assign(Object.assign({}, o), {
        host: e2 + ":" + n2,
        ssl: false
      })), r.mockUserToken) {
        var s, u;
        if (typeof r.mockUserToken == "string")
          s = r.mockUserToken, u = fo.MOCK_USER;
        else {
          s = createMockUserToken(r.mockUserToken, (i = t5._app) === null || i === void 0 ? void 0 : i.options.projectId);
          var a = r.mockUserToken.sub || r.mockUserToken.user_id;
          if (!a)
            throw new D2(N2.INVALID_ARGUMENT, "mockUserToken must contain 'sub' or 'user_id' field!");
          u = new fo(a);
        }
        t5._credentials = new Fu(new Ou(s, u));
      }
    }(this._delegate, t4, e, n);
  }, t3.prototype.enableNetwork = function() {
    return function(t4) {
      var e = this;
      return t4.asyncQueue.enqueue(function() {
        return __awaiter(e, void 0, void 0, function() {
          var e2, n;
          return __generator(this, function(r) {
            switch (r.label) {
              case 0:
                return [4, _u(t4)];
              case 1:
                return e2 = r.sent(), [4, Nu(t4)];
              case 2:
                return n = r.sent(), [2, (e2.setNetworkEnabled(true), function(t5) {
                  var e3 = F2(t5);
                  return e3.Or.delete(0), Vo(e3);
                }(n))];
            }
          });
        });
      });
    }(aa2(zu(this._delegate, ua2)));
  }, t3.prototype.disableNetwork = function() {
    return function(t4) {
      var e = this;
      return t4.asyncQueue.enqueue(function() {
        return __awaiter(e, void 0, void 0, function() {
          var e2, i;
          return __generator(this, function(o) {
            switch (o.label) {
              case 0:
                return [4, _u(t4)];
              case 1:
                return e2 = o.sent(), [4, Nu(t4)];
              case 2:
                return i = o.sent(), [2, (e2.setNetworkEnabled(false), function(t5) {
                  return __awaiter(this, void 0, void 0, function() {
                    var e3;
                    return __generator(this, function(n) {
                      switch (n.label) {
                        case 0:
                          return (e3 = F2(t5)).Or.add(0), [4, qo(e3)];
                        case 1:
                          return n.sent(), e3.Br.set("Offline"), [2];
                      }
                    });
                  });
                }(i))];
            }
          });
        });
      });
    }(aa2(zu(this._delegate, ua2)));
  }, t3.prototype.enablePersistence = function(t4) {
    var e = false, n = false;
    return t4 && ju("synchronizeTabs", e = !!t4.synchronizeTabs, "experimentalForceOwningTab", n = !!t4.experimentalForceOwningTab), e ? this.Zc.enableMultiTabIndexedDbPersistence(this) : this.Zc.enableIndexedDbPersistence(this, n);
  }, t3.prototype.clearPersistence = function() {
    return this.Zc.clearIndexedDbPersistence(this);
  }, t3.prototype.terminate = function() {
    return this.tu && (this.tu._removeServiceInstance("firestore"), this.tu._removeServiceInstance("firestore-exp")), this._delegate._delete();
  }, t3.prototype.waitForPendingWrites = function() {
    return function(t4) {
      var e = this, i = new br();
      return t4.asyncQueue.enqueueAndForget(function() {
        return __awaiter(e, void 0, void 0, function() {
          var e2;
          return __generator(this, function(n) {
            switch (n.label) {
              case 0:
                return e2 = Bs, [4, Du(t4)];
              case 1:
                return [2, e2.apply(void 0, [n.sent(), i])];
            }
          });
        });
      }), i.promise;
    }(aa2(zu(this._delegate, ua2)));
  }, t3.prototype.onSnapshotsInSync = function(t4) {
    return function(t5, e) {
      return function(t6, e2) {
        var i = this, o = new yu(e2);
        return t6.asyncQueue.enqueueAndForget(function() {
          return __awaiter(i, void 0, void 0, function() {
            var e3;
            return __generator(this, function(n) {
              switch (n.label) {
                case 0:
                  return e3 = function(t7, e4) {
                    F2(t7).Gr.add(e4), e4.next();
                  }, [4, Au(t6)];
                case 1:
                  return [2, e3.apply(void 0, [n.sent(), o])];
              }
            });
          });
        }), function() {
          o.Wo(), t6.asyncQueue.enqueueAndForget(function() {
            return __awaiter(i, void 0, void 0, function() {
              var e3;
              return __generator(this, function(n) {
                switch (n.label) {
                  case 0:
                    return e3 = function(t7, e4) {
                      F2(t7).Gr.delete(e4);
                    }, [4, Au(t6)];
                  case 1:
                    return [2, e3.apply(void 0, [n.sent(), o])];
                }
              });
            });
          });
        };
      }(aa2(t5 = zu(t5, ua2)), ia2(e) ? e : {
        next: e
      });
    }(this._delegate, t4);
  }, Object.defineProperty(t3.prototype, "app", {
    get: function() {
      if (!this.tu)
        throw new D2(N2.FAILED_PRECONDITION, "Firestore was not initialized using the Firebase SDK. 'app' is not available");
      return this.tu;
    },
    enumerable: false,
    configurable: true
  }), t3.prototype.collection = function(t4) {
    try {
      return new qc2(this, Zu(this._delegate, t4));
    } catch (t5) {
      throw xc2(t5, "collection()", "Firestore.collection()");
    }
  }, t3.prototype.doc = function(t4) {
    try {
      return new Cc2(this, ta2(this._delegate, t4));
    } catch (t5) {
      throw xc2(t5, "doc()", "Firestore.doc()");
    }
  }, t3.prototype.collectionGroup = function(t4) {
    try {
      return new Fc2(this, function(t5, e) {
        if (t5 = zu(t5, Yu), Uu("collectionGroup", "collection id", e), e.indexOf("/") >= 0)
          throw new D2(N2.INVALID_ARGUMENT, "Invalid collection ID '" + e + "' passed to function collectionGroup(). Collection IDs must not contain '/'.");
        return new Xu(t5, null, function(t6) {
          return new Wt(H2.emptyPath(), t6);
        }(e));
      }(this._delegate, t4));
    } catch (t5) {
      throw xc2(t5, "collectionGroup()", "Firestore.collectionGroup()");
    }
  }, t3.prototype.runTransaction = function(t4) {
    var e = this;
    return function(t5, e2) {
      return function(t6, e3) {
        var i = this, o = new br();
        return t6.asyncQueue.enqueueAndForget(function() {
          return __awaiter(i, void 0, void 0, function() {
            var n;
            return __generator(this, function(r) {
              switch (r.label) {
                case 0:
                  return [4, function(t7) {
                    return Eu(t7).then(function(t8) {
                      return t8.datastore;
                    });
                  }(t6)];
                case 1:
                  return n = r.sent(), new gu(t6.asyncQueue, n, e3, o).run(), [2];
              }
            });
          });
        }), o.promise;
      }(aa2(t5), function(n) {
        return e2(new wc2(t5, n));
      });
    }(this._delegate, function(n) {
      return t4(new Dc2(e, n));
    });
  }, t3.prototype.batch = function() {
    var t4 = this;
    return aa2(this._delegate), new Ac2(new lc2(this._delegate, function(e) {
      return mc2(t4._delegate, e);
    }));
  }, t3.prototype.loadBundle = function(t4) {
    throw new D2(N2.FAILED_PRECONDITION, '"loadBundle()" does not exist, have you imported "firebase/firestore/bundle"?');
  }, t3.prototype.namedQuery = function(t4) {
    throw new D2(N2.FAILED_PRECONDITION, '"namedQuery()" does not exist, have you imported "firebase/firestore/bundle"?');
  }, t3;
}();
var Sc2 = function(e) {
  function n(t3) {
    var n2 = this;
    return (n2 = e.call(this) || this).firestore = t3, n2;
  }
  return __extends(n, e), n.prototype.convertBytes = function(t3) {
    return new Tc2(new da2(t3));
  }, n.prototype.convertReference = function(t3) {
    var e2 = this.convertDocumentKey(t3, this.firestore._databaseId);
    return Cc2.eu(e2, this.firestore, null);
  }, n;
}(cc2);
function Nc2(t3) {
  var e;
  e = t3, A2.setLogLevel(e);
}
var Dc2 = function() {
  function t3(t4, e) {
    this._firestore = t4, this._delegate = e, this._userDataWriter = new Sc2(t4);
  }
  return t3.prototype.get = function(t4) {
    var e = this, n = Uc2(t4);
    return this._delegate.get(n).then(function(t5) {
      return new Oc2(e._firestore, new za2(e._firestore._delegate, e._userDataWriter, t5._key, t5._document, t5.metadata, n.converter));
    });
  }, t3.prototype.set = function(t4, e, n) {
    var r = Uc2(t4);
    return n ? (Bu("Transaction.set", n), this._delegate.set(r, e, n)) : this._delegate.set(r, e), this;
  }, t3.prototype.update = function(t4, n, r) {
    for (var i, o = [], s = 3; s < arguments.length; s++)
      o[s - 3] = arguments[s];
    var u = Uc2(t4);
    return arguments.length === 2 ? this._delegate.update(u, n) : (i = this._delegate).update.apply(i, __spreadArray([u, n, r], o)), this;
  }, t3.prototype.delete = function(t4) {
    var e = Uc2(t4);
    return this._delegate.delete(e), this;
  }, t3;
}();
var Ac2 = function() {
  function t3(t4) {
    this._delegate = t4;
  }
  return t3.prototype.set = function(t4, e, n) {
    var r = Uc2(t4);
    return n ? (Bu("WriteBatch.set", n), this._delegate.set(r, e, n)) : this._delegate.set(r, e), this;
  }, t3.prototype.update = function(t4, n, r) {
    for (var i, o = [], s = 3; s < arguments.length; s++)
      o[s - 3] = arguments[s];
    var u = Uc2(t4);
    return arguments.length === 2 ? this._delegate.update(u, n) : (i = this._delegate).update.apply(i, __spreadArray([u, n, r], o)), this;
  }, t3.prototype.delete = function(t4) {
    var e = Uc2(t4);
    return this._delegate.delete(e), this;
  }, t3.prototype.commit = function() {
    return this._delegate.commit();
  }, t3;
}();
var kc2 = function() {
  function t3(t4, e, n) {
    this._firestore = t4, this._userDataWriter = e, this._delegate = n;
  }
  return t3.prototype.fromFirestore = function(t4, e) {
    var n = new Wa2(this._firestore._delegate, this._userDataWriter, t4._key, t4._document, t4.metadata, null);
    return this._delegate.fromFirestore(new Pc2(this._firestore, n), e != null ? e : {});
  }, t3.prototype.toFirestore = function(t4, e) {
    return e ? this._delegate.toFirestore(t4, e) : this._delegate.toFirestore(t4);
  }, t3.nu = function(e, n) {
    var r = t3.su, i = r.get(e);
    i || (i = new WeakMap(), r.set(e, i));
    var o = i.get(n);
    return o || (o = new t3(e, new Sc2(e), n), i.set(n, o)), o;
  }, t3;
}();
kc2.su = new WeakMap();
var Cc2 = function() {
  function t3(t4, e) {
    this.firestore = t4, this._delegate = e, this._userDataWriter = new Sc2(t4);
  }
  return t3.iu = function(e, n, r) {
    if (e.length % 2 != 0)
      throw new D2(N2.INVALID_ARGUMENT, "Invalid document reference. Document references must have an even number of segments, but " + e.canonicalString() + " has " + e.length);
    return new t3(n, new $u(n._delegate, r, new ct(e)));
  }, t3.eu = function(e, n, r) {
    return new t3(n, new $u(n._delegate, r, e));
  }, Object.defineProperty(t3.prototype, "id", {
    get: function() {
      return this._delegate.id;
    },
    enumerable: false,
    configurable: true
  }), Object.defineProperty(t3.prototype, "parent", {
    get: function() {
      return new qc2(this.firestore, this._delegate.parent);
    },
    enumerable: false,
    configurable: true
  }), Object.defineProperty(t3.prototype, "path", {
    get: function() {
      return this._delegate.path;
    },
    enumerable: false,
    configurable: true
  }), t3.prototype.collection = function(t4) {
    try {
      return new qc2(this.firestore, Zu(this._delegate, t4));
    } catch (t5) {
      throw xc2(t5, "collection()", "DocumentReference.collection()");
    }
  }, t3.prototype.isEqual = function(t4) {
    return (t4 = getModularInstance(t4)) instanceof $u && ea2(this._delegate, t4);
  }, t3.prototype.set = function(t4, e) {
    e = Bu("DocumentReference.set", e);
    try {
      return function(t5, e2, n) {
        t5 = zu(t5, $u);
        var r = zu(t5.firestore, ua2), i = hc2(t5.converter, e2, n);
        return mc2(r, [Ea(Ta(r), "setDoc", t5._key, i, t5.converter !== null, n).toMutation(t5._key, De.none())]);
      }(this._delegate, t4, e);
    } catch (t5) {
      throw xc2(t5, "setDoc()", "DocumentReference.set()");
    }
  }, t3.prototype.update = function(t4, n) {
    for (var r = [], i = 2; i < arguments.length; i++)
      r[i - 2] = arguments[i];
    try {
      return arguments.length === 1 ? yc2(this._delegate, t4) : yc2.apply(void 0, __spreadArray([this._delegate, t4, n], r));
    } catch (t5) {
      throw xc2(t5, "updateDoc()", "DocumentReference.update()");
    }
  }, t3.prototype.delete = function() {
    return mc2(zu((t4 = this._delegate).firestore, ua2), [new je(t4._key, De.none())]);
    var t4;
  }, t3.prototype.onSnapshot = function() {
    for (var t4 = this, e = [], n = 0; n < arguments.length; n++)
      e[n] = arguments[n];
    var r = Rc2(e), i = Lc2(e, function(e2) {
      return new Oc2(t4.firestore, new za2(t4.firestore._delegate, t4._userDataWriter, e2._key, e2._document, e2.metadata, t4._delegate.converter));
    });
    return vc2(this._delegate, r, i);
  }, t3.prototype.get = function(t4) {
    var e = this;
    return ((t4 == null ? void 0 : t4.source) === "cache" ? function(t5) {
      t5 = zu(t5, $u);
      var e2 = zu(t5.firestore, ua2), i = aa2(e2), o = new pc2(e2);
      return function(t6, e3) {
        var i2 = this, o2 = new br();
        return t6.asyncQueue.enqueueAndForget(function() {
          return __awaiter(i2, void 0, void 0, function() {
            var i3;
            return __generator(this, function(s) {
              switch (s.label) {
                case 0:
                  return i3 = function(t7, e4, i4) {
                    return __awaiter(this, void 0, void 0, function() {
                      var n, o3;
                      return __generator(this, function(r) {
                        switch (r.label) {
                          case 0:
                            return r.trys.push([0, 2, , 3]), [4, function(t8, e5) {
                              var n2 = F2(t8);
                              return n2.persistence.runTransaction("read document", "readonly", function(t9) {
                                return n2.Mn.mn(t9, e5);
                              });
                            }(t7, e4)];
                          case 1:
                            return (o3 = r.sent()).isFoundDocument() ? i4.resolve(o3) : o3.isNoDocument() ? i4.resolve(null) : i4.reject(new D2(N2.UNAVAILABLE, "Failed to get document from cache. (However, this document may exist on the server. Run again without setting 'source' in the GetOptions to attempt to retrieve the document from the server.)")), [3, 3];
                          case 2:
                            return n = r.sent(), o3 = hs(n, "Failed to get document '" + e4 + " from cache"), i4.reject(o3), [3, 3];
                          case 3:
                            return [2];
                        }
                      });
                    });
                  }, [4, Su(t6)];
                case 1:
                  return [2, i3.apply(void 0, [s.sent(), e3, o2])];
              }
            });
          });
        }), o2.promise;
      }(i, t5._key).then(function(n) {
        return new za2(e2, o, t5._key, n, new Ga2(n !== null && n.hasLocalMutations, true), t5.converter);
      });
    }(this._delegate) : (t4 == null ? void 0 : t4.source) === "server" ? function(t5) {
      t5 = zu(t5, $u);
      var e2 = zu(t5.firestore, ua2);
      return ku(aa2(e2), t5._key, {
        source: "server"
      }).then(function(n) {
        return gc2(e2, t5, n);
      });
    }(this._delegate) : function(t5) {
      t5 = zu(t5, $u);
      var e2 = zu(t5.firestore, ua2);
      return ku(aa2(e2), t5._key).then(function(n) {
        return gc2(e2, t5, n);
      });
    }(this._delegate)).then(function(t5) {
      return new Oc2(e.firestore, new za2(e.firestore._delegate, e._userDataWriter, t5._key, t5._document, t5.metadata, e._delegate.converter));
    });
  }, t3.prototype.withConverter = function(e) {
    return new t3(this.firestore, e ? this._delegate.withConverter(kc2.nu(this.firestore, e)) : this._delegate.withConverter(null));
  }, t3;
}();
function xc2(t3, e, n) {
  return t3.message = t3.message.replace(e, n), t3;
}
function Rc2(t3) {
  for (var e = 0, n = t3; e < n.length; e++) {
    var r = n[e];
    if (typeof r == "object" && !ia2(r))
      return r;
  }
  return {};
}
function Lc2(t3, e) {
  var n, r, i;
  return {
    next: function(t4) {
      i.next && i.next(e(t4));
    },
    error: (n = (i = ia2(t3[0]) ? t3[0] : ia2(t3[1]) ? t3[1] : typeof t3[0] == "function" ? {
      next: t3[0],
      error: t3[1],
      complete: t3[2]
    } : {
      next: t3[1],
      error: t3[2],
      complete: t3[3]
    }).error) === null || n === void 0 ? void 0 : n.bind(i),
    complete: (r = i.complete) === null || r === void 0 ? void 0 : r.bind(i)
  };
}
var Oc2 = function() {
  function t3(t4, e) {
    this._firestore = t4, this._delegate = e;
  }
  return Object.defineProperty(t3.prototype, "ref", {
    get: function() {
      return new Cc2(this._firestore, this._delegate.ref);
    },
    enumerable: false,
    configurable: true
  }), Object.defineProperty(t3.prototype, "id", {
    get: function() {
      return this._delegate.id;
    },
    enumerable: false,
    configurable: true
  }), Object.defineProperty(t3.prototype, "metadata", {
    get: function() {
      return this._delegate.metadata;
    },
    enumerable: false,
    configurable: true
  }), Object.defineProperty(t3.prototype, "exists", {
    get: function() {
      return this._delegate.exists();
    },
    enumerable: false,
    configurable: true
  }), t3.prototype.data = function(t4) {
    return this._delegate.data(t4);
  }, t3.prototype.get = function(t4, e) {
    return this._delegate.get(t4, e);
  }, t3.prototype.isEqual = function(t4) {
    return $a2(this._delegate, t4._delegate);
  }, t3;
}();
var Pc2 = function(e) {
  function n() {
    return e !== null && e.apply(this, arguments) || this;
  }
  return __extends(n, e), n.prototype.data = function(t3) {
    return this._delegate.data(t3);
  }, n;
}(Oc2);
var Fc2 = function() {
  function t3(t4, e) {
    this.firestore = t4, this._delegate = e, this._userDataWriter = new Sc2(t4);
  }
  return t3.prototype.where = function(e, n, r) {
    try {
      return new t3(this.firestore, Za2(this._delegate, function(t4, e2, n2) {
        var r2 = e2, i = Qa("where", t4);
        return new tc2(i, r2, n2);
      }(e, n, r)));
    } catch (e2) {
      throw xc2(e2, /(orderBy|where)\(\)/, "Query.$1()");
    }
  }, t3.prototype.orderBy = function(e, n) {
    try {
      return new t3(this.firestore, Za2(this._delegate, function(t4, e2) {
        e2 === void 0 && (e2 = "asc");
        var n2 = e2, r = Qa("orderBy", t4);
        return new ec2(r, n2);
      }(e, n)));
    } catch (e2) {
      throw xc2(e2, /(orderBy|where)\(\)/, "Query.$1()");
    }
  }, t3.prototype.limit = function(e) {
    try {
      return new t3(this.firestore, Za2(this._delegate, function(t4) {
        return Wu("limit", t4), new nc2("limit", t4, "F");
      }(e)));
    } catch (e2) {
      throw xc2(e2, "limit()", "Query.limit()");
    }
  }, t3.prototype.limitToLast = function(e) {
    try {
      return new t3(this.firestore, Za2(this._delegate, function(t4) {
        return Wu("limitToLast", t4), new nc2("limitToLast", t4, "L");
      }(e)));
    } catch (e2) {
      throw xc2(e2, "limitToLast()", "Query.limitToLast()");
    }
  }, t3.prototype.startAt = function() {
    for (var e = [], n = 0; n < arguments.length; n++)
      e[n] = arguments[n];
    try {
      return new t3(this.firestore, Za2(this._delegate, function() {
        for (var t4 = [], e2 = 0; e2 < arguments.length; e2++)
          t4[e2] = arguments[e2];
        return new rc2("startAt", t4, true);
      }.apply(void 0, e)));
    } catch (e2) {
      throw xc2(e2, "startAt()", "Query.startAt()");
    }
  }, t3.prototype.startAfter = function() {
    for (var e = [], n = 0; n < arguments.length; n++)
      e[n] = arguments[n];
    try {
      return new t3(this.firestore, Za2(this._delegate, function() {
        for (var t4 = [], e2 = 0; e2 < arguments.length; e2++)
          t4[e2] = arguments[e2];
        return new rc2("startAfter", t4, false);
      }.apply(void 0, e)));
    } catch (e2) {
      throw xc2(e2, "startAfter()", "Query.startAfter()");
    }
  }, t3.prototype.endBefore = function() {
    for (var e = [], n = 0; n < arguments.length; n++)
      e[n] = arguments[n];
    try {
      return new t3(this.firestore, Za2(this._delegate, function() {
        for (var t4 = [], e2 = 0; e2 < arguments.length; e2++)
          t4[e2] = arguments[e2];
        return new ic2("endBefore", t4, true);
      }.apply(void 0, e)));
    } catch (e2) {
      throw xc2(e2, "endBefore()", "Query.endBefore()");
    }
  }, t3.prototype.endAt = function() {
    for (var e = [], n = 0; n < arguments.length; n++)
      e[n] = arguments[n];
    try {
      return new t3(this.firestore, Za2(this._delegate, function() {
        for (var t4 = [], e2 = 0; e2 < arguments.length; e2++)
          t4[e2] = arguments[e2];
        return new ic2("endAt", t4, false);
      }.apply(void 0, e)));
    } catch (e2) {
      throw xc2(e2, "endAt()", "Query.endAt()");
    }
  }, t3.prototype.isEqual = function(t4) {
    return na2(this._delegate, t4._delegate);
  }, t3.prototype.get = function(t4) {
    var e = this;
    return ((t4 == null ? void 0 : t4.source) === "cache" ? function(t5) {
      t5 = zu(t5, Xu);
      var e2 = zu(t5.firestore, ua2), i = aa2(e2), o = new pc2(e2);
      return function(t6, e3) {
        var i2 = this, o2 = new br();
        return t6.asyncQueue.enqueueAndForget(function() {
          return __awaiter(i2, void 0, void 0, function() {
            var i3;
            return __generator(this, function(s) {
              switch (s.label) {
                case 0:
                  return i3 = function(t7, e4, i4) {
                    return __awaiter(this, void 0, void 0, function() {
                      var n, o3, s2, u, a;
                      return __generator(this, function(r) {
                        switch (r.label) {
                          case 0:
                            return r.trys.push([0, 2, , 3]), [4, Yi(t7, e4, true)];
                          case 1:
                            return a = r.sent(), n = new As(e4, a.Bn), o3 = n._o(a.documents), s2 = n.applyChanges(o3, false), i4.resolve(s2.snapshot), [3, 3];
                          case 2:
                            return u = r.sent(), a = hs(u, "Failed to execute query '" + e4 + " against cache"), i4.reject(a), [3, 3];
                          case 3:
                            return [2];
                        }
                      });
                    });
                  }, [4, Su(t6)];
                case 1:
                  return [2, i3.apply(void 0, [s.sent(), e3, o2])];
              }
            });
          });
        }), o2.promise;
      }(i, t5._query).then(function(n) {
        return new Ha2(e2, o, t5, n);
      });
    }(this._delegate) : (t4 == null ? void 0 : t4.source) === "server" ? function(t5) {
      t5 = zu(t5, Xu);
      var e2 = zu(t5.firestore, ua2), n = aa2(e2), r = new pc2(e2);
      return Cu(n, t5._query, {
        source: "server"
      }).then(function(n2) {
        return new Ha2(e2, r, t5, n2);
      });
    }(this._delegate) : function(t5) {
      t5 = zu(t5, Xu);
      var e2 = zu(t5.firestore, ua2), n = aa2(e2), r = new pc2(e2);
      return Xa2(t5._query), Cu(n, t5._query).then(function(n2) {
        return new Ha2(e2, r, t5, n2);
      });
    }(this._delegate)).then(function(t5) {
      return new Vc2(e.firestore, new Ha2(e.firestore._delegate, e._userDataWriter, e._delegate, t5._snapshot));
    });
  }, t3.prototype.onSnapshot = function() {
    for (var t4 = this, e = [], n = 0; n < arguments.length; n++)
      e[n] = arguments[n];
    var r = Rc2(e), i = Lc2(e, function(e2) {
      return new Vc2(t4.firestore, new Ha2(t4.firestore._delegate, t4._userDataWriter, t4._delegate, e2._snapshot));
    });
    return vc2(this._delegate, r, i);
  }, t3.prototype.withConverter = function(e) {
    return new t3(this.firestore, e ? this._delegate.withConverter(kc2.nu(this.firestore, e)) : this._delegate.withConverter(null));
  }, t3;
}();
var Mc2 = function() {
  function t3(t4, e) {
    this._firestore = t4, this._delegate = e;
  }
  return Object.defineProperty(t3.prototype, "type", {
    get: function() {
      return this._delegate.type;
    },
    enumerable: false,
    configurable: true
  }), Object.defineProperty(t3.prototype, "doc", {
    get: function() {
      return new Pc2(this._firestore, this._delegate.doc);
    },
    enumerable: false,
    configurable: true
  }), Object.defineProperty(t3.prototype, "oldIndex", {
    get: function() {
      return this._delegate.oldIndex;
    },
    enumerable: false,
    configurable: true
  }), Object.defineProperty(t3.prototype, "newIndex", {
    get: function() {
      return this._delegate.newIndex;
    },
    enumerable: false,
    configurable: true
  }), t3;
}();
var Vc2 = function() {
  function t3(t4, e) {
    this._firestore = t4, this._delegate = e;
  }
  return Object.defineProperty(t3.prototype, "query", {
    get: function() {
      return new Fc2(this._firestore, this._delegate.query);
    },
    enumerable: false,
    configurable: true
  }), Object.defineProperty(t3.prototype, "metadata", {
    get: function() {
      return this._delegate.metadata;
    },
    enumerable: false,
    configurable: true
  }), Object.defineProperty(t3.prototype, "size", {
    get: function() {
      return this._delegate.size;
    },
    enumerable: false,
    configurable: true
  }), Object.defineProperty(t3.prototype, "empty", {
    get: function() {
      return this._delegate.empty;
    },
    enumerable: false,
    configurable: true
  }), Object.defineProperty(t3.prototype, "docs", {
    get: function() {
      var t4 = this;
      return this._delegate.docs.map(function(e) {
        return new Pc2(t4._firestore, e);
      });
    },
    enumerable: false,
    configurable: true
  }), t3.prototype.docChanges = function(t4) {
    var e = this;
    return this._delegate.docChanges(t4).map(function(t5) {
      return new Mc2(e._firestore, t5);
    });
  }, t3.prototype.forEach = function(t4, e) {
    var n = this;
    this._delegate.forEach(function(r) {
      t4.call(e, new Pc2(n._firestore, r));
    });
  }, t3.prototype.isEqual = function(t4) {
    return $a2(this._delegate, t4._delegate);
  }, t3;
}();
var qc2 = function(e) {
  function n(t3, n2) {
    var r = this;
    return (r = e.call(this, t3, n2) || this).firestore = t3, r._delegate = n2, r;
  }
  return __extends(n, e), Object.defineProperty(n.prototype, "id", {
    get: function() {
      return this._delegate.id;
    },
    enumerable: false,
    configurable: true
  }), Object.defineProperty(n.prototype, "path", {
    get: function() {
      return this._delegate.path;
    },
    enumerable: false,
    configurable: true
  }), Object.defineProperty(n.prototype, "parent", {
    get: function() {
      var t3 = this._delegate.parent;
      return t3 ? new Cc2(this.firestore, t3) : null;
    },
    enumerable: false,
    configurable: true
  }), n.prototype.doc = function(t3) {
    try {
      return new Cc2(this.firestore, t3 === void 0 ? ta2(this._delegate) : ta2(this._delegate, t3));
    } catch (t4) {
      throw xc2(t4, "doc()", "CollectionReference.doc()");
    }
  }, n.prototype.add = function(t3) {
    var e2 = this;
    return function(t4, e3) {
      var n2 = zu(t4.firestore, ua2), r = ta2(t4), i = hc2(t4.converter, e3);
      return mc2(n2, [Ea(Ta(t4.firestore), "addDoc", r._key, i, t4.converter !== null, {}).toMutation(r._key, De.exists(false))]).then(function() {
        return r;
      });
    }(this._delegate, t3).then(function(t4) {
      return new Cc2(e2.firestore, t4);
    });
  }, n.prototype.isEqual = function(t3) {
    return ea2(this._delegate, t3._delegate);
  }, n.prototype.withConverter = function(t3) {
    return new n(this.firestore, t3 ? this._delegate.withConverter(kc2.nu(this.firestore, t3)) : this._delegate.withConverter(null));
  }, n;
}(Fc2);
function Uc2(t3) {
  return zu(t3, $u);
}
var Bc2 = function() {
  function t3() {
    for (var t4 = [], n = 0; n < arguments.length; n++)
      t4[n] = arguments[n];
    this._delegate = new (la2.bind.apply(la2, __spreadArray([void 0], t4)))();
  }
  return t3.documentId = function() {
    return new t3($.keyField().canonicalString());
  }, t3.prototype.isEqual = function(t4) {
    return (t4 = getModularInstance(t4)) instanceof la2 && this._delegate._internalPath.isEqual(t4._internalPath);
  }, t3;
}();
var jc2 = function() {
  function t3(t4) {
    this._delegate = t4;
  }
  return t3.serverTimestamp = function() {
    var e = new Na2("serverTimestamp");
    return e._methodName = "FieldValue.serverTimestamp", new t3(e);
  }, t3.delete = function() {
    var e = new _a("deleteField");
    return e._methodName = "FieldValue.delete", new t3(e);
  }, t3.arrayUnion = function() {
    for (var e = [], n = 0; n < arguments.length; n++)
      e[n] = arguments[n];
    var r = function() {
      for (var t4 = [], e2 = 0; e2 < arguments.length; e2++)
        t4[e2] = arguments[e2];
      return new Da("arrayUnion", t4);
    }.apply(void 0, e);
    return r._methodName = "FieldValue.arrayUnion", new t3(r);
  }, t3.arrayRemove = function() {
    for (var e = [], n = 0; n < arguments.length; n++)
      e[n] = arguments[n];
    var r = function() {
      for (var t4 = [], e2 = 0; e2 < arguments.length; e2++)
        t4[e2] = arguments[e2];
      return new Aa2("arrayRemove", t4);
    }.apply(void 0, e);
    return r._methodName = "FieldValue.arrayRemove", new t3(r);
  }, t3.increment = function(e) {
    var n = function(t4) {
      return new ka2("increment", t4);
    }(e);
    return n._methodName = "FieldValue.increment", new t3(n);
  }, t3.prototype.isEqual = function(t4) {
    return this._delegate.isEqual(t4._delegate);
  }, t3;
}();
function Kc2(t3) {
  return function(t4, e) {
    var i = aa2(t4 = zu(t4, ua2)), o = new oa2();
    return function(t5, e2, i2, o2) {
      var s = this, u = function(t6, e3) {
        return function(t7, e4) {
          return new vu(t7, e4);
        }(function(t7, e4) {
          if (t7 instanceof Uint8Array)
            return pu(t7, e4);
          if (t7 instanceof ArrayBuffer)
            return pu(new Uint8Array(t7), e4);
          if (t7 instanceof ReadableStream)
            return t7.getReader();
          throw new Error("Source of `toByteStreamReader` has to be a ArrayBuffer or ReadableStream");
        }(typeof t6 == "string" ? new TextEncoder().encode(t6) : t6), e3);
      }(i2, Co(e2));
      t5.asyncQueue.enqueueAndForget(function() {
        return __awaiter(s, void 0, void 0, function() {
          var e3;
          return __generator(this, function(n) {
            switch (n.label) {
              case 0:
                return e3 = cu, [4, Du(t5)];
              case 1:
                return e3.apply(void 0, [n.sent(), u, o2]), [2];
            }
          });
        });
      });
    }(i, t4._databaseId, e, o), o;
  }(this._delegate, t3);
}
function Qc2(t3) {
  var e, i, o = this;
  return (e = this._delegate, i = t3, function(t4, e2) {
    var i2 = this;
    return t4.asyncQueue.enqueue(function() {
      return __awaiter(i2, void 0, void 0, function() {
        var n;
        return __generator(this, function(r) {
          switch (r.label) {
            case 0:
              return n = function(t5, e3) {
                var n2 = F2(t5);
                return n2.persistence.runTransaction("Get named query", "readonly", function(t6) {
                  return n2.Ke.getNamedQuery(t6, e3);
                });
              }, [4, Su(t4)];
            case 1:
              return [2, n.apply(void 0, [r.sent(), e2])];
          }
        });
      });
    });
  }(aa2(e = zu(e, ua2)), i).then(function(t4) {
    return t4 ? new Xu(e, null, t4.query) : null;
  })).then(function(t4) {
    return t4 ? new Fc2(o, t4) : null;
  });
}

// node_modules/@firebase/firestore/dist/esm5/index.js
var C3 = {
  Firestore: _c,
  GeoPoint: ya2,
  Timestamp: j,
  Blob: Tc2,
  Transaction: Dc2,
  WriteBatch: Ac2,
  DocumentReference: Cc2,
  DocumentSnapshot: Oc2,
  Query: Fc2,
  QueryDocumentSnapshot: Pc2,
  QuerySnapshot: Vc2,
  CollectionReference: qc2,
  FieldPath: Bc2,
  FieldValue: jc2,
  setLogLevel: Nc2,
  CACHE_SIZE_UNLIMITED: sa2
};
function I2(e) {
  !function(e2, r) {
    e2.INTERNAL.registerComponent(new Component("firestore", function(e3) {
      var t3 = e3.getProvider("app").getImmediate();
      return r(t3, e3.getProvider("auth-internal"));
    }, "PUBLIC").setServiceProps(Object.assign({}, C3)));
  }(e, function(e2, s) {
    return new _c(e2, new ua2(e2, s), new Ec2());
  }), e.registerVersion("@firebase/firestore", "2.4.0");
}
I2(index_esm_default);

// node_modules/@firebase/firestore/dist/esm5/bundle.js
function t2(o) {
  o.prototype.loadBundle = Kc2, o.prototype.namedQuery = Qc2;
}
t2(_c);

// node_modules/@firebase/functions/dist/index.esm.js
var errorCodeMap = {
  OK: "ok",
  CANCELLED: "cancelled",
  UNKNOWN: "unknown",
  INVALID_ARGUMENT: "invalid-argument",
  DEADLINE_EXCEEDED: "deadline-exceeded",
  NOT_FOUND: "not-found",
  ALREADY_EXISTS: "already-exists",
  PERMISSION_DENIED: "permission-denied",
  UNAUTHENTICATED: "unauthenticated",
  RESOURCE_EXHAUSTED: "resource-exhausted",
  FAILED_PRECONDITION: "failed-precondition",
  ABORTED: "aborted",
  OUT_OF_RANGE: "out-of-range",
  UNIMPLEMENTED: "unimplemented",
  INTERNAL: "internal",
  UNAVAILABLE: "unavailable",
  DATA_LOSS: "data-loss"
};
var HttpsErrorImpl = function(_super) {
  __extends(HttpsErrorImpl2, _super);
  function HttpsErrorImpl2(code, message, details) {
    var _this = _super.call(this, message) || this;
    Object.setPrototypeOf(_this, HttpsErrorImpl2.prototype);
    _this.code = code;
    _this.details = details;
    return _this;
  }
  return HttpsErrorImpl2;
}(Error);
function codeForHTTPStatus(status) {
  if (status >= 200 && status < 300) {
    return "ok";
  }
  switch (status) {
    case 0:
      return "internal";
    case 400:
      return "invalid-argument";
    case 401:
      return "unauthenticated";
    case 403:
      return "permission-denied";
    case 404:
      return "not-found";
    case 409:
      return "aborted";
    case 429:
      return "resource-exhausted";
    case 499:
      return "cancelled";
    case 500:
      return "internal";
    case 501:
      return "unimplemented";
    case 503:
      return "unavailable";
    case 504:
      return "deadline-exceeded";
  }
  return "unknown";
}
function _errorForResponse(status, bodyJSON, serializer2) {
  var code = codeForHTTPStatus(status);
  var description = code;
  var details = void 0;
  try {
    var errorJSON = bodyJSON && bodyJSON.error;
    if (errorJSON) {
      var status_1 = errorJSON.status;
      if (typeof status_1 === "string") {
        if (!errorCodeMap[status_1]) {
          return new HttpsErrorImpl("internal", "internal");
        }
        code = errorCodeMap[status_1];
        description = status_1;
      }
      var message = errorJSON.message;
      if (typeof message === "string") {
        description = message;
      }
      details = errorJSON.details;
      if (details !== void 0) {
        details = serializer2.decode(details);
      }
    }
  } catch (e) {
  }
  if (code === "ok") {
    return null;
  }
  return new HttpsErrorImpl(code, description, details);
}
var ContextProvider = function() {
  function ContextProvider2(authProvider, messagingProvider) {
    var _this = this;
    this.auth = null;
    this.messaging = null;
    this.auth = authProvider.getImmediate({ optional: true });
    this.messaging = messagingProvider.getImmediate({
      optional: true
    });
    if (!this.auth) {
      authProvider.get().then(function(auth) {
        return _this.auth = auth;
      }, function() {
      });
    }
    if (!this.messaging) {
      messagingProvider.get().then(function(messaging) {
        return _this.messaging = messaging;
      }, function() {
      });
    }
  }
  ContextProvider2.prototype.getAuthToken = function() {
    return __awaiter(this, void 0, void 0, function() {
      var token;
      return __generator(this, function(_a8) {
        switch (_a8.label) {
          case 0:
            if (!this.auth) {
              return [2, void 0];
            }
            _a8.label = 1;
          case 1:
            _a8.trys.push([1, 3, , 4]);
            return [4, this.auth.getToken()];
          case 2:
            token = _a8.sent();
            if (!token) {
              return [2, void 0];
            }
            return [2, token.accessToken];
          case 3:
            _a8.sent();
            return [2, void 0];
          case 4:
            return [2];
        }
      });
    });
  };
  ContextProvider2.prototype.getInstanceIdToken = function() {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(_a8) {
        switch (_a8.label) {
          case 0:
            if (!this.messaging || !("Notification" in self) || Notification.permission !== "granted") {
              return [2, void 0];
            }
            _a8.label = 1;
          case 1:
            _a8.trys.push([1, 3, , 4]);
            return [4, this.messaging.getToken()];
          case 2:
            return [2, _a8.sent()];
          case 3:
            _a8.sent();
            return [2, void 0];
          case 4:
            return [2];
        }
      });
    });
  };
  ContextProvider2.prototype.getContext = function() {
    return __awaiter(this, void 0, void 0, function() {
      var authToken, instanceIdToken;
      return __generator(this, function(_a8) {
        switch (_a8.label) {
          case 0:
            return [4, this.getAuthToken()];
          case 1:
            authToken = _a8.sent();
            return [4, this.getInstanceIdToken()];
          case 2:
            instanceIdToken = _a8.sent();
            return [2, { authToken, instanceIdToken }];
        }
      });
    });
  };
  return ContextProvider2;
}();
var LONG_TYPE = "type.googleapis.com/google.protobuf.Int64Value";
var UNSIGNED_LONG_TYPE = "type.googleapis.com/google.protobuf.UInt64Value";
function mapValues(o, f) {
  var result = {};
  for (var key in o) {
    if (o.hasOwnProperty(key)) {
      result[key] = f(o[key]);
    }
  }
  return result;
}
var Serializer = function() {
  function Serializer2() {
  }
  Serializer2.prototype.encode = function(data) {
    var _this = this;
    if (data == null) {
      return null;
    }
    if (data instanceof Number) {
      data = data.valueOf();
    }
    if (typeof data === "number" && isFinite(data)) {
      return data;
    }
    if (data === true || data === false) {
      return data;
    }
    if (Object.prototype.toString.call(data) === "[object String]") {
      return data;
    }
    if (data instanceof Date) {
      return data.toISOString();
    }
    if (Array.isArray(data)) {
      return data.map(function(x3) {
        return _this.encode(x3);
      });
    }
    if (typeof data === "function" || typeof data === "object") {
      return mapValues(data, function(x3) {
        return _this.encode(x3);
      });
    }
    throw new Error("Data cannot be encoded in JSON: " + data);
  };
  Serializer2.prototype.decode = function(json) {
    var _this = this;
    if (json == null) {
      return json;
    }
    if (json["@type"]) {
      switch (json["@type"]) {
        case LONG_TYPE:
        case UNSIGNED_LONG_TYPE: {
          var value = Number(json["value"]);
          if (isNaN(value)) {
            throw new Error("Data cannot be decoded from JSON: " + json);
          }
          return value;
        }
        default: {
          throw new Error("Data cannot be decoded from JSON: " + json);
        }
      }
    }
    if (Array.isArray(json)) {
      return json.map(function(x3) {
        return _this.decode(x3);
      });
    }
    if (typeof json === "function" || typeof json === "object") {
      return mapValues(json, function(x3) {
        return _this.decode(x3);
      });
    }
    return json;
  };
  return Serializer2;
}();
function failAfter(millis) {
  var timer;
  var promise = new Promise(function(_, reject) {
    timer = setTimeout(function() {
      reject(new HttpsErrorImpl("deadline-exceeded", "deadline-exceeded"));
    }, millis);
  });
  return {
    timer,
    promise
  };
}
var Service = function() {
  function Service2(app_, authProvider, messagingProvider, appCheckProvider, regionOrCustomDomain_, fetchImpl) {
    var _this = this;
    if (regionOrCustomDomain_ === void 0) {
      regionOrCustomDomain_ = "us-central1";
    }
    this.app_ = app_;
    this.appCheckProvider = appCheckProvider;
    this.fetchImpl = fetchImpl;
    this.serializer = new Serializer();
    this.emulatorOrigin = null;
    this.INTERNAL = {
      delete: function() {
        return Promise.resolve(_this.deleteService());
      }
    };
    this.contextProvider = new ContextProvider(authProvider, messagingProvider);
    this.cancelAllRequests = new Promise(function(resolve) {
      _this.deleteService = function() {
        return resolve();
      };
    });
    try {
      var url = new URL(regionOrCustomDomain_);
      this.customDomain = url.origin;
      this.region = "us-central1";
    } catch (e) {
      this.customDomain = null;
      this.region = regionOrCustomDomain_;
    }
  }
  Object.defineProperty(Service2.prototype, "app", {
    get: function() {
      return this.app_;
    },
    enumerable: false,
    configurable: true
  });
  Service2.prototype._url = function(name10) {
    var projectId = this.app_.options.projectId;
    if (this.emulatorOrigin !== null) {
      var origin_1 = this.emulatorOrigin;
      return origin_1 + "/" + projectId + "/" + this.region + "/" + name10;
    }
    if (this.customDomain !== null) {
      return this.customDomain + "/" + name10;
    }
    return "https://" + this.region + "-" + projectId + ".cloudfunctions.net/" + name10;
  };
  Service2.prototype.useEmulator = function(host, port) {
    this.emulatorOrigin = "http://" + host + ":" + port;
  };
  Service2.prototype.useFunctionsEmulator = function(origin) {
    this.emulatorOrigin = origin;
  };
  Service2.prototype.httpsCallable = function(name10, options) {
    var _this = this;
    return function(data) {
      return _this.call(name10, data, options || {});
    };
  };
  Service2.prototype.postJSON = function(url, body, headers) {
    return __awaiter(this, void 0, void 0, function() {
      var appCheckToken, response, json;
      return __generator(this, function(_a8) {
        switch (_a8.label) {
          case 0:
            headers["Content-Type"] = "application/json";
            return [4, this.getAppCheckToken()];
          case 1:
            appCheckToken = _a8.sent();
            if (appCheckToken !== null) {
              headers["X-Firebase-AppCheck"] = appCheckToken;
            }
            _a8.label = 2;
          case 2:
            _a8.trys.push([2, 4, , 5]);
            return [4, this.fetchImpl(url, {
              method: "POST",
              body: JSON.stringify(body),
              headers
            })];
          case 3:
            response = _a8.sent();
            return [3, 5];
          case 4:
            _a8.sent();
            return [2, {
              status: 0,
              json: null
            }];
          case 5:
            json = null;
            _a8.label = 6;
          case 6:
            _a8.trys.push([6, 8, , 9]);
            return [4, response.json()];
          case 7:
            json = _a8.sent();
            return [3, 9];
          case 8:
            _a8.sent();
            return [3, 9];
          case 9:
            return [2, {
              status: response.status,
              json
            }];
        }
      });
    });
  };
  Service2.prototype.getAppCheckToken = function() {
    return __awaiter(this, void 0, void 0, function() {
      var appCheck, result;
      return __generator(this, function(_a8) {
        switch (_a8.label) {
          case 0:
            appCheck = this.appCheckProvider.getImmediate({ optional: true });
            if (!appCheck)
              return [3, 2];
            return [4, appCheck.getToken()];
          case 1:
            result = _a8.sent();
            return [2, result.token];
          case 2:
            return [2, null];
        }
      });
    });
  };
  Service2.prototype.call = function(name10, data, options) {
    return __awaiter(this, void 0, void 0, function() {
      var url, body, headers, context, timeout, _a8, timer, failAfterPromise, response, error2, responseData, decodedData;
      return __generator(this, function(_b) {
        switch (_b.label) {
          case 0:
            url = this._url(name10);
            data = this.serializer.encode(data);
            body = { data };
            headers = {};
            return [4, this.contextProvider.getContext()];
          case 1:
            context = _b.sent();
            if (context.authToken) {
              headers["Authorization"] = "Bearer " + context.authToken;
            }
            if (context.instanceIdToken) {
              headers["Firebase-Instance-ID-Token"] = context.instanceIdToken;
            }
            timeout = options.timeout || 7e4;
            _a8 = failAfter(timeout), timer = _a8.timer, failAfterPromise = _a8.promise;
            return [4, Promise.race([
              clearTimeoutWrapper(timer, this.postJSON(url, body, headers)),
              failAfterPromise,
              clearTimeoutWrapper(timer, this.cancelAllRequests)
            ])];
          case 2:
            response = _b.sent();
            if (!response) {
              throw new HttpsErrorImpl("cancelled", "Firebase Functions instance was deleted.");
            }
            error2 = _errorForResponse(response.status, response.json, this.serializer);
            if (error2) {
              throw error2;
            }
            if (!response.json) {
              throw new HttpsErrorImpl("internal", "Response is not valid JSON object.");
            }
            responseData = response.json.data;
            if (typeof responseData === "undefined") {
              responseData = response.json.result;
            }
            if (typeof responseData === "undefined") {
              throw new HttpsErrorImpl("internal", "Response is missing data field.");
            }
            decodedData = this.serializer.decode(responseData);
            return [2, { data: decodedData }];
        }
      });
    });
  };
  return Service2;
}();
function clearTimeoutWrapper(timer, promise) {
  return __awaiter(this, void 0, void 0, function() {
    var result;
    return __generator(this, function(_a8) {
      switch (_a8.label) {
        case 0:
          return [4, promise];
        case 1:
          result = _a8.sent();
          clearTimeout(timer);
          return [2, result];
      }
    });
  });
}
var FUNCTIONS_TYPE = "functions";
function registerFunctions(instance, fetchImpl) {
  var namespaceExports = {
    Functions: Service
  };
  function factory4(container, _a8) {
    var regionOrCustomDomain = _a8.instanceIdentifier;
    var app = container.getProvider("app").getImmediate();
    var authProvider = container.getProvider("auth-internal");
    var appCheckProvider = container.getProvider("app-check-internal");
    var messagingProvider = container.getProvider("messaging");
    return new Service(app, authProvider, messagingProvider, appCheckProvider, regionOrCustomDomain, fetchImpl);
  }
  instance.INTERNAL.registerComponent(new Component(FUNCTIONS_TYPE, factory4, "PUBLIC").setServiceProps(namespaceExports).setMultipleInstances(true));
}
var name2 = "@firebase/functions";
var version2 = "0.6.15";
registerFunctions(index_esm_default, fetch.bind(self));
index_esm_default.registerVersion(name2, version2);

// node_modules/idb/lib/idb.mjs
function toArray(arr) {
  return Array.prototype.slice.call(arr);
}
function promisifyRequest(request) {
  return new Promise(function(resolve, reject) {
    request.onsuccess = function() {
      resolve(request.result);
    };
    request.onerror = function() {
      reject(request.error);
    };
  });
}
function promisifyRequestCall(obj, method, args) {
  var request;
  var p2 = new Promise(function(resolve, reject) {
    request = obj[method].apply(obj, args);
    promisifyRequest(request).then(resolve, reject);
  });
  p2.request = request;
  return p2;
}
function promisifyCursorRequestCall(obj, method, args) {
  var p2 = promisifyRequestCall(obj, method, args);
  return p2.then(function(value) {
    if (!value)
      return;
    return new Cursor(value, p2.request);
  });
}
function proxyProperties(ProxyClass, targetProp, properties) {
  properties.forEach(function(prop) {
    Object.defineProperty(ProxyClass.prototype, prop, {
      get: function() {
        return this[targetProp][prop];
      },
      set: function(val) {
        this[targetProp][prop] = val;
      }
    });
  });
}
function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {
  properties.forEach(function(prop) {
    if (!(prop in Constructor.prototype))
      return;
    ProxyClass.prototype[prop] = function() {
      return promisifyRequestCall(this[targetProp], prop, arguments);
    };
  });
}
function proxyMethods(ProxyClass, targetProp, Constructor, properties) {
  properties.forEach(function(prop) {
    if (!(prop in Constructor.prototype))
      return;
    ProxyClass.prototype[prop] = function() {
      return this[targetProp][prop].apply(this[targetProp], arguments);
    };
  });
}
function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {
  properties.forEach(function(prop) {
    if (!(prop in Constructor.prototype))
      return;
    ProxyClass.prototype[prop] = function() {
      return promisifyCursorRequestCall(this[targetProp], prop, arguments);
    };
  });
}
function Index2(index) {
  this._index = index;
}
proxyProperties(Index2, "_index", [
  "name",
  "keyPath",
  "multiEntry",
  "unique"
]);
proxyRequestMethods(Index2, "_index", IDBIndex, [
  "get",
  "getKey",
  "getAll",
  "getAllKeys",
  "count"
]);
proxyCursorRequestMethods(Index2, "_index", IDBIndex, [
  "openCursor",
  "openKeyCursor"
]);
function Cursor(cursor, request) {
  this._cursor = cursor;
  this._request = request;
}
proxyProperties(Cursor, "_cursor", [
  "direction",
  "key",
  "primaryKey",
  "value"
]);
proxyRequestMethods(Cursor, "_cursor", IDBCursor, [
  "update",
  "delete"
]);
["advance", "continue", "continuePrimaryKey"].forEach(function(methodName) {
  if (!(methodName in IDBCursor.prototype))
    return;
  Cursor.prototype[methodName] = function() {
    var cursor = this;
    var args = arguments;
    return Promise.resolve().then(function() {
      cursor._cursor[methodName].apply(cursor._cursor, args);
      return promisifyRequest(cursor._request).then(function(value) {
        if (!value)
          return;
        return new Cursor(value, cursor._request);
      });
    });
  };
});
function ObjectStore(store) {
  this._store = store;
}
ObjectStore.prototype.createIndex = function() {
  return new Index2(this._store.createIndex.apply(this._store, arguments));
};
ObjectStore.prototype.index = function() {
  return new Index2(this._store.index.apply(this._store, arguments));
};
proxyProperties(ObjectStore, "_store", [
  "name",
  "keyPath",
  "indexNames",
  "autoIncrement"
]);
proxyRequestMethods(ObjectStore, "_store", IDBObjectStore, [
  "put",
  "add",
  "delete",
  "clear",
  "get",
  "getAll",
  "getKey",
  "getAllKeys",
  "count"
]);
proxyCursorRequestMethods(ObjectStore, "_store", IDBObjectStore, [
  "openCursor",
  "openKeyCursor"
]);
proxyMethods(ObjectStore, "_store", IDBObjectStore, [
  "deleteIndex"
]);
function Transaction(idbTransaction) {
  this._tx = idbTransaction;
  this.complete = new Promise(function(resolve, reject) {
    idbTransaction.oncomplete = function() {
      resolve();
    };
    idbTransaction.onerror = function() {
      reject(idbTransaction.error);
    };
    idbTransaction.onabort = function() {
      reject(idbTransaction.error);
    };
  });
}
Transaction.prototype.objectStore = function() {
  return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));
};
proxyProperties(Transaction, "_tx", [
  "objectStoreNames",
  "mode"
]);
proxyMethods(Transaction, "_tx", IDBTransaction, [
  "abort"
]);
function UpgradeDB(db2, oldVersion, transaction) {
  this._db = db2;
  this.oldVersion = oldVersion;
  this.transaction = new Transaction(transaction);
}
UpgradeDB.prototype.createObjectStore = function() {
  return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));
};
proxyProperties(UpgradeDB, "_db", [
  "name",
  "version",
  "objectStoreNames"
]);
proxyMethods(UpgradeDB, "_db", IDBDatabase, [
  "deleteObjectStore",
  "close"
]);
function DB(db2) {
  this._db = db2;
}
DB.prototype.transaction = function() {
  return new Transaction(this._db.transaction.apply(this._db, arguments));
};
proxyProperties(DB, "_db", [
  "name",
  "version",
  "objectStoreNames"
]);
proxyMethods(DB, "_db", IDBDatabase, [
  "close"
]);
["openCursor", "openKeyCursor"].forEach(function(funcName) {
  [ObjectStore, Index2].forEach(function(Constructor) {
    if (!(funcName in Constructor.prototype))
      return;
    Constructor.prototype[funcName.replace("open", "iterate")] = function() {
      var args = toArray(arguments);
      var callback = args[args.length - 1];
      var nativeObject = this._store || this._index;
      var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));
      request.onsuccess = function() {
        callback(request.result);
      };
    };
  });
});
[Index2, ObjectStore].forEach(function(Constructor) {
  if (Constructor.prototype.getAll)
    return;
  Constructor.prototype.getAll = function(query2, count) {
    var instance = this;
    var items = [];
    return new Promise(function(resolve) {
      instance.iterateCursor(query2, function(cursor) {
        if (!cursor) {
          resolve(items);
          return;
        }
        items.push(cursor.value);
        if (count !== void 0 && items.length == count) {
          resolve(items);
          return;
        }
        cursor.continue();
      });
    });
  };
});
function openDb(name10, version10, upgradeCallback) {
  var p2 = promisifyRequestCall(indexedDB, "open", [name10, version10]);
  var request = p2.request;
  if (request) {
    request.onupgradeneeded = function(event) {
      if (upgradeCallback) {
        upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));
      }
    };
  }
  return p2.then(function(db2) {
    return new DB(db2);
  });
}
function deleteDb(name10) {
  return promisifyRequestCall(indexedDB, "deleteDatabase", [name10]);
}

// node_modules/@firebase/installations/dist/index.esm.js
var name3 = "@firebase/installations";
var version3 = "0.4.32";
var PENDING_TIMEOUT_MS = 1e4;
var PACKAGE_VERSION = "w:" + version3;
var INTERNAL_AUTH_VERSION = "FIS_v2";
var INSTALLATIONS_API_URL = "https://firebaseinstallations.googleapis.com/v1";
var TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1e3;
var SERVICE = "installations";
var SERVICE_NAME = "Installations";
var _a2;
var ERROR_DESCRIPTION_MAP = (_a2 = {}, _a2["missing-app-config-values"] = 'Missing App configuration value: "{$valueName}"', _a2["not-registered"] = "Firebase Installation is not registered.", _a2["installation-not-found"] = "Firebase Installation not found.", _a2["request-failed"] = '{$requestName} request failed with error "{$serverCode} {$serverStatus}: {$serverMessage}"', _a2["app-offline"] = "Could not process request. Application offline.", _a2["delete-pending-registration"] = "Can't delete installation while there is a pending registration request.", _a2);
var ERROR_FACTORY = new ErrorFactory(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP);
function isServerError(error2) {
  return error2 instanceof FirebaseError && error2.code.includes("request-failed");
}
function getInstallationsEndpoint(_a8) {
  var projectId = _a8.projectId;
  return INSTALLATIONS_API_URL + "/projects/" + projectId + "/installations";
}
function extractAuthTokenInfoFromResponse(response) {
  return {
    token: response.token,
    requestStatus: 2,
    expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),
    creationTime: Date.now()
  };
}
function getErrorFromResponse(requestName, response) {
  return __awaiter(this, void 0, void 0, function() {
    var responseJson, errorData;
    return __generator(this, function(_a8) {
      switch (_a8.label) {
        case 0:
          return [4, response.json()];
        case 1:
          responseJson = _a8.sent();
          errorData = responseJson.error;
          return [2, ERROR_FACTORY.create("request-failed", {
            requestName,
            serverCode: errorData.code,
            serverMessage: errorData.message,
            serverStatus: errorData.status
          })];
      }
    });
  });
}
function getHeaders(_a8) {
  var apiKey = _a8.apiKey;
  return new Headers({
    "Content-Type": "application/json",
    Accept: "application/json",
    "x-goog-api-key": apiKey
  });
}
function getHeadersWithAuth(appConfig, _a8) {
  var refreshToken = _a8.refreshToken;
  var headers = getHeaders(appConfig);
  headers.append("Authorization", getAuthorizationHeader(refreshToken));
  return headers;
}
function retryIfServerError(fn2) {
  return __awaiter(this, void 0, void 0, function() {
    var result;
    return __generator(this, function(_a8) {
      switch (_a8.label) {
        case 0:
          return [4, fn2()];
        case 1:
          result = _a8.sent();
          if (result.status >= 500 && result.status < 600) {
            return [2, fn2()];
          }
          return [2, result];
      }
    });
  });
}
function getExpiresInFromResponseExpiresIn(responseExpiresIn) {
  return Number(responseExpiresIn.replace("s", "000"));
}
function getAuthorizationHeader(refreshToken) {
  return INTERNAL_AUTH_VERSION + " " + refreshToken;
}
function createInstallationRequest(appConfig, _a8) {
  var fid = _a8.fid;
  return __awaiter(this, void 0, void 0, function() {
    var endpoint, headers, body, request, response, responseValue, registeredInstallationEntry;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          endpoint = getInstallationsEndpoint(appConfig);
          headers = getHeaders(appConfig);
          body = {
            fid,
            authVersion: INTERNAL_AUTH_VERSION,
            appId: appConfig.appId,
            sdkVersion: PACKAGE_VERSION
          };
          request = {
            method: "POST",
            headers,
            body: JSON.stringify(body)
          };
          return [4, retryIfServerError(function() {
            return fetch(endpoint, request);
          })];
        case 1:
          response = _b.sent();
          if (!response.ok)
            return [3, 3];
          return [4, response.json()];
        case 2:
          responseValue = _b.sent();
          registeredInstallationEntry = {
            fid: responseValue.fid || fid,
            registrationStatus: 2,
            refreshToken: responseValue.refreshToken,
            authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)
          };
          return [2, registeredInstallationEntry];
        case 3:
          return [4, getErrorFromResponse("Create Installation", response)];
        case 4:
          throw _b.sent();
      }
    });
  });
}
function sleep(ms2) {
  return new Promise(function(resolve) {
    setTimeout(resolve, ms2);
  });
}
function bufferToBase64UrlSafe(array) {
  var b64 = btoa(String.fromCharCode.apply(String, __spreadArray([], __read(array))));
  return b64.replace(/\+/g, "-").replace(/\//g, "_");
}
var VALID_FID_PATTERN = /^[cdef][\w-]{21}$/;
var INVALID_FID = "";
function generateFid() {
  try {
    var fidByteArray = new Uint8Array(17);
    var crypto_1 = self.crypto || self.msCrypto;
    crypto_1.getRandomValues(fidByteArray);
    fidByteArray[0] = 112 + fidByteArray[0] % 16;
    var fid = encode(fidByteArray);
    return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;
  } catch (_a8) {
    return INVALID_FID;
  }
}
function encode(fidByteArray) {
  var b64String = bufferToBase64UrlSafe(fidByteArray);
  return b64String.substr(0, 22);
}
function getKey(appConfig) {
  return appConfig.appName + "!" + appConfig.appId;
}
var fidChangeCallbacks = new Map();
function fidChanged(appConfig, fid) {
  var key = getKey(appConfig);
  callFidChangeCallbacks(key, fid);
  broadcastFidChange(key, fid);
}
function addCallback(appConfig, callback) {
  getBroadcastChannel();
  var key = getKey(appConfig);
  var callbackSet = fidChangeCallbacks.get(key);
  if (!callbackSet) {
    callbackSet = new Set();
    fidChangeCallbacks.set(key, callbackSet);
  }
  callbackSet.add(callback);
}
function removeCallback(appConfig, callback) {
  var key = getKey(appConfig);
  var callbackSet = fidChangeCallbacks.get(key);
  if (!callbackSet) {
    return;
  }
  callbackSet.delete(callback);
  if (callbackSet.size === 0) {
    fidChangeCallbacks.delete(key);
  }
  closeBroadcastChannel();
}
function callFidChangeCallbacks(key, fid) {
  var e_1, _a8;
  var callbacks = fidChangeCallbacks.get(key);
  if (!callbacks) {
    return;
  }
  try {
    for (var callbacks_1 = __values(callbacks), callbacks_1_1 = callbacks_1.next(); !callbacks_1_1.done; callbacks_1_1 = callbacks_1.next()) {
      var callback = callbacks_1_1.value;
      callback(fid);
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (callbacks_1_1 && !callbacks_1_1.done && (_a8 = callbacks_1.return))
        _a8.call(callbacks_1);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
}
function broadcastFidChange(key, fid) {
  var channel = getBroadcastChannel();
  if (channel) {
    channel.postMessage({ key, fid });
  }
  closeBroadcastChannel();
}
var broadcastChannel = null;
function getBroadcastChannel() {
  if (!broadcastChannel && "BroadcastChannel" in self) {
    broadcastChannel = new BroadcastChannel("[Firebase] FID Change");
    broadcastChannel.onmessage = function(e) {
      callFidChangeCallbacks(e.data.key, e.data.fid);
    };
  }
  return broadcastChannel;
}
function closeBroadcastChannel() {
  if (fidChangeCallbacks.size === 0 && broadcastChannel) {
    broadcastChannel.close();
    broadcastChannel = null;
  }
}
var DATABASE_NAME = "firebase-installations-database";
var DATABASE_VERSION = 1;
var OBJECT_STORE_NAME = "firebase-installations-store";
var dbPromise = null;
function getDbPromise() {
  if (!dbPromise) {
    dbPromise = openDb(DATABASE_NAME, DATABASE_VERSION, function(upgradeDB) {
      switch (upgradeDB.oldVersion) {
        case 0:
          upgradeDB.createObjectStore(OBJECT_STORE_NAME);
      }
    });
  }
  return dbPromise;
}
function set2(appConfig, value) {
  return __awaiter(this, void 0, void 0, function() {
    var key, db2, tx, objectStore, oldValue;
    return __generator(this, function(_a8) {
      switch (_a8.label) {
        case 0:
          key = getKey(appConfig);
          return [4, getDbPromise()];
        case 1:
          db2 = _a8.sent();
          tx = db2.transaction(OBJECT_STORE_NAME, "readwrite");
          objectStore = tx.objectStore(OBJECT_STORE_NAME);
          return [4, objectStore.get(key)];
        case 2:
          oldValue = _a8.sent();
          return [4, objectStore.put(value, key)];
        case 3:
          _a8.sent();
          return [4, tx.complete];
        case 4:
          _a8.sent();
          if (!oldValue || oldValue.fid !== value.fid) {
            fidChanged(appConfig, value.fid);
          }
          return [2, value];
      }
    });
  });
}
function remove2(appConfig) {
  return __awaiter(this, void 0, void 0, function() {
    var key, db2, tx;
    return __generator(this, function(_a8) {
      switch (_a8.label) {
        case 0:
          key = getKey(appConfig);
          return [4, getDbPromise()];
        case 1:
          db2 = _a8.sent();
          tx = db2.transaction(OBJECT_STORE_NAME, "readwrite");
          return [4, tx.objectStore(OBJECT_STORE_NAME).delete(key)];
        case 2:
          _a8.sent();
          return [4, tx.complete];
        case 3:
          _a8.sent();
          return [2];
      }
    });
  });
}
function update2(appConfig, updateFn) {
  return __awaiter(this, void 0, void 0, function() {
    var key, db2, tx, store, oldValue, newValue;
    return __generator(this, function(_a8) {
      switch (_a8.label) {
        case 0:
          key = getKey(appConfig);
          return [4, getDbPromise()];
        case 1:
          db2 = _a8.sent();
          tx = db2.transaction(OBJECT_STORE_NAME, "readwrite");
          store = tx.objectStore(OBJECT_STORE_NAME);
          return [4, store.get(key)];
        case 2:
          oldValue = _a8.sent();
          newValue = updateFn(oldValue);
          if (!(newValue === void 0))
            return [3, 4];
          return [4, store.delete(key)];
        case 3:
          _a8.sent();
          return [3, 6];
        case 4:
          return [4, store.put(newValue, key)];
        case 5:
          _a8.sent();
          _a8.label = 6;
        case 6:
          return [4, tx.complete];
        case 7:
          _a8.sent();
          if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) {
            fidChanged(appConfig, newValue.fid);
          }
          return [2, newValue];
      }
    });
  });
}
function getInstallationEntry(appConfig) {
  return __awaiter(this, void 0, void 0, function() {
    var registrationPromise, installationEntry;
    var _a8;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          return [4, update2(appConfig, function(oldEntry) {
            var installationEntry2 = updateOrCreateInstallationEntry(oldEntry);
            var entryWithPromise = triggerRegistrationIfNecessary(appConfig, installationEntry2);
            registrationPromise = entryWithPromise.registrationPromise;
            return entryWithPromise.installationEntry;
          })];
        case 1:
          installationEntry = _b.sent();
          if (!(installationEntry.fid === INVALID_FID))
            return [3, 3];
          _a8 = {};
          return [4, registrationPromise];
        case 2:
          return [2, (_a8.installationEntry = _b.sent(), _a8)];
        case 3:
          return [2, {
            installationEntry,
            registrationPromise
          }];
      }
    });
  });
}
function updateOrCreateInstallationEntry(oldEntry) {
  var entry = oldEntry || {
    fid: generateFid(),
    registrationStatus: 0
  };
  return clearTimedOutRequest(entry);
}
function triggerRegistrationIfNecessary(appConfig, installationEntry) {
  if (installationEntry.registrationStatus === 0) {
    if (!navigator.onLine) {
      var registrationPromiseWithError = Promise.reject(ERROR_FACTORY.create("app-offline"));
      return {
        installationEntry,
        registrationPromise: registrationPromiseWithError
      };
    }
    var inProgressEntry = {
      fid: installationEntry.fid,
      registrationStatus: 1,
      registrationTime: Date.now()
    };
    var registrationPromise = registerInstallation(appConfig, inProgressEntry);
    return { installationEntry: inProgressEntry, registrationPromise };
  } else if (installationEntry.registrationStatus === 1) {
    return {
      installationEntry,
      registrationPromise: waitUntilFidRegistration(appConfig)
    };
  } else {
    return { installationEntry };
  }
}
function registerInstallation(appConfig, installationEntry) {
  return __awaiter(this, void 0, void 0, function() {
    var registeredInstallationEntry, e_1;
    return __generator(this, function(_a8) {
      switch (_a8.label) {
        case 0:
          _a8.trys.push([0, 2, , 7]);
          return [4, createInstallationRequest(appConfig, installationEntry)];
        case 1:
          registeredInstallationEntry = _a8.sent();
          return [2, set2(appConfig, registeredInstallationEntry)];
        case 2:
          e_1 = _a8.sent();
          if (!(isServerError(e_1) && e_1.customData.serverCode === 409))
            return [3, 4];
          return [4, remove2(appConfig)];
        case 3:
          _a8.sent();
          return [3, 6];
        case 4:
          return [4, set2(appConfig, {
            fid: installationEntry.fid,
            registrationStatus: 0
          })];
        case 5:
          _a8.sent();
          _a8.label = 6;
        case 6:
          throw e_1;
        case 7:
          return [2];
      }
    });
  });
}
function waitUntilFidRegistration(appConfig) {
  return __awaiter(this, void 0, void 0, function() {
    var entry, _a8, installationEntry, registrationPromise;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          return [4, updateInstallationRequest(appConfig)];
        case 1:
          entry = _b.sent();
          _b.label = 2;
        case 2:
          if (!(entry.registrationStatus === 1))
            return [3, 5];
          return [4, sleep(100)];
        case 3:
          _b.sent();
          return [4, updateInstallationRequest(appConfig)];
        case 4:
          entry = _b.sent();
          return [3, 2];
        case 5:
          if (!(entry.registrationStatus === 0))
            return [3, 7];
          return [4, getInstallationEntry(appConfig)];
        case 6:
          _a8 = _b.sent(), installationEntry = _a8.installationEntry, registrationPromise = _a8.registrationPromise;
          if (registrationPromise) {
            return [2, registrationPromise];
          } else {
            return [2, installationEntry];
          }
        case 7:
          return [2, entry];
      }
    });
  });
}
function updateInstallationRequest(appConfig) {
  return update2(appConfig, function(oldEntry) {
    if (!oldEntry) {
      throw ERROR_FACTORY.create("installation-not-found");
    }
    return clearTimedOutRequest(oldEntry);
  });
}
function clearTimedOutRequest(entry) {
  if (hasInstallationRequestTimedOut(entry)) {
    return {
      fid: entry.fid,
      registrationStatus: 0
    };
  }
  return entry;
}
function hasInstallationRequestTimedOut(installationEntry) {
  return installationEntry.registrationStatus === 1 && installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now();
}
function generateAuthTokenRequest(_a8, installationEntry) {
  var appConfig = _a8.appConfig, platformLoggerProvider = _a8.platformLoggerProvider;
  return __awaiter(this, void 0, void 0, function() {
    var endpoint, headers, platformLogger, body, request, response, responseValue, completedAuthToken;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);
          headers = getHeadersWithAuth(appConfig, installationEntry);
          platformLogger = platformLoggerProvider.getImmediate({
            optional: true
          });
          if (platformLogger) {
            headers.append("x-firebase-client", platformLogger.getPlatformInfoString());
          }
          body = {
            installation: {
              sdkVersion: PACKAGE_VERSION
            }
          };
          request = {
            method: "POST",
            headers,
            body: JSON.stringify(body)
          };
          return [4, retryIfServerError(function() {
            return fetch(endpoint, request);
          })];
        case 1:
          response = _b.sent();
          if (!response.ok)
            return [3, 3];
          return [4, response.json()];
        case 2:
          responseValue = _b.sent();
          completedAuthToken = extractAuthTokenInfoFromResponse(responseValue);
          return [2, completedAuthToken];
        case 3:
          return [4, getErrorFromResponse("Generate Auth Token", response)];
        case 4:
          throw _b.sent();
      }
    });
  });
}
function getGenerateAuthTokenEndpoint(appConfig, _a8) {
  var fid = _a8.fid;
  return getInstallationsEndpoint(appConfig) + "/" + fid + "/authTokens:generate";
}
function refreshAuthToken(dependencies, forceRefresh) {
  if (forceRefresh === void 0) {
    forceRefresh = false;
  }
  return __awaiter(this, void 0, void 0, function() {
    var tokenPromise, entry, authToken, _a8;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          return [4, update2(dependencies.appConfig, function(oldEntry) {
            if (!isEntryRegistered(oldEntry)) {
              throw ERROR_FACTORY.create("not-registered");
            }
            var oldAuthToken = oldEntry.authToken;
            if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {
              return oldEntry;
            } else if (oldAuthToken.requestStatus === 1) {
              tokenPromise = waitUntilAuthTokenRequest(dependencies, forceRefresh);
              return oldEntry;
            } else {
              if (!navigator.onLine) {
                throw ERROR_FACTORY.create("app-offline");
              }
              var inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);
              tokenPromise = fetchAuthTokenFromServer(dependencies, inProgressEntry);
              return inProgressEntry;
            }
          })];
        case 1:
          entry = _b.sent();
          if (!tokenPromise)
            return [3, 3];
          return [4, tokenPromise];
        case 2:
          _a8 = _b.sent();
          return [3, 4];
        case 3:
          _a8 = entry.authToken;
          _b.label = 4;
        case 4:
          authToken = _a8;
          return [2, authToken];
      }
    });
  });
}
function waitUntilAuthTokenRequest(dependencies, forceRefresh) {
  return __awaiter(this, void 0, void 0, function() {
    var entry, authToken;
    return __generator(this, function(_a8) {
      switch (_a8.label) {
        case 0:
          return [4, updateAuthTokenRequest(dependencies.appConfig)];
        case 1:
          entry = _a8.sent();
          _a8.label = 2;
        case 2:
          if (!(entry.authToken.requestStatus === 1))
            return [3, 5];
          return [4, sleep(100)];
        case 3:
          _a8.sent();
          return [4, updateAuthTokenRequest(dependencies.appConfig)];
        case 4:
          entry = _a8.sent();
          return [3, 2];
        case 5:
          authToken = entry.authToken;
          if (authToken.requestStatus === 0) {
            return [2, refreshAuthToken(dependencies, forceRefresh)];
          } else {
            return [2, authToken];
          }
      }
    });
  });
}
function updateAuthTokenRequest(appConfig) {
  return update2(appConfig, function(oldEntry) {
    if (!isEntryRegistered(oldEntry)) {
      throw ERROR_FACTORY.create("not-registered");
    }
    var oldAuthToken = oldEntry.authToken;
    if (hasAuthTokenRequestTimedOut(oldAuthToken)) {
      return __assign(__assign({}, oldEntry), { authToken: { requestStatus: 0 } });
    }
    return oldEntry;
  });
}
function fetchAuthTokenFromServer(dependencies, installationEntry) {
  return __awaiter(this, void 0, void 0, function() {
    var authToken, updatedInstallationEntry, e_1, updatedInstallationEntry;
    return __generator(this, function(_a8) {
      switch (_a8.label) {
        case 0:
          _a8.trys.push([0, 3, , 8]);
          return [4, generateAuthTokenRequest(dependencies, installationEntry)];
        case 1:
          authToken = _a8.sent();
          updatedInstallationEntry = __assign(__assign({}, installationEntry), { authToken });
          return [4, set2(dependencies.appConfig, updatedInstallationEntry)];
        case 2:
          _a8.sent();
          return [2, authToken];
        case 3:
          e_1 = _a8.sent();
          if (!(isServerError(e_1) && (e_1.customData.serverCode === 401 || e_1.customData.serverCode === 404)))
            return [3, 5];
          return [4, remove2(dependencies.appConfig)];
        case 4:
          _a8.sent();
          return [3, 7];
        case 5:
          updatedInstallationEntry = __assign(__assign({}, installationEntry), { authToken: { requestStatus: 0 } });
          return [4, set2(dependencies.appConfig, updatedInstallationEntry)];
        case 6:
          _a8.sent();
          _a8.label = 7;
        case 7:
          throw e_1;
        case 8:
          return [2];
      }
    });
  });
}
function isEntryRegistered(installationEntry) {
  return installationEntry !== void 0 && installationEntry.registrationStatus === 2;
}
function isAuthTokenValid(authToken) {
  return authToken.requestStatus === 2 && !isAuthTokenExpired(authToken);
}
function isAuthTokenExpired(authToken) {
  var now = Date.now();
  return now < authToken.creationTime || authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER;
}
function makeAuthTokenRequestInProgressEntry(oldEntry) {
  var inProgressAuthToken = {
    requestStatus: 1,
    requestTime: Date.now()
  };
  return __assign(__assign({}, oldEntry), { authToken: inProgressAuthToken });
}
function hasAuthTokenRequestTimedOut(authToken) {
  return authToken.requestStatus === 1 && authToken.requestTime + PENDING_TIMEOUT_MS < Date.now();
}
function getId(dependencies) {
  return __awaiter(this, void 0, void 0, function() {
    var _a8, installationEntry, registrationPromise;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          return [4, getInstallationEntry(dependencies.appConfig)];
        case 1:
          _a8 = _b.sent(), installationEntry = _a8.installationEntry, registrationPromise = _a8.registrationPromise;
          if (registrationPromise) {
            registrationPromise.catch(console.error);
          } else {
            refreshAuthToken(dependencies).catch(console.error);
          }
          return [2, installationEntry.fid];
      }
    });
  });
}
function getToken(dependencies, forceRefresh) {
  if (forceRefresh === void 0) {
    forceRefresh = false;
  }
  return __awaiter(this, void 0, void 0, function() {
    var authToken;
    return __generator(this, function(_a8) {
      switch (_a8.label) {
        case 0:
          return [4, completeInstallationRegistration(dependencies.appConfig)];
        case 1:
          _a8.sent();
          return [4, refreshAuthToken(dependencies, forceRefresh)];
        case 2:
          authToken = _a8.sent();
          return [2, authToken.token];
      }
    });
  });
}
function completeInstallationRegistration(appConfig) {
  return __awaiter(this, void 0, void 0, function() {
    var registrationPromise;
    return __generator(this, function(_a8) {
      switch (_a8.label) {
        case 0:
          return [4, getInstallationEntry(appConfig)];
        case 1:
          registrationPromise = _a8.sent().registrationPromise;
          if (!registrationPromise)
            return [3, 3];
          return [4, registrationPromise];
        case 2:
          _a8.sent();
          _a8.label = 3;
        case 3:
          return [2];
      }
    });
  });
}
function deleteInstallationRequest(appConfig, installationEntry) {
  return __awaiter(this, void 0, void 0, function() {
    var endpoint, headers, request, response;
    return __generator(this, function(_a8) {
      switch (_a8.label) {
        case 0:
          endpoint = getDeleteEndpoint(appConfig, installationEntry);
          headers = getHeadersWithAuth(appConfig, installationEntry);
          request = {
            method: "DELETE",
            headers
          };
          return [4, retryIfServerError(function() {
            return fetch(endpoint, request);
          })];
        case 1:
          response = _a8.sent();
          if (!!response.ok)
            return [3, 3];
          return [4, getErrorFromResponse("Delete Installation", response)];
        case 2:
          throw _a8.sent();
        case 3:
          return [2];
      }
    });
  });
}
function getDeleteEndpoint(appConfig, _a8) {
  var fid = _a8.fid;
  return getInstallationsEndpoint(appConfig) + "/" + fid;
}
function deleteInstallation(dependencies) {
  return __awaiter(this, void 0, void 0, function() {
    var appConfig, entry;
    return __generator(this, function(_a8) {
      switch (_a8.label) {
        case 0:
          appConfig = dependencies.appConfig;
          return [4, update2(appConfig, function(oldEntry) {
            if (oldEntry && oldEntry.registrationStatus === 0) {
              return void 0;
            }
            return oldEntry;
          })];
        case 1:
          entry = _a8.sent();
          if (!entry)
            return [3, 6];
          if (!(entry.registrationStatus === 1))
            return [3, 2];
          throw ERROR_FACTORY.create("delete-pending-registration");
        case 2:
          if (!(entry.registrationStatus === 2))
            return [3, 6];
          if (!!navigator.onLine)
            return [3, 3];
          throw ERROR_FACTORY.create("app-offline");
        case 3:
          return [4, deleteInstallationRequest(appConfig, entry)];
        case 4:
          _a8.sent();
          return [4, remove2(appConfig)];
        case 5:
          _a8.sent();
          _a8.label = 6;
        case 6:
          return [2];
      }
    });
  });
}
function onIdChange(_a8, callback) {
  var appConfig = _a8.appConfig;
  addCallback(appConfig, callback);
  return function() {
    removeCallback(appConfig, callback);
  };
}
function extractAppConfig(app) {
  var e_1, _a8;
  if (!app || !app.options) {
    throw getMissingValueError("App Configuration");
  }
  if (!app.name) {
    throw getMissingValueError("App Name");
  }
  var configKeys = [
    "projectId",
    "apiKey",
    "appId"
  ];
  try {
    for (var configKeys_1 = __values(configKeys), configKeys_1_1 = configKeys_1.next(); !configKeys_1_1.done; configKeys_1_1 = configKeys_1.next()) {
      var keyName = configKeys_1_1.value;
      if (!app.options[keyName]) {
        throw getMissingValueError(keyName);
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (configKeys_1_1 && !configKeys_1_1.done && (_a8 = configKeys_1.return))
        _a8.call(configKeys_1);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return {
    appName: app.name,
    projectId: app.options.projectId,
    apiKey: app.options.apiKey,
    appId: app.options.appId
  };
}
function getMissingValueError(valueName) {
  return ERROR_FACTORY.create("missing-app-config-values", {
    valueName
  });
}
function registerInstallations(instance) {
  var installationsName = "installations";
  instance.INTERNAL.registerComponent(new Component(installationsName, function(container) {
    var app = container.getProvider("app").getImmediate();
    var appConfig = extractAppConfig(app);
    var platformLoggerProvider = container.getProvider("platform-logger");
    var dependencies = {
      appConfig,
      platformLoggerProvider
    };
    var installations = {
      app,
      getId: function() {
        return getId(dependencies);
      },
      getToken: function(forceRefresh) {
        return getToken(dependencies, forceRefresh);
      },
      delete: function() {
        return deleteInstallation(dependencies);
      },
      onIdChange: function(callback) {
        return onIdChange(dependencies, callback);
      }
    };
    return installations;
  }, "PUBLIC"));
  instance.registerVersion(name3, version3);
}
registerInstallations(index_esm_default);

// node_modules/@firebase/messaging/dist/index.esm.js
var _a3;
var ERROR_MAP = (_a3 = {}, _a3["missing-app-config-values"] = 'Missing App configuration value: "{$valueName}"', _a3["only-available-in-window"] = "This method is available in a Window context.", _a3["only-available-in-sw"] = "This method is available in a service worker context.", _a3["permission-default"] = "The notification permission was not granted and dismissed instead.", _a3["permission-blocked"] = "The notification permission was not granted and blocked instead.", _a3["unsupported-browser"] = "This browser doesn't support the API's required to use the firebase SDK.", _a3["failed-service-worker-registration"] = "We are unable to register the default service worker. {$browserErrorMessage}", _a3["token-subscribe-failed"] = "A problem occurred while subscribing the user to FCM: {$errorInfo}", _a3["token-subscribe-no-token"] = "FCM returned no token when subscribing the user to push.", _a3["token-unsubscribe-failed"] = "A problem occurred while unsubscribing the user from FCM: {$errorInfo}", _a3["token-update-failed"] = "A problem occurred while updating the user from FCM: {$errorInfo}", _a3["token-update-no-token"] = "FCM returned no token when updating the user to push.", _a3["use-sw-after-get-token"] = "The useServiceWorker() method may only be called once and must be called before calling getToken() to ensure your service worker is used.", _a3["invalid-sw-registration"] = "The input to useServiceWorker() must be a ServiceWorkerRegistration.", _a3["invalid-bg-handler"] = "The input to setBackgroundMessageHandler() must be a function.", _a3["invalid-vapid-key"] = "The public VAPID key must be a string.", _a3["use-vapid-key-after-get-token"] = "The usePublicVapidKey() method may only be called once and must be called before calling getToken() to ensure your VAPID key is used.", _a3);
var ERROR_FACTORY2 = new ErrorFactory("messaging", "Messaging", ERROR_MAP);
var DEFAULT_SW_PATH = "/firebase-messaging-sw.js";
var DEFAULT_SW_SCOPE = "/firebase-cloud-messaging-push-scope";
var DEFAULT_VAPID_KEY = "BDOU99-h67HcA6JeFXHbSNMu7e2yNNu3RzoMj8TM4W88jITfq7ZmPvIM1Iv-4_l2LxQcYwhqby2xGpWwzjfAnG4";
var ENDPOINT = "https://fcmregistrations.googleapis.com/v1";
var FCM_MSG = "FCM_MSG";
var TAG = "FirebaseMessaging: ";
var CONSOLE_CAMPAIGN_ANALYTICS_ENABLED = "google.c.a.e";
var CONSOLE_CAMPAIGN_ID = "google.c.a.c_id";
var CONSOLE_CAMPAIGN_TIME = "google.c.a.ts";
var CONSOLE_CAMPAIGN_NAME = "google.c.a.c_l";
var BACKGROUND_HANDLE_EXECUTION_TIME_LIMIT_MS = 1e3;
var FOREGROUND_HANDLE_PREPARATION_TIME_MS = 3e3;
var MessageType;
(function(MessageType2) {
  MessageType2["PUSH_RECEIVED"] = "push-received";
  MessageType2["NOTIFICATION_CLICKED"] = "notification-clicked";
})(MessageType || (MessageType = {}));
function arrayToBase64(array) {
  var uint8Array = new Uint8Array(array);
  var base64String = btoa(String.fromCharCode.apply(String, __spreadArray([], __read(uint8Array))));
  return base64String.replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
}
function base64ToArray(base64String) {
  var padding = "=".repeat((4 - base64String.length % 4) % 4);
  var base642 = (base64String + padding).replace(/\-/g, "+").replace(/_/g, "/");
  var rawData = atob(base642);
  var outputArray = new Uint8Array(rawData.length);
  for (var i = 0; i < rawData.length; ++i) {
    outputArray[i] = rawData.charCodeAt(i);
  }
  return outputArray;
}
var OLD_DB_NAME = "fcm_token_details_db";
var OLD_DB_VERSION = 5;
var OLD_OBJECT_STORE_NAME = "fcm_token_object_Store";
function migrateOldDatabase(senderId) {
  return __awaiter(this, void 0, void 0, function() {
    var databases, dbNames, tokenDetails, db2;
    var _this = this;
    return __generator(this, function(_a8) {
      switch (_a8.label) {
        case 0:
          if (!("databases" in indexedDB))
            return [3, 2];
          return [4, indexedDB.databases()];
        case 1:
          databases = _a8.sent();
          dbNames = databases.map(function(db3) {
            return db3.name;
          });
          if (!dbNames.includes(OLD_DB_NAME)) {
            return [2, null];
          }
          _a8.label = 2;
        case 2:
          tokenDetails = null;
          return [4, openDb(OLD_DB_NAME, OLD_DB_VERSION, function(db3) {
            return __awaiter(_this, void 0, void 0, function() {
              var objectStore, value, oldDetails, oldDetails, oldDetails;
              var _a9;
              return __generator(this, function(_b) {
                switch (_b.label) {
                  case 0:
                    if (db3.oldVersion < 2) {
                      return [2];
                    }
                    if (!db3.objectStoreNames.contains(OLD_OBJECT_STORE_NAME)) {
                      return [2];
                    }
                    objectStore = db3.transaction.objectStore(OLD_OBJECT_STORE_NAME);
                    return [4, objectStore.index("fcmSenderId").get(senderId)];
                  case 1:
                    value = _b.sent();
                    return [4, objectStore.clear()];
                  case 2:
                    _b.sent();
                    if (!value) {
                      return [2];
                    }
                    if (db3.oldVersion === 2) {
                      oldDetails = value;
                      if (!oldDetails.auth || !oldDetails.p256dh || !oldDetails.endpoint) {
                        return [2];
                      }
                      tokenDetails = {
                        token: oldDetails.fcmToken,
                        createTime: (_a9 = oldDetails.createTime) !== null && _a9 !== void 0 ? _a9 : Date.now(),
                        subscriptionOptions: {
                          auth: oldDetails.auth,
                          p256dh: oldDetails.p256dh,
                          endpoint: oldDetails.endpoint,
                          swScope: oldDetails.swScope,
                          vapidKey: typeof oldDetails.vapidKey === "string" ? oldDetails.vapidKey : arrayToBase64(oldDetails.vapidKey)
                        }
                      };
                    } else if (db3.oldVersion === 3) {
                      oldDetails = value;
                      tokenDetails = {
                        token: oldDetails.fcmToken,
                        createTime: oldDetails.createTime,
                        subscriptionOptions: {
                          auth: arrayToBase64(oldDetails.auth),
                          p256dh: arrayToBase64(oldDetails.p256dh),
                          endpoint: oldDetails.endpoint,
                          swScope: oldDetails.swScope,
                          vapidKey: arrayToBase64(oldDetails.vapidKey)
                        }
                      };
                    } else if (db3.oldVersion === 4) {
                      oldDetails = value;
                      tokenDetails = {
                        token: oldDetails.fcmToken,
                        createTime: oldDetails.createTime,
                        subscriptionOptions: {
                          auth: arrayToBase64(oldDetails.auth),
                          p256dh: arrayToBase64(oldDetails.p256dh),
                          endpoint: oldDetails.endpoint,
                          swScope: oldDetails.swScope,
                          vapidKey: arrayToBase64(oldDetails.vapidKey)
                        }
                      };
                    }
                    return [2];
                }
              });
            });
          })];
        case 3:
          db2 = _a8.sent();
          db2.close();
          return [4, deleteDb(OLD_DB_NAME)];
        case 4:
          _a8.sent();
          return [4, deleteDb("fcm_vapid_details_db")];
        case 5:
          _a8.sent();
          return [4, deleteDb("undefined")];
        case 6:
          _a8.sent();
          return [2, checkTokenDetails(tokenDetails) ? tokenDetails : null];
      }
    });
  });
}
function checkTokenDetails(tokenDetails) {
  if (!tokenDetails || !tokenDetails.subscriptionOptions) {
    return false;
  }
  var subscriptionOptions = tokenDetails.subscriptionOptions;
  return typeof tokenDetails.createTime === "number" && tokenDetails.createTime > 0 && typeof tokenDetails.token === "string" && tokenDetails.token.length > 0 && typeof subscriptionOptions.auth === "string" && subscriptionOptions.auth.length > 0 && typeof subscriptionOptions.p256dh === "string" && subscriptionOptions.p256dh.length > 0 && typeof subscriptionOptions.endpoint === "string" && subscriptionOptions.endpoint.length > 0 && typeof subscriptionOptions.swScope === "string" && subscriptionOptions.swScope.length > 0 && typeof subscriptionOptions.vapidKey === "string" && subscriptionOptions.vapidKey.length > 0;
}
var DATABASE_NAME2 = "firebase-messaging-database";
var DATABASE_VERSION2 = 1;
var OBJECT_STORE_NAME2 = "firebase-messaging-store";
var dbPromise2 = null;
function getDbPromise2() {
  if (!dbPromise2) {
    dbPromise2 = openDb(DATABASE_NAME2, DATABASE_VERSION2, function(upgradeDb) {
      switch (upgradeDb.oldVersion) {
        case 0:
          upgradeDb.createObjectStore(OBJECT_STORE_NAME2);
      }
    });
  }
  return dbPromise2;
}
function dbGet(firebaseDependencies) {
  return __awaiter(this, void 0, void 0, function() {
    var key, db2, tokenDetails, oldTokenDetails;
    return __generator(this, function(_a8) {
      switch (_a8.label) {
        case 0:
          key = getKey2(firebaseDependencies);
          return [4, getDbPromise2()];
        case 1:
          db2 = _a8.sent();
          return [4, db2.transaction(OBJECT_STORE_NAME2).objectStore(OBJECT_STORE_NAME2).get(key)];
        case 2:
          tokenDetails = _a8.sent();
          if (!tokenDetails)
            return [3, 3];
          return [2, tokenDetails];
        case 3:
          return [4, migrateOldDatabase(firebaseDependencies.appConfig.senderId)];
        case 4:
          oldTokenDetails = _a8.sent();
          if (!oldTokenDetails)
            return [3, 6];
          return [4, dbSet(firebaseDependencies, oldTokenDetails)];
        case 5:
          _a8.sent();
          return [2, oldTokenDetails];
        case 6:
          return [2];
      }
    });
  });
}
function dbSet(firebaseDependencies, tokenDetails) {
  return __awaiter(this, void 0, void 0, function() {
    var key, db2, tx;
    return __generator(this, function(_a8) {
      switch (_a8.label) {
        case 0:
          key = getKey2(firebaseDependencies);
          return [4, getDbPromise2()];
        case 1:
          db2 = _a8.sent();
          tx = db2.transaction(OBJECT_STORE_NAME2, "readwrite");
          return [4, tx.objectStore(OBJECT_STORE_NAME2).put(tokenDetails, key)];
        case 2:
          _a8.sent();
          return [4, tx.complete];
        case 3:
          _a8.sent();
          return [2, tokenDetails];
      }
    });
  });
}
function dbRemove(firebaseDependencies) {
  return __awaiter(this, void 0, void 0, function() {
    var key, db2, tx;
    return __generator(this, function(_a8) {
      switch (_a8.label) {
        case 0:
          key = getKey2(firebaseDependencies);
          return [4, getDbPromise2()];
        case 1:
          db2 = _a8.sent();
          tx = db2.transaction(OBJECT_STORE_NAME2, "readwrite");
          return [4, tx.objectStore(OBJECT_STORE_NAME2).delete(key)];
        case 2:
          _a8.sent();
          return [4, tx.complete];
        case 3:
          _a8.sent();
          return [2];
      }
    });
  });
}
function getKey2(_a8) {
  var appConfig = _a8.appConfig;
  return appConfig.appId;
}
function requestGetToken(firebaseDependencies, subscriptionOptions) {
  return __awaiter(this, void 0, void 0, function() {
    var headers, body, subscribeOptions, responseData, response, err_1, message;
    return __generator(this, function(_a8) {
      switch (_a8.label) {
        case 0:
          return [4, getHeaders2(firebaseDependencies)];
        case 1:
          headers = _a8.sent();
          body = getBody(subscriptionOptions);
          subscribeOptions = {
            method: "POST",
            headers,
            body: JSON.stringify(body)
          };
          _a8.label = 2;
        case 2:
          _a8.trys.push([2, 5, , 6]);
          return [4, fetch(getEndpoint(firebaseDependencies.appConfig), subscribeOptions)];
        case 3:
          response = _a8.sent();
          return [4, response.json()];
        case 4:
          responseData = _a8.sent();
          return [3, 6];
        case 5:
          err_1 = _a8.sent();
          throw ERROR_FACTORY2.create("token-subscribe-failed", {
            errorInfo: err_1
          });
        case 6:
          if (responseData.error) {
            message = responseData.error.message;
            throw ERROR_FACTORY2.create("token-subscribe-failed", {
              errorInfo: message
            });
          }
          if (!responseData.token) {
            throw ERROR_FACTORY2.create("token-subscribe-no-token");
          }
          return [2, responseData.token];
      }
    });
  });
}
function requestUpdateToken(firebaseDependencies, tokenDetails) {
  return __awaiter(this, void 0, void 0, function() {
    var headers, body, updateOptions, responseData, response, err_2, message;
    return __generator(this, function(_a8) {
      switch (_a8.label) {
        case 0:
          return [4, getHeaders2(firebaseDependencies)];
        case 1:
          headers = _a8.sent();
          body = getBody(tokenDetails.subscriptionOptions);
          updateOptions = {
            method: "PATCH",
            headers,
            body: JSON.stringify(body)
          };
          _a8.label = 2;
        case 2:
          _a8.trys.push([2, 5, , 6]);
          return [4, fetch(getEndpoint(firebaseDependencies.appConfig) + "/" + tokenDetails.token, updateOptions)];
        case 3:
          response = _a8.sent();
          return [4, response.json()];
        case 4:
          responseData = _a8.sent();
          return [3, 6];
        case 5:
          err_2 = _a8.sent();
          throw ERROR_FACTORY2.create("token-update-failed", {
            errorInfo: err_2
          });
        case 6:
          if (responseData.error) {
            message = responseData.error.message;
            throw ERROR_FACTORY2.create("token-update-failed", {
              errorInfo: message
            });
          }
          if (!responseData.token) {
            throw ERROR_FACTORY2.create("token-update-no-token");
          }
          return [2, responseData.token];
      }
    });
  });
}
function requestDeleteToken(firebaseDependencies, token) {
  return __awaiter(this, void 0, void 0, function() {
    var headers, unsubscribeOptions, response, responseData, message, err_3;
    return __generator(this, function(_a8) {
      switch (_a8.label) {
        case 0:
          return [4, getHeaders2(firebaseDependencies)];
        case 1:
          headers = _a8.sent();
          unsubscribeOptions = {
            method: "DELETE",
            headers
          };
          _a8.label = 2;
        case 2:
          _a8.trys.push([2, 5, , 6]);
          return [4, fetch(getEndpoint(firebaseDependencies.appConfig) + "/" + token, unsubscribeOptions)];
        case 3:
          response = _a8.sent();
          return [4, response.json()];
        case 4:
          responseData = _a8.sent();
          if (responseData.error) {
            message = responseData.error.message;
            throw ERROR_FACTORY2.create("token-unsubscribe-failed", {
              errorInfo: message
            });
          }
          return [3, 6];
        case 5:
          err_3 = _a8.sent();
          throw ERROR_FACTORY2.create("token-unsubscribe-failed", {
            errorInfo: err_3
          });
        case 6:
          return [2];
      }
    });
  });
}
function getEndpoint(_a8) {
  var projectId = _a8.projectId;
  return ENDPOINT + "/projects/" + projectId + "/registrations";
}
function getHeaders2(_a8) {
  var appConfig = _a8.appConfig, installations = _a8.installations;
  return __awaiter(this, void 0, void 0, function() {
    var authToken;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          return [4, installations.getToken()];
        case 1:
          authToken = _b.sent();
          return [2, new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
            "x-goog-api-key": appConfig.apiKey,
            "x-goog-firebase-installations-auth": "FIS " + authToken
          })];
      }
    });
  });
}
function getBody(_a8) {
  var p256dh = _a8.p256dh, auth = _a8.auth, endpoint = _a8.endpoint, vapidKey = _a8.vapidKey;
  var body = {
    web: {
      endpoint,
      auth,
      p256dh
    }
  };
  if (vapidKey !== DEFAULT_VAPID_KEY) {
    body.web.applicationPubKey = vapidKey;
  }
  return body;
}
var TOKEN_EXPIRATION_MS = 7 * 24 * 60 * 60 * 1e3;
function getToken2(firebaseDependencies, swRegistration, vapidKey) {
  return __awaiter(this, void 0, void 0, function() {
    var pushSubscription, tokenDetails, subscriptionOptions, e_1;
    return __generator(this, function(_a8) {
      switch (_a8.label) {
        case 0:
          if (Notification.permission !== "granted") {
            throw ERROR_FACTORY2.create("permission-blocked");
          }
          return [4, getPushSubscription(swRegistration, vapidKey)];
        case 1:
          pushSubscription = _a8.sent();
          return [4, dbGet(firebaseDependencies)];
        case 2:
          tokenDetails = _a8.sent();
          subscriptionOptions = {
            vapidKey,
            swScope: swRegistration.scope,
            endpoint: pushSubscription.endpoint,
            auth: arrayToBase64(pushSubscription.getKey("auth")),
            p256dh: arrayToBase64(pushSubscription.getKey("p256dh"))
          };
          if (!!tokenDetails)
            return [3, 3];
          return [2, getNewToken(firebaseDependencies, subscriptionOptions)];
        case 3:
          if (!!isTokenValid(tokenDetails.subscriptionOptions, subscriptionOptions))
            return [3, 8];
          _a8.label = 4;
        case 4:
          _a8.trys.push([4, 6, , 7]);
          return [4, requestDeleteToken(firebaseDependencies, tokenDetails.token)];
        case 5:
          _a8.sent();
          return [3, 7];
        case 6:
          e_1 = _a8.sent();
          console.warn(e_1);
          return [3, 7];
        case 7:
          return [2, getNewToken(firebaseDependencies, subscriptionOptions)];
        case 8:
          if (Date.now() >= tokenDetails.createTime + TOKEN_EXPIRATION_MS) {
            return [2, updateToken({
              token: tokenDetails.token,
              createTime: Date.now(),
              subscriptionOptions
            }, firebaseDependencies, swRegistration)];
          } else {
            return [2, tokenDetails.token];
          }
        case 9:
          return [2];
      }
    });
  });
}
function deleteToken(firebaseDependencies, swRegistration) {
  return __awaiter(this, void 0, void 0, function() {
    var tokenDetails, pushSubscription;
    return __generator(this, function(_a8) {
      switch (_a8.label) {
        case 0:
          return [4, dbGet(firebaseDependencies)];
        case 1:
          tokenDetails = _a8.sent();
          if (!tokenDetails)
            return [3, 4];
          return [4, requestDeleteToken(firebaseDependencies, tokenDetails.token)];
        case 2:
          _a8.sent();
          return [4, dbRemove(firebaseDependencies)];
        case 3:
          _a8.sent();
          _a8.label = 4;
        case 4:
          return [4, swRegistration.pushManager.getSubscription()];
        case 5:
          pushSubscription = _a8.sent();
          if (pushSubscription) {
            return [2, pushSubscription.unsubscribe()];
          }
          return [2, true];
      }
    });
  });
}
function updateToken(tokenDetails, firebaseDependencies, swRegistration) {
  return __awaiter(this, void 0, void 0, function() {
    var updatedToken, updatedTokenDetails, e_2;
    return __generator(this, function(_a8) {
      switch (_a8.label) {
        case 0:
          _a8.trys.push([0, 3, , 5]);
          return [4, requestUpdateToken(firebaseDependencies, tokenDetails)];
        case 1:
          updatedToken = _a8.sent();
          updatedTokenDetails = __assign(__assign({}, tokenDetails), { token: updatedToken, createTime: Date.now() });
          return [4, dbSet(firebaseDependencies, updatedTokenDetails)];
        case 2:
          _a8.sent();
          return [2, updatedToken];
        case 3:
          e_2 = _a8.sent();
          return [4, deleteToken(firebaseDependencies, swRegistration)];
        case 4:
          _a8.sent();
          throw e_2;
        case 5:
          return [2];
      }
    });
  });
}
function getNewToken(firebaseDependencies, subscriptionOptions) {
  return __awaiter(this, void 0, void 0, function() {
    var token, tokenDetails;
    return __generator(this, function(_a8) {
      switch (_a8.label) {
        case 0:
          return [4, requestGetToken(firebaseDependencies, subscriptionOptions)];
        case 1:
          token = _a8.sent();
          tokenDetails = {
            token,
            createTime: Date.now(),
            subscriptionOptions
          };
          return [4, dbSet(firebaseDependencies, tokenDetails)];
        case 2:
          _a8.sent();
          return [2, tokenDetails.token];
      }
    });
  });
}
function getPushSubscription(swRegistration, vapidKey) {
  return __awaiter(this, void 0, void 0, function() {
    var subscription;
    return __generator(this, function(_a8) {
      switch (_a8.label) {
        case 0:
          return [4, swRegistration.pushManager.getSubscription()];
        case 1:
          subscription = _a8.sent();
          if (subscription) {
            return [2, subscription];
          }
          return [2, swRegistration.pushManager.subscribe({
            userVisibleOnly: true,
            applicationServerKey: base64ToArray(vapidKey)
          })];
      }
    });
  });
}
function isTokenValid(dbOptions, currentOptions) {
  var isVapidKeyEqual = currentOptions.vapidKey === dbOptions.vapidKey;
  var isEndpointEqual = currentOptions.endpoint === dbOptions.endpoint;
  var isAuthEqual = currentOptions.auth === dbOptions.auth;
  var isP256dhEqual = currentOptions.p256dh === dbOptions.p256dh;
  return isVapidKeyEqual && isEndpointEqual && isAuthEqual && isP256dhEqual;
}
function externalizePayload(internalPayload) {
  var payload = {
    from: internalPayload.from,
    collapseKey: internalPayload.collapse_key,
    messageId: internalPayload.fcm_message_id
  };
  propagateNotificationPayload(payload, internalPayload);
  propagateDataPayload(payload, internalPayload);
  propagateFcmOptions(payload, internalPayload);
  return payload;
}
function propagateNotificationPayload(payload, messagePayloadInternal) {
  if (!messagePayloadInternal.notification) {
    return;
  }
  payload.notification = {};
  var title = messagePayloadInternal.notification.title;
  if (!!title) {
    payload.notification.title = title;
  }
  var body = messagePayloadInternal.notification.body;
  if (!!body) {
    payload.notification.body = body;
  }
  var image = messagePayloadInternal.notification.image;
  if (!!image) {
    payload.notification.image = image;
  }
}
function propagateDataPayload(payload, messagePayloadInternal) {
  if (!messagePayloadInternal.data) {
    return;
  }
  payload.data = messagePayloadInternal.data;
}
function propagateFcmOptions(payload, messagePayloadInternal) {
  if (!messagePayloadInternal.fcmOptions) {
    return;
  }
  payload.fcmOptions = {};
  var link = messagePayloadInternal.fcmOptions.link;
  if (!!link) {
    payload.fcmOptions.link = link;
  }
  var analyticsLabel = messagePayloadInternal.fcmOptions.analytics_label;
  if (!!analyticsLabel) {
    payload.fcmOptions.analyticsLabel = analyticsLabel;
  }
}
function isConsoleMessage(data) {
  return typeof data === "object" && !!data && CONSOLE_CAMPAIGN_ID in data;
}
function sleep2(ms2) {
  return new Promise(function(resolve) {
    setTimeout(resolve, ms2);
  });
}
var SwController = function() {
  function SwController2(firebaseDependencies) {
    var _this = this;
    this.firebaseDependencies = firebaseDependencies;
    this.isOnBackgroundMessageUsed = null;
    this.vapidKey = null;
    this.bgMessageHandler = null;
    self.addEventListener("push", function(e) {
      e.waitUntil(_this.onPush(e));
    });
    self.addEventListener("pushsubscriptionchange", function(e) {
      e.waitUntil(_this.onSubChange(e));
    });
    self.addEventListener("notificationclick", function(e) {
      e.waitUntil(_this.onNotificationClick(e));
    });
  }
  Object.defineProperty(SwController2.prototype, "app", {
    get: function() {
      return this.firebaseDependencies.app;
    },
    enumerable: false,
    configurable: true
  });
  SwController2.prototype.setBackgroundMessageHandler = function(callback) {
    this.isOnBackgroundMessageUsed = false;
    if (!callback || typeof callback !== "function") {
      throw ERROR_FACTORY2.create("invalid-bg-handler");
    }
    this.bgMessageHandler = callback;
  };
  SwController2.prototype.onBackgroundMessage = function(nextOrObserver) {
    var _this = this;
    this.isOnBackgroundMessageUsed = true;
    this.bgMessageHandler = nextOrObserver;
    return function() {
      _this.bgMessageHandler = null;
    };
  };
  SwController2.prototype.getToken = function() {
    var _a8, _b;
    return __awaiter(this, void 0, void 0, function() {
      var tokenDetails;
      return __generator(this, function(_c2) {
        switch (_c2.label) {
          case 0:
            if (!!this.vapidKey)
              return [3, 2];
            return [4, dbGet(this.firebaseDependencies)];
          case 1:
            tokenDetails = _c2.sent();
            this.vapidKey = (_b = (_a8 = tokenDetails === null || tokenDetails === void 0 ? void 0 : tokenDetails.subscriptionOptions) === null || _a8 === void 0 ? void 0 : _a8.vapidKey) !== null && _b !== void 0 ? _b : DEFAULT_VAPID_KEY;
            _c2.label = 2;
          case 2:
            return [2, getToken2(this.firebaseDependencies, self.registration, this.vapidKey)];
        }
      });
    });
  };
  SwController2.prototype.deleteToken = function() {
    return deleteToken(this.firebaseDependencies, self.registration);
  };
  SwController2.prototype.requestPermission = function() {
    throw ERROR_FACTORY2.create("only-available-in-window");
  };
  SwController2.prototype.usePublicVapidKey = function(vapidKey) {
    if (this.vapidKey !== null) {
      throw ERROR_FACTORY2.create("use-vapid-key-after-get-token");
    }
    if (typeof vapidKey !== "string" || vapidKey.length === 0) {
      throw ERROR_FACTORY2.create("invalid-vapid-key");
    }
    this.vapidKey = vapidKey;
  };
  SwController2.prototype.useServiceWorker = function() {
    throw ERROR_FACTORY2.create("only-available-in-window");
  };
  SwController2.prototype.onMessage = function() {
    throw ERROR_FACTORY2.create("only-available-in-window");
  };
  SwController2.prototype.onTokenRefresh = function() {
    throw ERROR_FACTORY2.create("only-available-in-window");
  };
  SwController2.prototype.onPush = function(event) {
    return __awaiter(this, void 0, void 0, function() {
      var internalPayload, clientList, isNotificationShown, payload;
      return __generator(this, function(_a8) {
        switch (_a8.label) {
          case 0:
            internalPayload = getMessagePayloadInternal(event);
            if (!internalPayload) {
              console.debug(TAG + "failed to get parsed MessagePayload from the PushEvent. Skip handling the push.");
              return [2];
            }
            return [4, getClientList()];
          case 1:
            clientList = _a8.sent();
            if (hasVisibleClients(clientList)) {
              return [2, sendMessagePayloadInternalToWindows(clientList, internalPayload)];
            }
            isNotificationShown = false;
            if (!!!internalPayload.notification)
              return [3, 3];
            return [4, showNotification(wrapInternalPayload(internalPayload))];
          case 2:
            _a8.sent();
            isNotificationShown = true;
            _a8.label = 3;
          case 3:
            if (isNotificationShown === true && this.isOnBackgroundMessageUsed === false) {
              return [2];
            }
            if (!!this.bgMessageHandler) {
              payload = externalizePayload(internalPayload);
              if (typeof this.bgMessageHandler === "function") {
                this.bgMessageHandler(payload);
              } else {
                this.bgMessageHandler.next(payload);
              }
            }
            return [4, sleep2(BACKGROUND_HANDLE_EXECUTION_TIME_LIMIT_MS)];
          case 4:
            _a8.sent();
            return [2];
        }
      });
    });
  };
  SwController2.prototype.onSubChange = function(event) {
    var _a8, _b;
    return __awaiter(this, void 0, void 0, function() {
      var newSubscription, tokenDetails;
      return __generator(this, function(_c2) {
        switch (_c2.label) {
          case 0:
            newSubscription = event.newSubscription;
            if (!!newSubscription)
              return [3, 2];
            return [4, deleteToken(this.firebaseDependencies, self.registration)];
          case 1:
            _c2.sent();
            return [2];
          case 2:
            return [4, dbGet(this.firebaseDependencies)];
          case 3:
            tokenDetails = _c2.sent();
            return [4, deleteToken(this.firebaseDependencies, self.registration)];
          case 4:
            _c2.sent();
            return [4, getToken2(this.firebaseDependencies, self.registration, (_b = (_a8 = tokenDetails === null || tokenDetails === void 0 ? void 0 : tokenDetails.subscriptionOptions) === null || _a8 === void 0 ? void 0 : _a8.vapidKey) !== null && _b !== void 0 ? _b : DEFAULT_VAPID_KEY)];
          case 5:
            _c2.sent();
            return [2];
        }
      });
    });
  };
  SwController2.prototype.onNotificationClick = function(event) {
    var _a8, _b;
    return __awaiter(this, void 0, void 0, function() {
      var internalPayload, link, url, originUrl, client;
      return __generator(this, function(_c2) {
        switch (_c2.label) {
          case 0:
            internalPayload = (_b = (_a8 = event.notification) === null || _a8 === void 0 ? void 0 : _a8.data) === null || _b === void 0 ? void 0 : _b[FCM_MSG];
            if (!internalPayload) {
              return [2];
            } else if (event.action) {
              return [2];
            }
            event.stopImmediatePropagation();
            event.notification.close();
            link = getLink(internalPayload);
            if (!link) {
              return [2];
            }
            url = new URL(link, self.location.href);
            originUrl = new URL(self.location.origin);
            if (url.host !== originUrl.host) {
              return [2];
            }
            return [4, getWindowClient(url)];
          case 1:
            client = _c2.sent();
            if (!!client)
              return [3, 4];
            return [4, self.clients.openWindow(link)];
          case 2:
            client = _c2.sent();
            return [4, sleep2(FOREGROUND_HANDLE_PREPARATION_TIME_MS)];
          case 3:
            _c2.sent();
            return [3, 6];
          case 4:
            return [4, client.focus()];
          case 5:
            client = _c2.sent();
            _c2.label = 6;
          case 6:
            if (!client) {
              return [2];
            }
            internalPayload.messageType = MessageType.NOTIFICATION_CLICKED;
            internalPayload.isFirebaseMessaging = true;
            return [2, client.postMessage(internalPayload)];
        }
      });
    });
  };
  return SwController2;
}();
function wrapInternalPayload(internalPayload) {
  var _a8;
  var wrappedInternalPayload = __assign({}, internalPayload.notification);
  wrappedInternalPayload.data = (_a8 = {}, _a8[FCM_MSG] = internalPayload, _a8);
  return wrappedInternalPayload;
}
function getMessagePayloadInternal(_a8) {
  var data = _a8.data;
  if (!data) {
    return null;
  }
  try {
    return data.json();
  } catch (err) {
    return null;
  }
}
function getWindowClient(url) {
  return __awaiter(this, void 0, void 0, function() {
    var clientList, clientList_1, clientList_1_1, client, clientUrl;
    var e_1, _a8;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          return [4, getClientList()];
        case 1:
          clientList = _b.sent();
          try {
            for (clientList_1 = __values(clientList), clientList_1_1 = clientList_1.next(); !clientList_1_1.done; clientList_1_1 = clientList_1.next()) {
              client = clientList_1_1.value;
              clientUrl = new URL(client.url, self.location.href);
              if (url.host === clientUrl.host) {
                return [2, client];
              }
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (clientList_1_1 && !clientList_1_1.done && (_a8 = clientList_1.return))
                _a8.call(clientList_1);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
          return [2, null];
      }
    });
  });
}
function hasVisibleClients(clientList) {
  return clientList.some(function(client) {
    return client.visibilityState === "visible" && !client.url.startsWith("chrome-extension://");
  });
}
function sendMessagePayloadInternalToWindows(clientList, internalPayload) {
  var e_2, _a8;
  internalPayload.isFirebaseMessaging = true;
  internalPayload.messageType = MessageType.PUSH_RECEIVED;
  try {
    for (var clientList_2 = __values(clientList), clientList_2_1 = clientList_2.next(); !clientList_2_1.done; clientList_2_1 = clientList_2.next()) {
      var client = clientList_2_1.value;
      client.postMessage(internalPayload);
    }
  } catch (e_2_1) {
    e_2 = { error: e_2_1 };
  } finally {
    try {
      if (clientList_2_1 && !clientList_2_1.done && (_a8 = clientList_2.return))
        _a8.call(clientList_2);
    } finally {
      if (e_2)
        throw e_2.error;
    }
  }
}
function getClientList() {
  return self.clients.matchAll({
    type: "window",
    includeUncontrolled: true
  });
}
function showNotification(notificationPayloadInternal) {
  var _a8;
  var actions = notificationPayloadInternal.actions;
  var maxActions = Notification.maxActions;
  if (actions && maxActions && actions.length > maxActions) {
    console.warn("This browser only supports " + maxActions + " actions. The remaining actions will not be displayed.");
  }
  return self.registration.showNotification((_a8 = notificationPayloadInternal.title) !== null && _a8 !== void 0 ? _a8 : "", notificationPayloadInternal);
}
function getLink(payload) {
  var _a8, _b, _c2;
  var link = (_b = (_a8 = payload.fcmOptions) === null || _a8 === void 0 ? void 0 : _a8.link) !== null && _b !== void 0 ? _b : (_c2 = payload.notification) === null || _c2 === void 0 ? void 0 : _c2.click_action;
  if (link) {
    return link;
  }
  if (isConsoleMessage(payload.data)) {
    return self.location.origin;
  } else {
    return null;
  }
}
var WindowController = function() {
  function WindowController2(firebaseDependencies) {
    var _this = this;
    this.firebaseDependencies = firebaseDependencies;
    this.vapidKey = null;
    this.onMessageCallback = null;
    navigator.serviceWorker.addEventListener("message", function(e) {
      return _this.messageEventListener(e);
    });
  }
  Object.defineProperty(WindowController2.prototype, "app", {
    get: function() {
      return this.firebaseDependencies.app;
    },
    enumerable: false,
    configurable: true
  });
  WindowController2.prototype.messageEventListener = function(event) {
    return __awaiter(this, void 0, void 0, function() {
      var internalPayload, dataPayload;
      return __generator(this, function(_a8) {
        switch (_a8.label) {
          case 0:
            internalPayload = event.data;
            if (!internalPayload.isFirebaseMessaging) {
              return [2];
            }
            if (this.onMessageCallback && internalPayload.messageType === MessageType.PUSH_RECEIVED) {
              if (typeof this.onMessageCallback === "function") {
                this.onMessageCallback(stripInternalFields(Object.assign({}, internalPayload)));
              } else {
                this.onMessageCallback.next(Object.assign({}, internalPayload));
              }
            }
            dataPayload = internalPayload.data;
            if (!(isConsoleMessage(dataPayload) && dataPayload[CONSOLE_CAMPAIGN_ANALYTICS_ENABLED] === "1"))
              return [3, 2];
            return [4, this.logEvent(internalPayload.messageType, dataPayload)];
          case 1:
            _a8.sent();
            _a8.label = 2;
          case 2:
            return [2];
        }
      });
    });
  };
  WindowController2.prototype.getVapidKey = function() {
    return this.vapidKey;
  };
  WindowController2.prototype.getSwReg = function() {
    return this.swRegistration;
  };
  WindowController2.prototype.getToken = function(options) {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(_a8) {
        switch (_a8.label) {
          case 0:
            if (!(Notification.permission === "default"))
              return [3, 2];
            return [4, Notification.requestPermission()];
          case 1:
            _a8.sent();
            _a8.label = 2;
          case 2:
            if (Notification.permission !== "granted") {
              throw ERROR_FACTORY2.create("permission-blocked");
            }
            return [4, this.updateVapidKey(options === null || options === void 0 ? void 0 : options.vapidKey)];
          case 3:
            _a8.sent();
            return [4, this.updateSwReg(options === null || options === void 0 ? void 0 : options.serviceWorkerRegistration)];
          case 4:
            _a8.sent();
            return [2, getToken2(this.firebaseDependencies, this.swRegistration, this.vapidKey)];
        }
      });
    });
  };
  WindowController2.prototype.updateVapidKey = function(vapidKey) {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(_a8) {
        if (!!vapidKey) {
          this.vapidKey = vapidKey;
        } else if (!this.vapidKey) {
          this.vapidKey = DEFAULT_VAPID_KEY;
        }
        return [2];
      });
    });
  };
  WindowController2.prototype.updateSwReg = function(swRegistration) {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(_a8) {
        switch (_a8.label) {
          case 0:
            if (!(!swRegistration && !this.swRegistration))
              return [3, 2];
            return [4, this.registerDefaultSw()];
          case 1:
            _a8.sent();
            _a8.label = 2;
          case 2:
            if (!swRegistration && !!this.swRegistration) {
              return [2];
            }
            if (!(swRegistration instanceof ServiceWorkerRegistration)) {
              throw ERROR_FACTORY2.create("invalid-sw-registration");
            }
            this.swRegistration = swRegistration;
            return [2];
        }
      });
    });
  };
  WindowController2.prototype.registerDefaultSw = function() {
    return __awaiter(this, void 0, void 0, function() {
      var _a8, e_1;
      return __generator(this, function(_b) {
        switch (_b.label) {
          case 0:
            _b.trys.push([0, 2, , 3]);
            _a8 = this;
            return [4, navigator.serviceWorker.register(DEFAULT_SW_PATH, {
              scope: DEFAULT_SW_SCOPE
            })];
          case 1:
            _a8.swRegistration = _b.sent();
            this.swRegistration.update().catch(function() {
            });
            return [3, 3];
          case 2:
            e_1 = _b.sent();
            throw ERROR_FACTORY2.create("failed-service-worker-registration", {
              browserErrorMessage: e_1.message
            });
          case 3:
            return [2];
        }
      });
    });
  };
  WindowController2.prototype.deleteToken = function() {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(_a8) {
        switch (_a8.label) {
          case 0:
            if (!!this.swRegistration)
              return [3, 2];
            return [4, this.registerDefaultSw()];
          case 1:
            _a8.sent();
            _a8.label = 2;
          case 2:
            return [2, deleteToken(this.firebaseDependencies, this.swRegistration)];
        }
      });
    });
  };
  WindowController2.prototype.requestPermission = function() {
    return __awaiter(this, void 0, void 0, function() {
      var permissionResult;
      return __generator(this, function(_a8) {
        switch (_a8.label) {
          case 0:
            if (Notification.permission === "granted") {
              return [2];
            }
            return [4, Notification.requestPermission()];
          case 1:
            permissionResult = _a8.sent();
            if (permissionResult === "granted") {
              return [2];
            } else if (permissionResult === "denied") {
              throw ERROR_FACTORY2.create("permission-blocked");
            } else {
              throw ERROR_FACTORY2.create("permission-default");
            }
        }
      });
    });
  };
  WindowController2.prototype.usePublicVapidKey = function(vapidKey) {
    if (this.vapidKey !== null) {
      throw ERROR_FACTORY2.create("use-vapid-key-after-get-token");
    }
    if (typeof vapidKey !== "string" || vapidKey.length === 0) {
      throw ERROR_FACTORY2.create("invalid-vapid-key");
    }
    this.vapidKey = vapidKey;
  };
  WindowController2.prototype.useServiceWorker = function(swRegistration) {
    if (!(swRegistration instanceof ServiceWorkerRegistration)) {
      throw ERROR_FACTORY2.create("invalid-sw-registration");
    }
    if (this.swRegistration) {
      throw ERROR_FACTORY2.create("use-sw-after-get-token");
    }
    this.swRegistration = swRegistration;
  };
  WindowController2.prototype.onMessage = function(nextOrObserver) {
    var _this = this;
    this.onMessageCallback = nextOrObserver;
    return function() {
      _this.onMessageCallback = null;
    };
  };
  WindowController2.prototype.setBackgroundMessageHandler = function() {
    throw ERROR_FACTORY2.create("only-available-in-sw");
  };
  WindowController2.prototype.onBackgroundMessage = function() {
    throw ERROR_FACTORY2.create("only-available-in-sw");
  };
  WindowController2.prototype.onTokenRefresh = function() {
    return function() {
    };
  };
  WindowController2.prototype.logEvent = function(messageType, data) {
    return __awaiter(this, void 0, void 0, function() {
      var eventType, analytics;
      return __generator(this, function(_a8) {
        switch (_a8.label) {
          case 0:
            eventType = getEventType(messageType);
            return [4, this.firebaseDependencies.analyticsProvider.get()];
          case 1:
            analytics = _a8.sent();
            analytics.logEvent(eventType, {
              message_id: data[CONSOLE_CAMPAIGN_ID],
              message_name: data[CONSOLE_CAMPAIGN_NAME],
              message_time: data[CONSOLE_CAMPAIGN_TIME],
              message_device_time: Math.floor(Date.now() / 1e3)
            });
            return [2];
        }
      });
    });
  };
  return WindowController2;
}();
function getEventType(messageType) {
  switch (messageType) {
    case MessageType.NOTIFICATION_CLICKED:
      return "notification_open";
    case MessageType.PUSH_RECEIVED:
      return "notification_foreground";
    default:
      throw new Error();
  }
}
function stripInternalFields(internalPayload) {
  delete internalPayload.messageType;
  delete internalPayload.isFirebaseMessaging;
  return internalPayload;
}
function extractAppConfig2(app) {
  var e_1, _a8;
  if (!app || !app.options) {
    throw getMissingValueError2("App Configuration Object");
  }
  if (!app.name) {
    throw getMissingValueError2("App Name");
  }
  var configKeys = [
    "projectId",
    "apiKey",
    "appId",
    "messagingSenderId"
  ];
  var options = app.options;
  try {
    for (var configKeys_1 = __values(configKeys), configKeys_1_1 = configKeys_1.next(); !configKeys_1_1.done; configKeys_1_1 = configKeys_1.next()) {
      var keyName = configKeys_1_1.value;
      if (!options[keyName]) {
        throw getMissingValueError2(keyName);
      }
    }
  } catch (e_1_1) {
    e_1 = { error: e_1_1 };
  } finally {
    try {
      if (configKeys_1_1 && !configKeys_1_1.done && (_a8 = configKeys_1.return))
        _a8.call(configKeys_1);
    } finally {
      if (e_1)
        throw e_1.error;
    }
  }
  return {
    appName: app.name,
    projectId: options.projectId,
    apiKey: options.apiKey,
    appId: options.appId,
    senderId: options.messagingSenderId
  };
}
function getMissingValueError2(valueName) {
  return ERROR_FACTORY2.create("missing-app-config-values", {
    valueName
  });
}
var MESSAGING_NAME = "messaging";
function factoryMethod(container) {
  var app = container.getProvider("app").getImmediate();
  var appConfig = extractAppConfig2(app);
  var installations = container.getProvider("installations").getImmediate();
  var analyticsProvider = container.getProvider("analytics-internal");
  var firebaseDependencies = {
    app,
    appConfig,
    installations,
    analyticsProvider
  };
  if (!isSupported()) {
    throw ERROR_FACTORY2.create("unsupported-browser");
  }
  if (self && "ServiceWorkerGlobalScope" in self) {
    return new SwController(firebaseDependencies);
  } else {
    return new WindowController(firebaseDependencies);
  }
}
var NAMESPACE_EXPORTS = {
  isSupported
};
index_esm_default.INTERNAL.registerComponent(new Component(MESSAGING_NAME, factoryMethod, "PUBLIC").setServiceProps(NAMESPACE_EXPORTS));
function isSupported() {
  if (self && "ServiceWorkerGlobalScope" in self) {
    return isSWControllerSupported();
  } else {
    return isWindowControllerSupported();
  }
}
function isWindowControllerSupported() {
  return "indexedDB" in window && indexedDB !== null && navigator.cookieEnabled && "serviceWorker" in navigator && "PushManager" in window && "Notification" in window && "fetch" in window && ServiceWorkerRegistration.prototype.hasOwnProperty("showNotification") && PushSubscription.prototype.hasOwnProperty("getKey");
}
function isSWControllerSupported() {
  return "indexedDB" in self && indexedDB !== null && "PushManager" in self && "Notification" in self && ServiceWorkerRegistration.prototype.hasOwnProperty("showNotification") && PushSubscription.prototype.hasOwnProperty("getKey");
}

// node_modules/@firebase/storage/dist/index.browser.esm.js
var DEFAULT_HOST = "firebasestorage.googleapis.com";
var CONFIG_STORAGE_BUCKET_KEY = "storageBucket";
var DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1e3;
var DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1e3;
var FirebaseStorageError = function(_super) {
  __extends(FirebaseStorageError2, _super);
  function FirebaseStorageError2(code, message) {
    var _this = _super.call(this, prependCode(code), "Firebase Storage: " + message + " (" + prependCode(code) + ")") || this;
    _this.customData = { serverResponse: null };
    _this._baseMessage = _this.message;
    Object.setPrototypeOf(_this, FirebaseStorageError2.prototype);
    return _this;
  }
  FirebaseStorageError2.prototype._codeEquals = function(code) {
    return prependCode(code) === this.code;
  };
  Object.defineProperty(FirebaseStorageError2.prototype, "serverResponse", {
    get: function() {
      return this.customData.serverResponse;
    },
    set: function(serverResponse) {
      this.customData.serverResponse = serverResponse;
      if (this.customData.serverResponse) {
        this.message = this._baseMessage + "\n" + this.customData.serverResponse;
      } else {
        this.message = this._baseMessage;
      }
    },
    enumerable: false,
    configurable: true
  });
  return FirebaseStorageError2;
}(FirebaseError);
function prependCode(code) {
  return "storage/" + code;
}
function unknown() {
  var message = "An unknown error occurred, please check the error payload for server response.";
  return new FirebaseStorageError("unknown", message);
}
function objectNotFound(path) {
  return new FirebaseStorageError("object-not-found", "Object '" + path + "' does not exist.");
}
function quotaExceeded(bucket) {
  return new FirebaseStorageError("quota-exceeded", "Quota for bucket '" + bucket + "' exceeded, please view quota on https://firebase.google.com/pricing/.");
}
function unauthenticated() {
  var message = "User is not authenticated, please authenticate using Firebase Authentication and try again.";
  return new FirebaseStorageError("unauthenticated", message);
}
function unauthorizedApp() {
  return new FirebaseStorageError("unauthorized-app", "This app does not have permission to access Firebase Storage on this project.");
}
function unauthorized(path) {
  return new FirebaseStorageError("unauthorized", "User does not have permission to access '" + path + "'.");
}
function retryLimitExceeded() {
  return new FirebaseStorageError("retry-limit-exceeded", "Max retry time for operation exceeded, please try again.");
}
function canceled() {
  return new FirebaseStorageError("canceled", "User canceled the upload/download.");
}
function invalidUrl(url) {
  return new FirebaseStorageError("invalid-url", "Invalid URL '" + url + "'.");
}
function invalidDefaultBucket(bucket) {
  return new FirebaseStorageError("invalid-default-bucket", "Invalid default bucket '" + bucket + "'.");
}
function noDefaultBucket() {
  return new FirebaseStorageError("no-default-bucket", "No default bucket found. Did you set the '" + CONFIG_STORAGE_BUCKET_KEY + "' property when initializing the app?");
}
function cannotSliceBlob() {
  return new FirebaseStorageError("cannot-slice-blob", "Cannot slice blob for upload. Please retry the upload.");
}
function serverFileWrongSize() {
  return new FirebaseStorageError("server-file-wrong-size", "Server recorded incorrect upload file size, please retry the upload.");
}
function noDownloadURL() {
  return new FirebaseStorageError("no-download-url", "The given file does not have any download URLs.");
}
function invalidArgument(message) {
  return new FirebaseStorageError("invalid-argument", message);
}
function appDeleted() {
  return new FirebaseStorageError("app-deleted", "The Firebase app was deleted.");
}
function invalidRootOperation(name10) {
  return new FirebaseStorageError("invalid-root-operation", "The operation '" + name10 + "' cannot be performed on a root reference, create a non-root reference using child, such as .child('file.png').");
}
function invalidFormat(format, message) {
  return new FirebaseStorageError("invalid-format", "String does not match format '" + format + "': " + message);
}
function internalError(message) {
  throw new FirebaseStorageError("internal-error", "Internal error: " + message);
}
function decodeBase64(encoded) {
  return atob(encoded);
}
var StringFormat = {
  RAW: "raw",
  BASE64: "base64",
  BASE64URL: "base64url",
  DATA_URL: "data_url"
};
var StringData = function() {
  function StringData2(data, contentType) {
    this.data = data;
    this.contentType = contentType || null;
  }
  return StringData2;
}();
function dataFromString(format, stringData) {
  switch (format) {
    case StringFormat.RAW:
      return new StringData(utf8Bytes_(stringData));
    case StringFormat.BASE64:
    case StringFormat.BASE64URL:
      return new StringData(base64Bytes_(format, stringData));
    case StringFormat.DATA_URL:
      return new StringData(dataURLBytes_(stringData), dataURLContentType_(stringData));
  }
  throw unknown();
}
function utf8Bytes_(value) {
  var b = [];
  for (var i = 0; i < value.length; i++) {
    var c = value.charCodeAt(i);
    if (c <= 127) {
      b.push(c);
    } else {
      if (c <= 2047) {
        b.push(192 | c >> 6, 128 | c & 63);
      } else {
        if ((c & 64512) === 55296) {
          var valid = i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;
          if (!valid) {
            b.push(239, 191, 189);
          } else {
            var hi2 = c;
            var lo2 = value.charCodeAt(++i);
            c = 65536 | (hi2 & 1023) << 10 | lo2 & 1023;
            b.push(240 | c >> 18, 128 | c >> 12 & 63, 128 | c >> 6 & 63, 128 | c & 63);
          }
        } else {
          if ((c & 64512) === 56320) {
            b.push(239, 191, 189);
          } else {
            b.push(224 | c >> 12, 128 | c >> 6 & 63, 128 | c & 63);
          }
        }
      }
    }
  }
  return new Uint8Array(b);
}
function percentEncodedBytes_(value) {
  var decoded;
  try {
    decoded = decodeURIComponent(value);
  } catch (e) {
    throw invalidFormat(StringFormat.DATA_URL, "Malformed data URL.");
  }
  return utf8Bytes_(decoded);
}
function base64Bytes_(format, value) {
  switch (format) {
    case StringFormat.BASE64: {
      var hasMinus = value.indexOf("-") !== -1;
      var hasUnder = value.indexOf("_") !== -1;
      if (hasMinus || hasUnder) {
        var invalidChar = hasMinus ? "-" : "_";
        throw invalidFormat(format, "Invalid character '" + invalidChar + "' found: is it base64url encoded?");
      }
      break;
    }
    case StringFormat.BASE64URL: {
      var hasPlus = value.indexOf("+") !== -1;
      var hasSlash = value.indexOf("/") !== -1;
      if (hasPlus || hasSlash) {
        var invalidChar = hasPlus ? "+" : "/";
        throw invalidFormat(format, "Invalid character '" + invalidChar + "' found: is it base64 encoded?");
      }
      value = value.replace(/-/g, "+").replace(/_/g, "/");
      break;
    }
  }
  var bytes;
  try {
    bytes = decodeBase64(value);
  } catch (e) {
    throw invalidFormat(format, "Invalid character found");
  }
  var array = new Uint8Array(bytes.length);
  for (var i = 0; i < bytes.length; i++) {
    array[i] = bytes.charCodeAt(i);
  }
  return array;
}
var DataURLParts = function() {
  function DataURLParts2(dataURL) {
    this.base64 = false;
    this.contentType = null;
    var matches = dataURL.match(/^data:([^,]+)?,/);
    if (matches === null) {
      throw invalidFormat(StringFormat.DATA_URL, "Must be formatted 'data:[<mediatype>][;base64],<data>");
    }
    var middle = matches[1] || null;
    if (middle != null) {
      this.base64 = endsWith(middle, ";base64");
      this.contentType = this.base64 ? middle.substring(0, middle.length - ";base64".length) : middle;
    }
    this.rest = dataURL.substring(dataURL.indexOf(",") + 1);
  }
  return DataURLParts2;
}();
function dataURLBytes_(dataUrl) {
  var parts = new DataURLParts(dataUrl);
  if (parts.base64) {
    return base64Bytes_(StringFormat.BASE64, parts.rest);
  } else {
    return percentEncodedBytes_(parts.rest);
  }
}
function dataURLContentType_(dataUrl) {
  var parts = new DataURLParts(dataUrl);
  return parts.contentType;
}
function endsWith(s, end) {
  var longEnough = s.length >= end.length;
  if (!longEnough) {
    return false;
  }
  return s.substring(s.length - end.length) === end;
}
var TaskEvent = {
  STATE_CHANGED: "state_changed"
};
var TaskState = {
  RUNNING: "running",
  PAUSED: "paused",
  SUCCESS: "success",
  CANCELED: "canceled",
  ERROR: "error"
};
function taskStateFromInternalTaskState(state) {
  switch (state) {
    case "running":
    case "pausing":
    case "canceling":
      return TaskState.RUNNING;
    case "paused":
      return TaskState.PAUSED;
    case "success":
      return TaskState.SUCCESS;
    case "canceled":
      return TaskState.CANCELED;
    case "error":
      return TaskState.ERROR;
    default:
      return TaskState.ERROR;
  }
}
var ErrorCode2;
(function(ErrorCode3) {
  ErrorCode3[ErrorCode3["NO_ERROR"] = 0] = "NO_ERROR";
  ErrorCode3[ErrorCode3["NETWORK_ERROR"] = 1] = "NETWORK_ERROR";
  ErrorCode3[ErrorCode3["ABORT"] = 2] = "ABORT";
})(ErrorCode2 || (ErrorCode2 = {}));
var XhrConnection = function() {
  function XhrConnection2() {
    var _this = this;
    this.sent_ = false;
    this.xhr_ = new XMLHttpRequest();
    this.errorCode_ = ErrorCode2.NO_ERROR;
    this.sendPromise_ = new Promise(function(resolve) {
      _this.xhr_.addEventListener("abort", function() {
        _this.errorCode_ = ErrorCode2.ABORT;
        resolve();
      });
      _this.xhr_.addEventListener("error", function() {
        _this.errorCode_ = ErrorCode2.NETWORK_ERROR;
        resolve();
      });
      _this.xhr_.addEventListener("load", function() {
        resolve();
      });
    });
  }
  XhrConnection2.prototype.send = function(url, method, body, headers) {
    if (this.sent_) {
      throw internalError("cannot .send() more than once");
    }
    this.sent_ = true;
    this.xhr_.open(method, url, true);
    if (headers !== void 0) {
      for (var key in headers) {
        if (headers.hasOwnProperty(key)) {
          this.xhr_.setRequestHeader(key, headers[key].toString());
        }
      }
    }
    if (body !== void 0) {
      this.xhr_.send(body);
    } else {
      this.xhr_.send();
    }
    return this.sendPromise_;
  };
  XhrConnection2.prototype.getErrorCode = function() {
    if (!this.sent_) {
      throw internalError("cannot .getErrorCode() before sending");
    }
    return this.errorCode_;
  };
  XhrConnection2.prototype.getStatus = function() {
    if (!this.sent_) {
      throw internalError("cannot .getStatus() before sending");
    }
    try {
      return this.xhr_.status;
    } catch (e) {
      return -1;
    }
  };
  XhrConnection2.prototype.getResponseText = function() {
    if (!this.sent_) {
      throw internalError("cannot .getResponseText() before sending");
    }
    return this.xhr_.responseText;
  };
  XhrConnection2.prototype.abort = function() {
    this.xhr_.abort();
  };
  XhrConnection2.prototype.getResponseHeader = function(header) {
    return this.xhr_.getResponseHeader(header);
  };
  XhrConnection2.prototype.addUploadProgressListener = function(listener) {
    if (this.xhr_.upload != null) {
      this.xhr_.upload.addEventListener("progress", listener);
    }
  };
  XhrConnection2.prototype.removeUploadProgressListener = function(listener) {
    if (this.xhr_.upload != null) {
      this.xhr_.upload.removeEventListener("progress", listener);
    }
  };
  return XhrConnection2;
}();
function newConnection() {
  return new XhrConnection();
}
var ConnectionPool = function() {
  function ConnectionPool2() {
  }
  ConnectionPool2.prototype.createConnection = function() {
    return newConnection();
  };
  return ConnectionPool2;
}();
var Location = function() {
  function Location2(bucket, path) {
    this.bucket = bucket;
    this.path_ = path;
  }
  Object.defineProperty(Location2.prototype, "path", {
    get: function() {
      return this.path_;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Location2.prototype, "isRoot", {
    get: function() {
      return this.path.length === 0;
    },
    enumerable: false,
    configurable: true
  });
  Location2.prototype.fullServerUrl = function() {
    var encode2 = encodeURIComponent;
    return "/b/" + encode2(this.bucket) + "/o/" + encode2(this.path);
  };
  Location2.prototype.bucketOnlyServerUrl = function() {
    var encode2 = encodeURIComponent;
    return "/b/" + encode2(this.bucket) + "/o";
  };
  Location2.makeFromBucketSpec = function(bucketString, host) {
    var bucketLocation;
    try {
      bucketLocation = Location2.makeFromUrl(bucketString, host);
    } catch (e) {
      return new Location2(bucketString, "");
    }
    if (bucketLocation.path === "") {
      return bucketLocation;
    } else {
      throw invalidDefaultBucket(bucketString);
    }
  };
  Location2.makeFromUrl = function(url, host) {
    var location2 = null;
    var bucketDomain = "([A-Za-z0-9.\\-_]+)";
    function gsModify(loc) {
      if (loc.path.charAt(loc.path.length - 1) === "/") {
        loc.path_ = loc.path_.slice(0, -1);
      }
    }
    var gsPath = "(/(.*))?$";
    var gsRegex = new RegExp("^gs://" + bucketDomain + gsPath, "i");
    var gsIndices = { bucket: 1, path: 3 };
    function httpModify(loc) {
      loc.path_ = decodeURIComponent(loc.path);
    }
    var version10 = "v[A-Za-z0-9_]+";
    var firebaseStorageHost = host.replace(/[.]/g, "\\.");
    var firebaseStoragePath = "(/([^?#]*).*)?$";
    var firebaseStorageRegExp = new RegExp("^https?://" + firebaseStorageHost + "/" + version10 + "/b/" + bucketDomain + "/o" + firebaseStoragePath, "i");
    var firebaseStorageIndices = { bucket: 1, path: 3 };
    var cloudStorageHost = host === DEFAULT_HOST ? "(?:storage.googleapis.com|storage.cloud.google.com)" : host;
    var cloudStoragePath = "([^?#]*)";
    var cloudStorageRegExp = new RegExp("^https?://" + cloudStorageHost + "/" + bucketDomain + "/" + cloudStoragePath, "i");
    var cloudStorageIndices = { bucket: 1, path: 2 };
    var groups = [
      { regex: gsRegex, indices: gsIndices, postModify: gsModify },
      {
        regex: firebaseStorageRegExp,
        indices: firebaseStorageIndices,
        postModify: httpModify
      },
      {
        regex: cloudStorageRegExp,
        indices: cloudStorageIndices,
        postModify: httpModify
      }
    ];
    for (var i = 0; i < groups.length; i++) {
      var group = groups[i];
      var captures = group.regex.exec(url);
      if (captures) {
        var bucketValue = captures[group.indices.bucket];
        var pathValue = captures[group.indices.path];
        if (!pathValue) {
          pathValue = "";
        }
        location2 = new Location2(bucketValue, pathValue);
        group.postModify(location2);
        break;
      }
    }
    if (location2 == null) {
      throw invalidUrl(url);
    }
    return location2;
  };
  return Location2;
}();
var FailRequest = function() {
  function FailRequest2(error2) {
    this.promise_ = Promise.reject(error2);
  }
  FailRequest2.prototype.getPromise = function() {
    return this.promise_;
  };
  FailRequest2.prototype.cancel = function(_appDelete) {
  };
  return FailRequest2;
}();
function start(f, callback, timeout) {
  var waitSeconds = 1;
  var timeoutId = null;
  var hitTimeout = false;
  var cancelState = 0;
  function canceled2() {
    return cancelState === 2;
  }
  var triggeredCallback = false;
  function triggerCallback() {
    var args = [];
    for (var _i2 = 0; _i2 < arguments.length; _i2++) {
      args[_i2] = arguments[_i2];
    }
    if (!triggeredCallback) {
      triggeredCallback = true;
      callback.apply(null, args);
    }
  }
  function callWithDelay(millis) {
    timeoutId = setTimeout(function() {
      timeoutId = null;
      f(handler, canceled2());
    }, millis);
  }
  function handler(success) {
    var args = [];
    for (var _i2 = 1; _i2 < arguments.length; _i2++) {
      args[_i2 - 1] = arguments[_i2];
    }
    if (triggeredCallback) {
      return;
    }
    if (success) {
      triggerCallback.call.apply(triggerCallback, __spreadArray([null, success], args));
      return;
    }
    var mustStop = canceled2() || hitTimeout;
    if (mustStop) {
      triggerCallback.call.apply(triggerCallback, __spreadArray([null, success], args));
      return;
    }
    if (waitSeconds < 64) {
      waitSeconds *= 2;
    }
    var waitMillis;
    if (cancelState === 1) {
      cancelState = 2;
      waitMillis = 0;
    } else {
      waitMillis = (waitSeconds + Math.random()) * 1e3;
    }
    callWithDelay(waitMillis);
  }
  var stopped = false;
  function stop2(wasTimeout) {
    if (stopped) {
      return;
    }
    stopped = true;
    if (triggeredCallback) {
      return;
    }
    if (timeoutId !== null) {
      if (!wasTimeout) {
        cancelState = 2;
      }
      clearTimeout(timeoutId);
      callWithDelay(0);
    } else {
      if (!wasTimeout) {
        cancelState = 1;
      }
    }
  }
  callWithDelay(0);
  setTimeout(function() {
    hitTimeout = true;
    stop2(true);
  }, timeout);
  return stop2;
}
function stop(id2) {
  id2(false);
}
function isJustDef(p2) {
  return p2 !== void 0;
}
function isFunction(p2) {
  return typeof p2 === "function";
}
function isNonArrayObject(p2) {
  return typeof p2 === "object" && !Array.isArray(p2);
}
function isString(p2) {
  return typeof p2 === "string" || p2 instanceof String;
}
function isNativeBlob(p2) {
  return isNativeBlobDefined() && p2 instanceof Blob;
}
function isNativeBlobDefined() {
  return typeof Blob !== "undefined";
}
function validateNumber(argument, minValue, maxValue, value) {
  if (value < minValue) {
    throw invalidArgument("Invalid value for '" + argument + "'. Expected " + minValue + " or greater.");
  }
  if (value > maxValue) {
    throw invalidArgument("Invalid value for '" + argument + "'. Expected " + maxValue + " or less.");
  }
}
function makeUrl(urlPart, host) {
  var protocolMatch = host.match(/^(\w+):\/\/.+/);
  var protocol = protocolMatch === null || protocolMatch === void 0 ? void 0 : protocolMatch[1];
  var origin = host;
  if (protocol == null) {
    origin = "https://" + host;
  }
  return origin + "/v0" + urlPart;
}
function makeQueryString(params) {
  var encode2 = encodeURIComponent;
  var queryPart = "?";
  for (var key in params) {
    if (params.hasOwnProperty(key)) {
      var nextPart = encode2(key) + "=" + encode2(params[key]);
      queryPart = queryPart + nextPart + "&";
    }
  }
  queryPart = queryPart.slice(0, -1);
  return queryPart;
}
var NetworkRequest = function() {
  function NetworkRequest2(url, method, headers, body, successCodes, additionalRetryCodes, callback, errorCallback, timeout, progressCallback, pool) {
    var _this = this;
    this.pendingConnection_ = null;
    this.backoffId_ = null;
    this.canceled_ = false;
    this.appDelete_ = false;
    this.url_ = url;
    this.method_ = method;
    this.headers_ = headers;
    this.body_ = body;
    this.successCodes_ = successCodes.slice();
    this.additionalRetryCodes_ = additionalRetryCodes.slice();
    this.callback_ = callback;
    this.errorCallback_ = errorCallback;
    this.progressCallback_ = progressCallback;
    this.timeout_ = timeout;
    this.pool_ = pool;
    this.promise_ = new Promise(function(resolve, reject) {
      _this.resolve_ = resolve;
      _this.reject_ = reject;
      _this.start_();
    });
  }
  NetworkRequest2.prototype.start_ = function() {
    var self2 = this;
    function doTheRequest(backoffCallback, canceled2) {
      if (canceled2) {
        backoffCallback(false, new RequestEndStatus(false, null, true));
        return;
      }
      var connection = self2.pool_.createConnection();
      self2.pendingConnection_ = connection;
      function progressListener(progressEvent) {
        var loaded = progressEvent.loaded;
        var total = progressEvent.lengthComputable ? progressEvent.total : -1;
        if (self2.progressCallback_ !== null) {
          self2.progressCallback_(loaded, total);
        }
      }
      if (self2.progressCallback_ !== null) {
        connection.addUploadProgressListener(progressListener);
      }
      connection.send(self2.url_, self2.method_, self2.body_, self2.headers_).then(function() {
        if (self2.progressCallback_ !== null) {
          connection.removeUploadProgressListener(progressListener);
        }
        self2.pendingConnection_ = null;
        var hitServer = connection.getErrorCode() === ErrorCode2.NO_ERROR;
        var status = connection.getStatus();
        if (!hitServer || self2.isRetryStatusCode_(status)) {
          var wasCanceled = connection.getErrorCode() === ErrorCode2.ABORT;
          backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));
          return;
        }
        var successCode = self2.successCodes_.indexOf(status) !== -1;
        backoffCallback(true, new RequestEndStatus(successCode, connection));
      });
    }
    function backoffDone(requestWentThrough, status) {
      var resolve = self2.resolve_;
      var reject = self2.reject_;
      var connection = status.connection;
      if (status.wasSuccessCode) {
        try {
          var result = self2.callback_(connection, connection.getResponseText());
          if (isJustDef(result)) {
            resolve(result);
          } else {
            resolve();
          }
        } catch (e) {
          reject(e);
        }
      } else {
        if (connection !== null) {
          var err = unknown();
          err.serverResponse = connection.getResponseText();
          if (self2.errorCallback_) {
            reject(self2.errorCallback_(connection, err));
          } else {
            reject(err);
          }
        } else {
          if (status.canceled) {
            var err = self2.appDelete_ ? appDeleted() : canceled();
            reject(err);
          } else {
            var err = retryLimitExceeded();
            reject(err);
          }
        }
      }
    }
    if (this.canceled_) {
      backoffDone(false, new RequestEndStatus(false, null, true));
    } else {
      this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);
    }
  };
  NetworkRequest2.prototype.getPromise = function() {
    return this.promise_;
  };
  NetworkRequest2.prototype.cancel = function(appDelete) {
    this.canceled_ = true;
    this.appDelete_ = appDelete || false;
    if (this.backoffId_ !== null) {
      stop(this.backoffId_);
    }
    if (this.pendingConnection_ !== null) {
      this.pendingConnection_.abort();
    }
  };
  NetworkRequest2.prototype.isRetryStatusCode_ = function(status) {
    var isFiveHundredCode = status >= 500 && status < 600;
    var extraRetryCodes = [
      408,
      429
    ];
    var isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;
    var isRequestSpecificRetryCode = this.additionalRetryCodes_.indexOf(status) !== -1;
    return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;
  };
  return NetworkRequest2;
}();
var RequestEndStatus = function() {
  function RequestEndStatus2(wasSuccessCode, connection, canceled2) {
    this.wasSuccessCode = wasSuccessCode;
    this.connection = connection;
    this.canceled = !!canceled2;
  }
  return RequestEndStatus2;
}();
function addAuthHeader_(headers, authToken) {
  if (authToken !== null && authToken.length > 0) {
    headers["Authorization"] = "Firebase " + authToken;
  }
}
function addVersionHeader_(headers, firebaseVersion) {
  headers["X-Firebase-Storage-Version"] = "webjs/" + (firebaseVersion !== null && firebaseVersion !== void 0 ? firebaseVersion : "AppManager");
}
function addGmpidHeader_(headers, appId) {
  if (appId) {
    headers["X-Firebase-GMPID"] = appId;
  }
}
function addAppCheckHeader_(headers, appCheckToken) {
  if (appCheckToken !== null) {
    headers["X-Firebase-AppCheck"] = appCheckToken;
  }
}
function makeRequest(requestInfo, appId, authToken, appCheckToken, pool, firebaseVersion) {
  var queryPart = makeQueryString(requestInfo.urlParams);
  var url = requestInfo.url + queryPart;
  var headers = Object.assign({}, requestInfo.headers);
  addGmpidHeader_(headers, appId);
  addAuthHeader_(headers, authToken);
  addVersionHeader_(headers, firebaseVersion);
  addAppCheckHeader_(headers, appCheckToken);
  return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, pool);
}
function getBlobBuilder() {
  if (typeof BlobBuilder !== "undefined") {
    return BlobBuilder;
  } else if (typeof WebKitBlobBuilder !== "undefined") {
    return WebKitBlobBuilder;
  } else {
    return void 0;
  }
}
function getBlob() {
  var args = [];
  for (var _i2 = 0; _i2 < arguments.length; _i2++) {
    args[_i2] = arguments[_i2];
  }
  var BlobBuilder2 = getBlobBuilder();
  if (BlobBuilder2 !== void 0) {
    var bb2 = new BlobBuilder2();
    for (var i = 0; i < args.length; i++) {
      bb2.append(args[i]);
    }
    return bb2.getBlob();
  } else {
    if (isNativeBlobDefined()) {
      return new Blob(args);
    } else {
      throw new FirebaseStorageError("unsupported-environment", "This browser doesn't seem to support creating Blobs");
    }
  }
}
function sliceBlob(blob, start2, end) {
  if (blob.webkitSlice) {
    return blob.webkitSlice(start2, end);
  } else if (blob.mozSlice) {
    return blob.mozSlice(start2, end);
  } else if (blob.slice) {
    return blob.slice(start2, end);
  }
  return null;
}
var FbsBlob = function() {
  function FbsBlob2(data, elideCopy) {
    var size = 0;
    var blobType = "";
    if (isNativeBlob(data)) {
      this.data_ = data;
      size = data.size;
      blobType = data.type;
    } else if (data instanceof ArrayBuffer) {
      if (elideCopy) {
        this.data_ = new Uint8Array(data);
      } else {
        this.data_ = new Uint8Array(data.byteLength);
        this.data_.set(new Uint8Array(data));
      }
      size = this.data_.length;
    } else if (data instanceof Uint8Array) {
      if (elideCopy) {
        this.data_ = data;
      } else {
        this.data_ = new Uint8Array(data.length);
        this.data_.set(data);
      }
      size = data.length;
    }
    this.size_ = size;
    this.type_ = blobType;
  }
  FbsBlob2.prototype.size = function() {
    return this.size_;
  };
  FbsBlob2.prototype.type = function() {
    return this.type_;
  };
  FbsBlob2.prototype.slice = function(startByte, endByte) {
    if (isNativeBlob(this.data_)) {
      var realBlob = this.data_;
      var sliced = sliceBlob(realBlob, startByte, endByte);
      if (sliced === null) {
        return null;
      }
      return new FbsBlob2(sliced);
    } else {
      var slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);
      return new FbsBlob2(slice, true);
    }
  };
  FbsBlob2.getBlob = function() {
    var args = [];
    for (var _i2 = 0; _i2 < arguments.length; _i2++) {
      args[_i2] = arguments[_i2];
    }
    if (isNativeBlobDefined()) {
      var blobby = args.map(function(val) {
        if (val instanceof FbsBlob2) {
          return val.data_;
        } else {
          return val;
        }
      });
      return new FbsBlob2(getBlob.apply(null, blobby));
    } else {
      var uint8Arrays = args.map(function(val) {
        if (isString(val)) {
          return dataFromString(StringFormat.RAW, val).data;
        } else {
          return val.data_;
        }
      });
      var finalLength_1 = 0;
      uint8Arrays.forEach(function(array) {
        finalLength_1 += array.byteLength;
      });
      var merged_1 = new Uint8Array(finalLength_1);
      var index_1 = 0;
      uint8Arrays.forEach(function(array) {
        for (var i = 0; i < array.length; i++) {
          merged_1[index_1++] = array[i];
        }
      });
      return new FbsBlob2(merged_1, true);
    }
  };
  FbsBlob2.prototype.uploadData = function() {
    return this.data_;
  };
  return FbsBlob2;
}();
function jsonObjectOrNull(s) {
  var obj;
  try {
    obj = JSON.parse(s);
  } catch (e) {
    return null;
  }
  if (isNonArrayObject(obj)) {
    return obj;
  } else {
    return null;
  }
}
function parent(path) {
  if (path.length === 0) {
    return null;
  }
  var index = path.lastIndexOf("/");
  if (index === -1) {
    return "";
  }
  var newPath = path.slice(0, index);
  return newPath;
}
function child2(path, childPath) {
  var canonicalChildPath = childPath.split("/").filter(function(component) {
    return component.length > 0;
  }).join("/");
  if (path.length === 0) {
    return canonicalChildPath;
  } else {
    return path + "/" + canonicalChildPath;
  }
}
function lastComponent(path) {
  var index = path.lastIndexOf("/", path.length - 2);
  if (index === -1) {
    return path;
  } else {
    return path.slice(index + 1);
  }
}
function noXform_(metadata, value) {
  return value;
}
var Mapping = function() {
  function Mapping2(server, local, writable, xform) {
    this.server = server;
    this.local = local || server;
    this.writable = !!writable;
    this.xform = xform || noXform_;
  }
  return Mapping2;
}();
var mappings_ = null;
function xformPath(fullPath) {
  if (!isString(fullPath) || fullPath.length < 2) {
    return fullPath;
  } else {
    return lastComponent(fullPath);
  }
}
function getMappings() {
  if (mappings_) {
    return mappings_;
  }
  var mappings = [];
  mappings.push(new Mapping("bucket"));
  mappings.push(new Mapping("generation"));
  mappings.push(new Mapping("metageneration"));
  mappings.push(new Mapping("name", "fullPath", true));
  function mappingsXformPath(_metadata, fullPath) {
    return xformPath(fullPath);
  }
  var nameMapping = new Mapping("name");
  nameMapping.xform = mappingsXformPath;
  mappings.push(nameMapping);
  function xformSize(_metadata, size) {
    if (size !== void 0) {
      return Number(size);
    } else {
      return size;
    }
  }
  var sizeMapping = new Mapping("size");
  sizeMapping.xform = xformSize;
  mappings.push(sizeMapping);
  mappings.push(new Mapping("timeCreated"));
  mappings.push(new Mapping("updated"));
  mappings.push(new Mapping("md5Hash", null, true));
  mappings.push(new Mapping("cacheControl", null, true));
  mappings.push(new Mapping("contentDisposition", null, true));
  mappings.push(new Mapping("contentEncoding", null, true));
  mappings.push(new Mapping("contentLanguage", null, true));
  mappings.push(new Mapping("contentType", null, true));
  mappings.push(new Mapping("metadata", "customMetadata", true));
  mappings_ = mappings;
  return mappings_;
}
function addRef(metadata, service) {
  function generateRef() {
    var bucket = metadata["bucket"];
    var path = metadata["fullPath"];
    var loc = new Location(bucket, path);
    return service._makeStorageReference(loc);
  }
  Object.defineProperty(metadata, "ref", { get: generateRef });
}
function fromResource(service, resource, mappings) {
  var metadata = {};
  metadata["type"] = "file";
  var len = mappings.length;
  for (var i = 0; i < len; i++) {
    var mapping = mappings[i];
    metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);
  }
  addRef(metadata, service);
  return metadata;
}
function fromResourceString(service, resourceString, mappings) {
  var obj = jsonObjectOrNull(resourceString);
  if (obj === null) {
    return null;
  }
  var resource = obj;
  return fromResource(service, resource, mappings);
}
function downloadUrlFromResourceString(metadata, resourceString, host) {
  var obj = jsonObjectOrNull(resourceString);
  if (obj === null) {
    return null;
  }
  if (!isString(obj["downloadTokens"])) {
    return null;
  }
  var tokens = obj["downloadTokens"];
  if (tokens.length === 0) {
    return null;
  }
  var encode2 = encodeURIComponent;
  var tokensList = tokens.split(",");
  var urls = tokensList.map(function(token) {
    var bucket = metadata["bucket"];
    var path = metadata["fullPath"];
    var urlPart = "/b/" + encode2(bucket) + "/o/" + encode2(path);
    var base = makeUrl(urlPart, host);
    var queryString = makeQueryString({
      alt: "media",
      token
    });
    return base + queryString;
  });
  return urls[0];
}
function toResourceString(metadata, mappings) {
  var resource = {};
  var len = mappings.length;
  for (var i = 0; i < len; i++) {
    var mapping = mappings[i];
    if (mapping.writable) {
      resource[mapping.server] = metadata[mapping.local];
    }
  }
  return JSON.stringify(resource);
}
var PREFIXES_KEY = "prefixes";
var ITEMS_KEY = "items";
function fromBackendResponse(service, bucket, resource) {
  var listResult = {
    prefixes: [],
    items: [],
    nextPageToken: resource["nextPageToken"]
  };
  if (resource[PREFIXES_KEY]) {
    for (var _i2 = 0, _a8 = resource[PREFIXES_KEY]; _i2 < _a8.length; _i2++) {
      var path = _a8[_i2];
      var pathWithoutTrailingSlash = path.replace(/\/$/, "");
      var reference = service._makeStorageReference(new Location(bucket, pathWithoutTrailingSlash));
      listResult.prefixes.push(reference);
    }
  }
  if (resource[ITEMS_KEY]) {
    for (var _b = 0, _c2 = resource[ITEMS_KEY]; _b < _c2.length; _b++) {
      var item = _c2[_b];
      var reference = service._makeStorageReference(new Location(bucket, item["name"]));
      listResult.items.push(reference);
    }
  }
  return listResult;
}
function fromResponseString(service, bucket, resourceString) {
  var obj = jsonObjectOrNull(resourceString);
  if (obj === null) {
    return null;
  }
  var resource = obj;
  return fromBackendResponse(service, bucket, resource);
}
var RequestInfo = function() {
  function RequestInfo2(url, method, handler, timeout) {
    this.url = url;
    this.method = method;
    this.handler = handler;
    this.timeout = timeout;
    this.urlParams = {};
    this.headers = {};
    this.body = null;
    this.errorHandler = null;
    this.progressCallback = null;
    this.successCodes = [200];
    this.additionalRetryCodes = [];
  }
  return RequestInfo2;
}();
function handlerCheck(cndn) {
  if (!cndn) {
    throw unknown();
  }
}
function metadataHandler(service, mappings) {
  function handler(xhr, text) {
    var metadata = fromResourceString(service, text, mappings);
    handlerCheck(metadata !== null);
    return metadata;
  }
  return handler;
}
function listHandler(service, bucket) {
  function handler(xhr, text) {
    var listResult = fromResponseString(service, bucket, text);
    handlerCheck(listResult !== null);
    return listResult;
  }
  return handler;
}
function downloadUrlHandler(service, mappings) {
  function handler(xhr, text) {
    var metadata = fromResourceString(service, text, mappings);
    handlerCheck(metadata !== null);
    return downloadUrlFromResourceString(metadata, text, service.host);
  }
  return handler;
}
function sharedErrorHandler(location2) {
  function errorHandler(xhr, err) {
    var newErr;
    if (xhr.getStatus() === 401) {
      if (xhr.getResponseText().includes("Firebase App Check token is invalid")) {
        newErr = unauthorizedApp();
      } else {
        newErr = unauthenticated();
      }
    } else {
      if (xhr.getStatus() === 402) {
        newErr = quotaExceeded(location2.bucket);
      } else {
        if (xhr.getStatus() === 403) {
          newErr = unauthorized(location2.path);
        } else {
          newErr = err;
        }
      }
    }
    newErr.serverResponse = err.serverResponse;
    return newErr;
  }
  return errorHandler;
}
function objectErrorHandler(location2) {
  var shared = sharedErrorHandler(location2);
  function errorHandler(xhr, err) {
    var newErr = shared(xhr, err);
    if (xhr.getStatus() === 404) {
      newErr = objectNotFound(location2.path);
    }
    newErr.serverResponse = err.serverResponse;
    return newErr;
  }
  return errorHandler;
}
function getMetadata$2(service, location2, mappings) {
  var urlPart = location2.fullServerUrl();
  var url = makeUrl(urlPart, service.host);
  var method = "GET";
  var timeout = service.maxOperationRetryTime;
  var requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);
  requestInfo.errorHandler = objectErrorHandler(location2);
  return requestInfo;
}
function list$2(service, location2, delimiter, pageToken, maxResults) {
  var urlParams = {};
  if (location2.isRoot) {
    urlParams["prefix"] = "";
  } else {
    urlParams["prefix"] = location2.path + "/";
  }
  if (delimiter && delimiter.length > 0) {
    urlParams["delimiter"] = delimiter;
  }
  if (pageToken) {
    urlParams["pageToken"] = pageToken;
  }
  if (maxResults) {
    urlParams["maxResults"] = maxResults;
  }
  var urlPart = location2.bucketOnlyServerUrl();
  var url = makeUrl(urlPart, service.host);
  var method = "GET";
  var timeout = service.maxOperationRetryTime;
  var requestInfo = new RequestInfo(url, method, listHandler(service, location2.bucket), timeout);
  requestInfo.urlParams = urlParams;
  requestInfo.errorHandler = sharedErrorHandler(location2);
  return requestInfo;
}
function getDownloadUrl(service, location2, mappings) {
  var urlPart = location2.fullServerUrl();
  var url = makeUrl(urlPart, service.host);
  var method = "GET";
  var timeout = service.maxOperationRetryTime;
  var requestInfo = new RequestInfo(url, method, downloadUrlHandler(service, mappings), timeout);
  requestInfo.errorHandler = objectErrorHandler(location2);
  return requestInfo;
}
function updateMetadata$2(service, location2, metadata, mappings) {
  var urlPart = location2.fullServerUrl();
  var url = makeUrl(urlPart, service.host);
  var method = "PATCH";
  var body = toResourceString(metadata, mappings);
  var headers = { "Content-Type": "application/json; charset=utf-8" };
  var timeout = service.maxOperationRetryTime;
  var requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);
  requestInfo.headers = headers;
  requestInfo.body = body;
  requestInfo.errorHandler = objectErrorHandler(location2);
  return requestInfo;
}
function deleteObject$2(service, location2) {
  var urlPart = location2.fullServerUrl();
  var url = makeUrl(urlPart, service.host);
  var method = "DELETE";
  var timeout = service.maxOperationRetryTime;
  function handler(_xhr, _text) {
  }
  var requestInfo = new RequestInfo(url, method, handler, timeout);
  requestInfo.successCodes = [200, 204];
  requestInfo.errorHandler = objectErrorHandler(location2);
  return requestInfo;
}
function determineContentType_(metadata, blob) {
  return metadata && metadata["contentType"] || blob && blob.type() || "application/octet-stream";
}
function metadataForUpload_(location2, blob, metadata) {
  var metadataClone = Object.assign({}, metadata);
  metadataClone["fullPath"] = location2.path;
  metadataClone["size"] = blob.size();
  if (!metadataClone["contentType"]) {
    metadataClone["contentType"] = determineContentType_(null, blob);
  }
  return metadataClone;
}
function multipartUpload(service, location2, mappings, blob, metadata) {
  var urlPart = location2.bucketOnlyServerUrl();
  var headers = {
    "X-Goog-Upload-Protocol": "multipart"
  };
  function genBoundary() {
    var str = "";
    for (var i = 0; i < 2; i++) {
      str = str + Math.random().toString().slice(2);
    }
    return str;
  }
  var boundary = genBoundary();
  headers["Content-Type"] = "multipart/related; boundary=" + boundary;
  var metadata_ = metadataForUpload_(location2, blob, metadata);
  var metadataString = toResourceString(metadata_, mappings);
  var preBlobPart = "--" + boundary + "\r\nContent-Type: application/json; charset=utf-8\r\n\r\n" + metadataString + "\r\n--" + boundary + "\r\nContent-Type: " + metadata_["contentType"] + "\r\n\r\n";
  var postBlobPart = "\r\n--" + boundary + "--";
  var body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);
  if (body === null) {
    throw cannotSliceBlob();
  }
  var urlParams = { name: metadata_["fullPath"] };
  var url = makeUrl(urlPart, service.host);
  var method = "POST";
  var timeout = service.maxUploadRetryTime;
  var requestInfo = new RequestInfo(url, method, metadataHandler(service, mappings), timeout);
  requestInfo.urlParams = urlParams;
  requestInfo.headers = headers;
  requestInfo.body = body.uploadData();
  requestInfo.errorHandler = sharedErrorHandler(location2);
  return requestInfo;
}
var ResumableUploadStatus = function() {
  function ResumableUploadStatus2(current, total, finalized, metadata) {
    this.current = current;
    this.total = total;
    this.finalized = !!finalized;
    this.metadata = metadata || null;
  }
  return ResumableUploadStatus2;
}();
function checkResumeHeader_(xhr, allowed) {
  var status = null;
  try {
    status = xhr.getResponseHeader("X-Goog-Upload-Status");
  } catch (e) {
    handlerCheck(false);
  }
  var allowedStatus = allowed || ["active"];
  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);
  return status;
}
function createResumableUpload(service, location2, mappings, blob, metadata) {
  var urlPart = location2.bucketOnlyServerUrl();
  var metadataForUpload = metadataForUpload_(location2, blob, metadata);
  var urlParams = { name: metadataForUpload["fullPath"] };
  var url = makeUrl(urlPart, service.host);
  var method = "POST";
  var headers = {
    "X-Goog-Upload-Protocol": "resumable",
    "X-Goog-Upload-Command": "start",
    "X-Goog-Upload-Header-Content-Length": "" + blob.size(),
    "X-Goog-Upload-Header-Content-Type": metadataForUpload["contentType"],
    "Content-Type": "application/json; charset=utf-8"
  };
  var body = toResourceString(metadataForUpload, mappings);
  var timeout = service.maxUploadRetryTime;
  function handler(xhr) {
    checkResumeHeader_(xhr);
    var url2;
    try {
      url2 = xhr.getResponseHeader("X-Goog-Upload-URL");
    } catch (e) {
      handlerCheck(false);
    }
    handlerCheck(isString(url2));
    return url2;
  }
  var requestInfo = new RequestInfo(url, method, handler, timeout);
  requestInfo.urlParams = urlParams;
  requestInfo.headers = headers;
  requestInfo.body = body;
  requestInfo.errorHandler = sharedErrorHandler(location2);
  return requestInfo;
}
function getResumableUploadStatus(service, location2, url, blob) {
  var headers = { "X-Goog-Upload-Command": "query" };
  function handler(xhr) {
    var status = checkResumeHeader_(xhr, ["active", "final"]);
    var sizeString = null;
    try {
      sizeString = xhr.getResponseHeader("X-Goog-Upload-Size-Received");
    } catch (e) {
      handlerCheck(false);
    }
    if (!sizeString) {
      handlerCheck(false);
    }
    var size = Number(sizeString);
    handlerCheck(!isNaN(size));
    return new ResumableUploadStatus(size, blob.size(), status === "final");
  }
  var method = "POST";
  var timeout = service.maxUploadRetryTime;
  var requestInfo = new RequestInfo(url, method, handler, timeout);
  requestInfo.headers = headers;
  requestInfo.errorHandler = sharedErrorHandler(location2);
  return requestInfo;
}
var RESUMABLE_UPLOAD_CHUNK_SIZE = 256 * 1024;
function continueResumableUpload(location2, service, url, blob, chunkSize, mappings, status, progressCallback) {
  var status_ = new ResumableUploadStatus(0, 0);
  if (status) {
    status_.current = status.current;
    status_.total = status.total;
  } else {
    status_.current = 0;
    status_.total = blob.size();
  }
  if (blob.size() !== status_.total) {
    throw serverFileWrongSize();
  }
  var bytesLeft = status_.total - status_.current;
  var bytesToUpload = bytesLeft;
  if (chunkSize > 0) {
    bytesToUpload = Math.min(bytesToUpload, chunkSize);
  }
  var startByte = status_.current;
  var endByte = startByte + bytesToUpload;
  var uploadCommand = bytesToUpload === bytesLeft ? "upload, finalize" : "upload";
  var headers = {
    "X-Goog-Upload-Command": uploadCommand,
    "X-Goog-Upload-Offset": "" + status_.current
  };
  var body = blob.slice(startByte, endByte);
  if (body === null) {
    throw cannotSliceBlob();
  }
  function handler(xhr, text) {
    var uploadStatus = checkResumeHeader_(xhr, ["active", "final"]);
    var newCurrent = status_.current + bytesToUpload;
    var size = blob.size();
    var metadata;
    if (uploadStatus === "final") {
      metadata = metadataHandler(service, mappings)(xhr, text);
    } else {
      metadata = null;
    }
    return new ResumableUploadStatus(newCurrent, size, uploadStatus === "final", metadata);
  }
  var method = "POST";
  var timeout = service.maxUploadRetryTime;
  var requestInfo = new RequestInfo(url, method, handler, timeout);
  requestInfo.headers = headers;
  requestInfo.body = body.uploadData();
  requestInfo.progressCallback = progressCallback || null;
  requestInfo.errorHandler = sharedErrorHandler(location2);
  return requestInfo;
}
var Observer = function() {
  function Observer2(nextOrObserver, error2, complete) {
    var asFunctions = isFunction(nextOrObserver) || error2 != null || complete != null;
    if (asFunctions) {
      this.next = nextOrObserver;
      this.error = error2;
      this.complete = complete;
    } else {
      var observer = nextOrObserver;
      this.next = observer.next;
      this.error = observer.error;
      this.complete = observer.complete;
    }
  }
  return Observer2;
}();
function async(f) {
  return function() {
    var argsToForward = [];
    for (var _i2 = 0; _i2 < arguments.length; _i2++) {
      argsToForward[_i2] = arguments[_i2];
    }
    Promise.resolve().then(function() {
      return f.apply(void 0, argsToForward);
    });
  };
}
var UploadTask = function() {
  function UploadTask2(ref3, blob, metadata) {
    var _this = this;
    if (metadata === void 0) {
      metadata = null;
    }
    this._transferred = 0;
    this._needToFetchStatus = false;
    this._needToFetchMetadata = false;
    this._observers = [];
    this._error = void 0;
    this._uploadUrl = void 0;
    this._request = void 0;
    this._chunkMultiplier = 1;
    this._resolve = void 0;
    this._reject = void 0;
    this._ref = ref3;
    this._blob = blob;
    this._metadata = metadata;
    this._mappings = getMappings();
    this._resumable = this._shouldDoResumable(this._blob);
    this._state = "running";
    this._errorHandler = function(error2) {
      _this._request = void 0;
      _this._chunkMultiplier = 1;
      if (error2._codeEquals("canceled")) {
        _this._needToFetchStatus = true;
        _this.completeTransitions_();
      } else {
        _this._error = error2;
        _this._transition("error");
      }
    };
    this._metadataErrorHandler = function(error2) {
      _this._request = void 0;
      if (error2._codeEquals("canceled")) {
        _this.completeTransitions_();
      } else {
        _this._error = error2;
        _this._transition("error");
      }
    };
    this._promise = new Promise(function(resolve, reject) {
      _this._resolve = resolve;
      _this._reject = reject;
      _this._start();
    });
    this._promise.then(null, function() {
    });
  }
  UploadTask2.prototype._makeProgressCallback = function() {
    var _this = this;
    var sizeBefore = this._transferred;
    return function(loaded) {
      return _this._updateProgress(sizeBefore + loaded);
    };
  };
  UploadTask2.prototype._shouldDoResumable = function(blob) {
    return blob.size() > 256 * 1024;
  };
  UploadTask2.prototype._start = function() {
    if (this._state !== "running") {
      return;
    }
    if (this._request !== void 0) {
      return;
    }
    if (this._resumable) {
      if (this._uploadUrl === void 0) {
        this._createResumable();
      } else {
        if (this._needToFetchStatus) {
          this._fetchStatus();
        } else {
          if (this._needToFetchMetadata) {
            this._fetchMetadata();
          } else {
            this._continueUpload();
          }
        }
      }
    } else {
      this._oneShotUpload();
    }
  };
  UploadTask2.prototype._resolveToken = function(callback) {
    var _this = this;
    Promise.all([
      this._ref.storage._getAuthToken(),
      this._ref.storage._getAppCheckToken()
    ]).then(function(_a8) {
      var authToken = _a8[0], appCheckToken = _a8[1];
      switch (_this._state) {
        case "running":
          callback(authToken, appCheckToken);
          break;
        case "canceling":
          _this._transition("canceled");
          break;
        case "pausing":
          _this._transition("paused");
          break;
      }
    });
  };
  UploadTask2.prototype._createResumable = function() {
    var _this = this;
    this._resolveToken(function(authToken, appCheckToken) {
      var requestInfo = createResumableUpload(_this._ref.storage, _this._ref._location, _this._mappings, _this._blob, _this._metadata);
      var createRequest = _this._ref.storage._makeRequest(requestInfo, authToken, appCheckToken);
      _this._request = createRequest;
      createRequest.getPromise().then(function(url) {
        _this._request = void 0;
        _this._uploadUrl = url;
        _this._needToFetchStatus = false;
        _this.completeTransitions_();
      }, _this._errorHandler);
    });
  };
  UploadTask2.prototype._fetchStatus = function() {
    var _this = this;
    var url = this._uploadUrl;
    this._resolveToken(function(authToken, appCheckToken) {
      var requestInfo = getResumableUploadStatus(_this._ref.storage, _this._ref._location, url, _this._blob);
      var statusRequest = _this._ref.storage._makeRequest(requestInfo, authToken, appCheckToken);
      _this._request = statusRequest;
      statusRequest.getPromise().then(function(status) {
        status = status;
        _this._request = void 0;
        _this._updateProgress(status.current);
        _this._needToFetchStatus = false;
        if (status.finalized) {
          _this._needToFetchMetadata = true;
        }
        _this.completeTransitions_();
      }, _this._errorHandler);
    });
  };
  UploadTask2.prototype._continueUpload = function() {
    var _this = this;
    var chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;
    var status = new ResumableUploadStatus(this._transferred, this._blob.size());
    var url = this._uploadUrl;
    this._resolveToken(function(authToken, appCheckToken) {
      var requestInfo;
      try {
        requestInfo = continueResumableUpload(_this._ref._location, _this._ref.storage, url, _this._blob, chunkSize, _this._mappings, status, _this._makeProgressCallback());
      } catch (e) {
        _this._error = e;
        _this._transition("error");
        return;
      }
      var uploadRequest = _this._ref.storage._makeRequest(requestInfo, authToken, appCheckToken);
      _this._request = uploadRequest;
      uploadRequest.getPromise().then(function(newStatus) {
        _this._increaseMultiplier();
        _this._request = void 0;
        _this._updateProgress(newStatus.current);
        if (newStatus.finalized) {
          _this._metadata = newStatus.metadata;
          _this._transition("success");
        } else {
          _this.completeTransitions_();
        }
      }, _this._errorHandler);
    });
  };
  UploadTask2.prototype._increaseMultiplier = function() {
    var currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;
    if (currentSize < 32 * 1024 * 1024) {
      this._chunkMultiplier *= 2;
    }
  };
  UploadTask2.prototype._fetchMetadata = function() {
    var _this = this;
    this._resolveToken(function(authToken, appCheckToken) {
      var requestInfo = getMetadata$2(_this._ref.storage, _this._ref._location, _this._mappings);
      var metadataRequest = _this._ref.storage._makeRequest(requestInfo, authToken, appCheckToken);
      _this._request = metadataRequest;
      metadataRequest.getPromise().then(function(metadata) {
        _this._request = void 0;
        _this._metadata = metadata;
        _this._transition("success");
      }, _this._metadataErrorHandler);
    });
  };
  UploadTask2.prototype._oneShotUpload = function() {
    var _this = this;
    this._resolveToken(function(authToken, appCheckToken) {
      var requestInfo = multipartUpload(_this._ref.storage, _this._ref._location, _this._mappings, _this._blob, _this._metadata);
      var multipartRequest = _this._ref.storage._makeRequest(requestInfo, authToken, appCheckToken);
      _this._request = multipartRequest;
      multipartRequest.getPromise().then(function(metadata) {
        _this._request = void 0;
        _this._metadata = metadata;
        _this._updateProgress(_this._blob.size());
        _this._transition("success");
      }, _this._errorHandler);
    });
  };
  UploadTask2.prototype._updateProgress = function(transferred) {
    var old = this._transferred;
    this._transferred = transferred;
    if (this._transferred !== old) {
      this._notifyObservers();
    }
  };
  UploadTask2.prototype._transition = function(state) {
    if (this._state === state) {
      return;
    }
    switch (state) {
      case "canceling":
        this._state = state;
        if (this._request !== void 0) {
          this._request.cancel();
        }
        break;
      case "pausing":
        this._state = state;
        if (this._request !== void 0) {
          this._request.cancel();
        }
        break;
      case "running":
        var wasPaused = this._state === "paused";
        this._state = state;
        if (wasPaused) {
          this._notifyObservers();
          this._start();
        }
        break;
      case "paused":
        this._state = state;
        this._notifyObservers();
        break;
      case "canceled":
        this._error = canceled();
        this._state = state;
        this._notifyObservers();
        break;
      case "error":
        this._state = state;
        this._notifyObservers();
        break;
      case "success":
        this._state = state;
        this._notifyObservers();
        break;
    }
  };
  UploadTask2.prototype.completeTransitions_ = function() {
    switch (this._state) {
      case "pausing":
        this._transition("paused");
        break;
      case "canceling":
        this._transition("canceled");
        break;
      case "running":
        this._start();
        break;
    }
  };
  Object.defineProperty(UploadTask2.prototype, "snapshot", {
    get: function() {
      var externalState = taskStateFromInternalTaskState(this._state);
      return {
        bytesTransferred: this._transferred,
        totalBytes: this._blob.size(),
        state: externalState,
        metadata: this._metadata,
        task: this,
        ref: this._ref
      };
    },
    enumerable: false,
    configurable: true
  });
  UploadTask2.prototype.on = function(type, nextOrObserver, error2, completed) {
    var _this = this;
    var observer = new Observer(nextOrObserver, error2, completed);
    this._addObserver(observer);
    return function() {
      _this._removeObserver(observer);
    };
  };
  UploadTask2.prototype.then = function(onFulfilled, onRejected) {
    return this._promise.then(onFulfilled, onRejected);
  };
  UploadTask2.prototype.catch = function(onRejected) {
    return this.then(null, onRejected);
  };
  UploadTask2.prototype._addObserver = function(observer) {
    this._observers.push(observer);
    this._notifyObserver(observer);
  };
  UploadTask2.prototype._removeObserver = function(observer) {
    var i = this._observers.indexOf(observer);
    if (i !== -1) {
      this._observers.splice(i, 1);
    }
  };
  UploadTask2.prototype._notifyObservers = function() {
    var _this = this;
    this._finishPromise();
    var observers = this._observers.slice();
    observers.forEach(function(observer) {
      _this._notifyObserver(observer);
    });
  };
  UploadTask2.prototype._finishPromise = function() {
    if (this._resolve !== void 0) {
      var triggered = true;
      switch (taskStateFromInternalTaskState(this._state)) {
        case TaskState.SUCCESS:
          async(this._resolve.bind(null, this.snapshot))();
          break;
        case TaskState.CANCELED:
        case TaskState.ERROR:
          var toCall = this._reject;
          async(toCall.bind(null, this._error))();
          break;
        default:
          triggered = false;
          break;
      }
      if (triggered) {
        this._resolve = void 0;
        this._reject = void 0;
      }
    }
  };
  UploadTask2.prototype._notifyObserver = function(observer) {
    var externalState = taskStateFromInternalTaskState(this._state);
    switch (externalState) {
      case TaskState.RUNNING:
      case TaskState.PAUSED:
        if (observer.next) {
          async(observer.next.bind(observer, this.snapshot))();
        }
        break;
      case TaskState.SUCCESS:
        if (observer.complete) {
          async(observer.complete.bind(observer))();
        }
        break;
      case TaskState.CANCELED:
      case TaskState.ERROR:
        if (observer.error) {
          async(observer.error.bind(observer, this._error))();
        }
        break;
      default:
        if (observer.error) {
          async(observer.error.bind(observer, this._error))();
        }
    }
  };
  UploadTask2.prototype.resume = function() {
    var valid = this._state === "paused" || this._state === "pausing";
    if (valid) {
      this._transition("running");
    }
    return valid;
  };
  UploadTask2.prototype.pause = function() {
    var valid = this._state === "running";
    if (valid) {
      this._transition("pausing");
    }
    return valid;
  };
  UploadTask2.prototype.cancel = function() {
    var valid = this._state === "running" || this._state === "pausing";
    if (valid) {
      this._transition("canceling");
    }
    return valid;
  };
  return UploadTask2;
}();
var Reference2 = function() {
  function Reference3(_service, location2) {
    this._service = _service;
    if (location2 instanceof Location) {
      this._location = location2;
    } else {
      this._location = Location.makeFromUrl(location2, _service.host);
    }
  }
  Reference3.prototype.toString = function() {
    return "gs://" + this._location.bucket + "/" + this._location.path;
  };
  Reference3.prototype._newRef = function(service, location2) {
    return new Reference3(service, location2);
  };
  Object.defineProperty(Reference3.prototype, "root", {
    get: function() {
      var location2 = new Location(this._location.bucket, "");
      return this._newRef(this._service, location2);
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Reference3.prototype, "bucket", {
    get: function() {
      return this._location.bucket;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Reference3.prototype, "fullPath", {
    get: function() {
      return this._location.path;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Reference3.prototype, "name", {
    get: function() {
      return lastComponent(this._location.path);
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Reference3.prototype, "storage", {
    get: function() {
      return this._service;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Reference3.prototype, "parent", {
    get: function() {
      var newPath = parent(this._location.path);
      if (newPath === null) {
        return null;
      }
      var location2 = new Location(this._location.bucket, newPath);
      return new Reference3(this._service, location2);
    },
    enumerable: false,
    configurable: true
  });
  Reference3.prototype._throwIfRoot = function(name10) {
    if (this._location.path === "") {
      throw invalidRootOperation(name10);
    }
  };
  return Reference3;
}();
function uploadBytesResumable$1(ref3, data, metadata) {
  ref3._throwIfRoot("uploadBytesResumable");
  return new UploadTask(ref3, new FbsBlob(data), metadata);
}
function listAll$1(ref3) {
  var accumulator = {
    prefixes: [],
    items: []
  };
  return listAllHelper(ref3, accumulator).then(function() {
    return accumulator;
  });
}
function listAllHelper(ref3, accumulator, pageToken) {
  return __awaiter(this, void 0, void 0, function() {
    var opt, nextPage;
    var _a8, _b;
    return __generator(this, function(_c2) {
      switch (_c2.label) {
        case 0:
          opt = {
            pageToken
          };
          return [4, list$1(ref3, opt)];
        case 1:
          nextPage = _c2.sent();
          (_a8 = accumulator.prefixes).push.apply(_a8, nextPage.prefixes);
          (_b = accumulator.items).push.apply(_b, nextPage.items);
          if (!(nextPage.nextPageToken != null))
            return [3, 3];
          return [4, listAllHelper(ref3, accumulator, nextPage.nextPageToken)];
        case 2:
          _c2.sent();
          _c2.label = 3;
        case 3:
          return [2];
      }
    });
  });
}
function list$1(ref3, options) {
  return __awaiter(this, void 0, void 0, function() {
    var op, requestInfo;
    return __generator(this, function(_a8) {
      switch (_a8.label) {
        case 0:
          if (options != null) {
            if (typeof options.maxResults === "number") {
              validateNumber("options.maxResults", 1, 1e3, options.maxResults);
            }
          }
          op = options || {};
          requestInfo = list$2(ref3.storage, ref3._location, "/", op.pageToken, op.maxResults);
          return [4, ref3.storage.makeRequestWithTokens(requestInfo)];
        case 1:
          return [2, _a8.sent().getPromise()];
      }
    });
  });
}
function getMetadata$1(ref3) {
  return __awaiter(this, void 0, void 0, function() {
    var requestInfo;
    return __generator(this, function(_a8) {
      switch (_a8.label) {
        case 0:
          ref3._throwIfRoot("getMetadata");
          requestInfo = getMetadata$2(ref3.storage, ref3._location, getMappings());
          return [4, ref3.storage.makeRequestWithTokens(requestInfo)];
        case 1:
          return [2, _a8.sent().getPromise()];
      }
    });
  });
}
function updateMetadata$1(ref3, metadata) {
  return __awaiter(this, void 0, void 0, function() {
    var requestInfo;
    return __generator(this, function(_a8) {
      switch (_a8.label) {
        case 0:
          ref3._throwIfRoot("updateMetadata");
          requestInfo = updateMetadata$2(ref3.storage, ref3._location, metadata, getMappings());
          return [4, ref3.storage.makeRequestWithTokens(requestInfo)];
        case 1:
          return [2, _a8.sent().getPromise()];
      }
    });
  });
}
function getDownloadURL$1(ref3) {
  return __awaiter(this, void 0, void 0, function() {
    var requestInfo;
    return __generator(this, function(_a8) {
      switch (_a8.label) {
        case 0:
          ref3._throwIfRoot("getDownloadURL");
          requestInfo = getDownloadUrl(ref3.storage, ref3._location, getMappings());
          return [4, ref3.storage.makeRequestWithTokens(requestInfo)];
        case 1:
          return [2, _a8.sent().getPromise().then(function(url) {
            if (url === null) {
              throw noDownloadURL();
            }
            return url;
          })];
      }
    });
  });
}
function deleteObject$1(ref3) {
  return __awaiter(this, void 0, void 0, function() {
    var requestInfo;
    return __generator(this, function(_a8) {
      switch (_a8.label) {
        case 0:
          ref3._throwIfRoot("deleteObject");
          requestInfo = deleteObject$2(ref3.storage, ref3._location);
          return [4, ref3.storage.makeRequestWithTokens(requestInfo)];
        case 1:
          return [2, _a8.sent().getPromise()];
      }
    });
  });
}
function _getChild$1(ref3, childPath) {
  var newPath = child2(ref3._location.path, childPath);
  var location2 = new Location(ref3._location.bucket, newPath);
  return new Reference2(ref3.storage, location2);
}
function isUrl(path) {
  return /^[A-Za-z]+:\/\//.test(path);
}
function refFromURL2(service, url) {
  return new Reference2(service, url);
}
function refFromPath(ref3, path) {
  if (ref3 instanceof FirebaseStorageImpl) {
    var service = ref3;
    if (service._bucket == null) {
      throw noDefaultBucket();
    }
    var reference = new Reference2(service, service._bucket);
    if (path != null) {
      return refFromPath(reference, path);
    } else {
      return reference;
    }
  } else {
    if (path !== void 0) {
      return _getChild$1(ref3, path);
    } else {
      return ref3;
    }
  }
}
function ref$1(serviceOrRef, pathOrUrl) {
  if (pathOrUrl && isUrl(pathOrUrl)) {
    if (serviceOrRef instanceof FirebaseStorageImpl) {
      return refFromURL2(serviceOrRef, pathOrUrl);
    } else {
      throw invalidArgument("To use ref(service, url), the first argument must be a Storage instance.");
    }
  } else {
    return refFromPath(serviceOrRef, pathOrUrl);
  }
}
function extractBucket(host, config) {
  var bucketString = config === null || config === void 0 ? void 0 : config[CONFIG_STORAGE_BUCKET_KEY];
  if (bucketString == null) {
    return null;
  }
  return Location.makeFromBucketSpec(bucketString, host);
}
function connectStorageEmulator$1(storage, host, port, options) {
  if (options === void 0) {
    options = {};
  }
  storage.host = "http://" + host + ":" + port;
  var mockUserToken = options.mockUserToken;
  if (mockUserToken) {
    storage._overrideAuthToken = typeof mockUserToken === "string" ? mockUserToken : createMockUserToken(mockUserToken, storage.app.options.projectId);
  }
}
var FirebaseStorageImpl = function() {
  function FirebaseStorageImpl2(app, _authProvider, _appCheckProvider, _pool, _url, _firebaseVersion) {
    this.app = app;
    this._authProvider = _authProvider;
    this._appCheckProvider = _appCheckProvider;
    this._pool = _pool;
    this._url = _url;
    this._firebaseVersion = _firebaseVersion;
    this._bucket = null;
    this._host = DEFAULT_HOST;
    this._appId = null;
    this._deleted = false;
    this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;
    this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;
    this._requests = new Set();
    if (_url != null) {
      this._bucket = Location.makeFromBucketSpec(_url, this._host);
    } else {
      this._bucket = extractBucket(this._host, this.app.options);
    }
  }
  Object.defineProperty(FirebaseStorageImpl2.prototype, "host", {
    get: function() {
      return this._host;
    },
    set: function(host) {
      this._host = host;
      if (this._url != null) {
        this._bucket = Location.makeFromBucketSpec(this._url, host);
      } else {
        this._bucket = extractBucket(host, this.app.options);
      }
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(FirebaseStorageImpl2.prototype, "maxUploadRetryTime", {
    get: function() {
      return this._maxUploadRetryTime;
    },
    set: function(time) {
      validateNumber("time", 0, Number.POSITIVE_INFINITY, time);
      this._maxUploadRetryTime = time;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(FirebaseStorageImpl2.prototype, "maxOperationRetryTime", {
    get: function() {
      return this._maxOperationRetryTime;
    },
    set: function(time) {
      validateNumber("time", 0, Number.POSITIVE_INFINITY, time);
      this._maxOperationRetryTime = time;
    },
    enumerable: false,
    configurable: true
  });
  FirebaseStorageImpl2.prototype._getAuthToken = function() {
    return __awaiter(this, void 0, void 0, function() {
      var auth, tokenData;
      return __generator(this, function(_a8) {
        switch (_a8.label) {
          case 0:
            if (this._overrideAuthToken) {
              return [2, this._overrideAuthToken];
            }
            auth = this._authProvider.getImmediate({ optional: true });
            if (!auth)
              return [3, 2];
            return [4, auth.getToken()];
          case 1:
            tokenData = _a8.sent();
            if (tokenData !== null) {
              return [2, tokenData.accessToken];
            }
            _a8.label = 2;
          case 2:
            return [2, null];
        }
      });
    });
  };
  FirebaseStorageImpl2.prototype._getAppCheckToken = function() {
    return __awaiter(this, void 0, void 0, function() {
      var appCheck, result;
      return __generator(this, function(_a8) {
        switch (_a8.label) {
          case 0:
            appCheck = this._appCheckProvider.getImmediate({ optional: true });
            if (!appCheck)
              return [3, 2];
            return [4, appCheck.getToken()];
          case 1:
            result = _a8.sent();
            return [2, result.token];
          case 2:
            return [2, null];
        }
      });
    });
  };
  FirebaseStorageImpl2.prototype._delete = function() {
    if (!this._deleted) {
      this._deleted = true;
      this._requests.forEach(function(request) {
        return request.cancel();
      });
      this._requests.clear();
    }
    return Promise.resolve();
  };
  FirebaseStorageImpl2.prototype._makeStorageReference = function(loc) {
    return new Reference2(this, loc);
  };
  FirebaseStorageImpl2.prototype._makeRequest = function(requestInfo, authToken, appCheckToken) {
    var _this = this;
    if (!this._deleted) {
      var request_1 = makeRequest(requestInfo, this._appId, authToken, appCheckToken, this._pool, this._firebaseVersion);
      this._requests.add(request_1);
      request_1.getPromise().then(function() {
        return _this._requests.delete(request_1);
      }, function() {
        return _this._requests.delete(request_1);
      });
      return request_1;
    } else {
      return new FailRequest(appDeleted());
    }
  };
  FirebaseStorageImpl2.prototype.makeRequestWithTokens = function(requestInfo) {
    return __awaiter(this, void 0, void 0, function() {
      var _a8, authToken, appCheckToken;
      return __generator(this, function(_b) {
        switch (_b.label) {
          case 0:
            return [4, Promise.all([
              this._getAuthToken(),
              this._getAppCheckToken()
            ])];
          case 1:
            _a8 = _b.sent(), authToken = _a8[0], appCheckToken = _a8[1];
            return [2, this._makeRequest(requestInfo, authToken, appCheckToken)];
        }
      });
    });
  };
  return FirebaseStorageImpl2;
}();
function uploadBytesResumable(ref3, data, metadata) {
  ref3 = getModularInstance(ref3);
  return uploadBytesResumable$1(ref3, data, metadata);
}
function getMetadata(ref3) {
  ref3 = getModularInstance(ref3);
  return getMetadata$1(ref3);
}
function updateMetadata(ref3, metadata) {
  ref3 = getModularInstance(ref3);
  return updateMetadata$1(ref3, metadata);
}
function list(ref3, options) {
  ref3 = getModularInstance(ref3);
  return list$1(ref3, options);
}
function listAll(ref3) {
  ref3 = getModularInstance(ref3);
  return listAll$1(ref3);
}
function getDownloadURL(ref3) {
  ref3 = getModularInstance(ref3);
  return getDownloadURL$1(ref3);
}
function deleteObject(ref3) {
  ref3 = getModularInstance(ref3);
  return deleteObject$1(ref3);
}
function ref2(serviceOrRef, pathOrUrl) {
  serviceOrRef = getModularInstance(serviceOrRef);
  return ref$1(serviceOrRef, pathOrUrl);
}
function _getChild(ref3, childPath) {
  return _getChild$1(ref3, childPath);
}
function connectStorageEmulator(storage, host, port, options) {
  if (options === void 0) {
    options = {};
  }
  connectStorageEmulator$1(storage, host, port, options);
}
var UploadTaskSnapshotCompat = function() {
  function UploadTaskSnapshotCompat2(_delegate, task, ref3) {
    this._delegate = _delegate;
    this.task = task;
    this.ref = ref3;
  }
  Object.defineProperty(UploadTaskSnapshotCompat2.prototype, "bytesTransferred", {
    get: function() {
      return this._delegate.bytesTransferred;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(UploadTaskSnapshotCompat2.prototype, "metadata", {
    get: function() {
      return this._delegate.metadata;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(UploadTaskSnapshotCompat2.prototype, "state", {
    get: function() {
      return this._delegate.state;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(UploadTaskSnapshotCompat2.prototype, "totalBytes", {
    get: function() {
      return this._delegate.totalBytes;
    },
    enumerable: false,
    configurable: true
  });
  return UploadTaskSnapshotCompat2;
}();
var UploadTaskCompat = function() {
  function UploadTaskCompat2(_delegate, _ref) {
    this._delegate = _delegate;
    this._ref = _ref;
    this.cancel = this._delegate.cancel.bind(this._delegate);
    this.catch = this._delegate.catch.bind(this._delegate);
    this.pause = this._delegate.pause.bind(this._delegate);
    this.resume = this._delegate.resume.bind(this._delegate);
  }
  Object.defineProperty(UploadTaskCompat2.prototype, "snapshot", {
    get: function() {
      return new UploadTaskSnapshotCompat(this._delegate.snapshot, this, this._ref);
    },
    enumerable: false,
    configurable: true
  });
  UploadTaskCompat2.prototype.then = function(onFulfilled, onRejected) {
    var _this = this;
    return this._delegate.then(function(snapshot) {
      if (onFulfilled) {
        return onFulfilled(new UploadTaskSnapshotCompat(snapshot, _this, _this._ref));
      }
    }, onRejected);
  };
  UploadTaskCompat2.prototype.on = function(type, nextOrObserver, error2, completed) {
    var _this = this;
    var wrappedNextOrObserver = void 0;
    if (!!nextOrObserver) {
      if (typeof nextOrObserver === "function") {
        wrappedNextOrObserver = function(taskSnapshot) {
          return nextOrObserver(new UploadTaskSnapshotCompat(taskSnapshot, _this, _this._ref));
        };
      } else {
        wrappedNextOrObserver = {
          next: !!nextOrObserver.next ? function(taskSnapshot) {
            return nextOrObserver.next(new UploadTaskSnapshotCompat(taskSnapshot, _this, _this._ref));
          } : void 0,
          complete: nextOrObserver.complete || void 0,
          error: nextOrObserver.error || void 0
        };
      }
    }
    return this._delegate.on(type, wrappedNextOrObserver, error2 || void 0, completed || void 0);
  };
  return UploadTaskCompat2;
}();
var ListResultCompat = function() {
  function ListResultCompat2(_delegate, _service) {
    this._delegate = _delegate;
    this._service = _service;
  }
  Object.defineProperty(ListResultCompat2.prototype, "prefixes", {
    get: function() {
      var _this = this;
      return this._delegate.prefixes.map(function(ref3) {
        return new ReferenceCompat(ref3, _this._service);
      });
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(ListResultCompat2.prototype, "items", {
    get: function() {
      var _this = this;
      return this._delegate.items.map(function(ref3) {
        return new ReferenceCompat(ref3, _this._service);
      });
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(ListResultCompat2.prototype, "nextPageToken", {
    get: function() {
      return this._delegate.nextPageToken || null;
    },
    enumerable: false,
    configurable: true
  });
  return ListResultCompat2;
}();
var ReferenceCompat = function() {
  function ReferenceCompat2(_delegate, storage) {
    this._delegate = _delegate;
    this.storage = storage;
  }
  Object.defineProperty(ReferenceCompat2.prototype, "name", {
    get: function() {
      return this._delegate.name;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(ReferenceCompat2.prototype, "bucket", {
    get: function() {
      return this._delegate.bucket;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(ReferenceCompat2.prototype, "fullPath", {
    get: function() {
      return this._delegate.fullPath;
    },
    enumerable: false,
    configurable: true
  });
  ReferenceCompat2.prototype.toString = function() {
    return this._delegate.toString();
  };
  ReferenceCompat2.prototype.child = function(childPath) {
    var reference = _getChild(this._delegate, childPath);
    return new ReferenceCompat2(reference, this.storage);
  };
  Object.defineProperty(ReferenceCompat2.prototype, "root", {
    get: function() {
      return new ReferenceCompat2(this._delegate.root, this.storage);
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(ReferenceCompat2.prototype, "parent", {
    get: function() {
      var reference = this._delegate.parent;
      if (reference == null) {
        return null;
      }
      return new ReferenceCompat2(reference, this.storage);
    },
    enumerable: false,
    configurable: true
  });
  ReferenceCompat2.prototype.put = function(data, metadata) {
    this._throwIfRoot("put");
    return new UploadTaskCompat(uploadBytesResumable(this._delegate, data, metadata), this);
  };
  ReferenceCompat2.prototype.putString = function(value, format, metadata) {
    if (format === void 0) {
      format = StringFormat.RAW;
    }
    this._throwIfRoot("putString");
    var data = dataFromString(format, value);
    var metadataClone = __assign({}, metadata);
    if (metadataClone["contentType"] == null && data.contentType != null) {
      metadataClone["contentType"] = data.contentType;
    }
    return new UploadTaskCompat(new UploadTask(this._delegate, new FbsBlob(data.data, true), metadataClone), this);
  };
  ReferenceCompat2.prototype.listAll = function() {
    var _this = this;
    return listAll(this._delegate).then(function(r) {
      return new ListResultCompat(r, _this.storage);
    });
  };
  ReferenceCompat2.prototype.list = function(options) {
    var _this = this;
    return list(this._delegate, options || void 0).then(function(r) {
      return new ListResultCompat(r, _this.storage);
    });
  };
  ReferenceCompat2.prototype.getMetadata = function() {
    return getMetadata(this._delegate);
  };
  ReferenceCompat2.prototype.updateMetadata = function(metadata) {
    return updateMetadata(this._delegate, metadata);
  };
  ReferenceCompat2.prototype.getDownloadURL = function() {
    return getDownloadURL(this._delegate);
  };
  ReferenceCompat2.prototype.delete = function() {
    this._throwIfRoot("delete");
    return deleteObject(this._delegate);
  };
  ReferenceCompat2.prototype._throwIfRoot = function(name10) {
    if (this._delegate._location.path === "") {
      throw invalidRootOperation(name10);
    }
  };
  return ReferenceCompat2;
}();
var StorageServiceCompat = function() {
  function StorageServiceCompat2(app, _delegate) {
    this.app = app;
    this._delegate = _delegate;
  }
  Object.defineProperty(StorageServiceCompat2.prototype, "maxOperationRetryTime", {
    get: function() {
      return this._delegate.maxOperationRetryTime;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(StorageServiceCompat2.prototype, "maxUploadRetryTime", {
    get: function() {
      return this._delegate.maxUploadRetryTime;
    },
    enumerable: false,
    configurable: true
  });
  StorageServiceCompat2.prototype.ref = function(path) {
    if (isUrl(path)) {
      throw invalidArgument("ref() expected a child path but got a URL, use refFromURL instead.");
    }
    return new ReferenceCompat(ref2(this._delegate, path), this);
  };
  StorageServiceCompat2.prototype.refFromURL = function(url) {
    if (!isUrl(url)) {
      throw invalidArgument("refFromURL() expected a full URL but got a child path, use ref() instead.");
    }
    try {
      Location.makeFromUrl(url, this._delegate.host);
    } catch (e) {
      throw invalidArgument("refFromUrl() expected a valid full URL but got an invalid one.");
    }
    return new ReferenceCompat(ref2(this._delegate, url), this);
  };
  StorageServiceCompat2.prototype.setMaxUploadRetryTime = function(time) {
    this._delegate.maxUploadRetryTime = time;
  };
  StorageServiceCompat2.prototype.setMaxOperationRetryTime = function(time) {
    this._delegate.maxOperationRetryTime = time;
  };
  StorageServiceCompat2.prototype.useEmulator = function(host, port, options) {
    if (options === void 0) {
      options = {};
    }
    connectStorageEmulator(this._delegate, host, port, options);
  };
  return StorageServiceCompat2;
}();
var name4 = "@firebase/storage";
var version4 = "0.7.0";
var STORAGE_TYPE = "storage";
function factory(container, _a8) {
  var url = _a8.instanceIdentifier;
  var app = container.getProvider("app").getImmediate();
  var authProvider = container.getProvider("auth-internal");
  var appCheckProvider = container.getProvider("app-check-internal");
  var storageServiceCompat = new StorageServiceCompat(app, new FirebaseStorageImpl(app, authProvider, appCheckProvider, new ConnectionPool(), url, index_esm_default.SDK_VERSION));
  return storageServiceCompat;
}
function registerStorage(instance) {
  var namespaceExports = {
    TaskState,
    TaskEvent,
    StringFormat,
    Storage: FirebaseStorageImpl,
    Reference: ReferenceCompat
  };
  instance.INTERNAL.registerComponent(new Component(STORAGE_TYPE, factory, "PUBLIC").setServiceProps(namespaceExports).setMultipleInstances(true));
  instance.registerVersion(name4, version4);
}
registerStorage(index_esm_default);

// node_modules/@firebase/performance/dist/index.esm.js
var name5 = "@firebase/performance";
var version5 = "0.4.18";
var SDK_VERSION2 = version5;
var TRACE_START_MARK_PREFIX = "FB-PERF-TRACE-START";
var TRACE_STOP_MARK_PREFIX = "FB-PERF-TRACE-STOP";
var TRACE_MEASURE_PREFIX = "FB-PERF-TRACE-MEASURE";
var OOB_TRACE_PAGE_LOAD_PREFIX = "_wt_";
var FIRST_PAINT_COUNTER_NAME = "_fp";
var FIRST_CONTENTFUL_PAINT_COUNTER_NAME = "_fcp";
var FIRST_INPUT_DELAY_COUNTER_NAME = "_fid";
var CONFIG_LOCAL_STORAGE_KEY = "@firebase/performance/config";
var CONFIG_EXPIRY_LOCAL_STORAGE_KEY = "@firebase/performance/configexpire";
var SERVICE2 = "performance";
var SERVICE_NAME2 = "Performance";
var _a4;
var ERROR_DESCRIPTION_MAP2 = (_a4 = {}, _a4["trace started"] = "Trace {$traceName} was started before.", _a4["trace stopped"] = "Trace {$traceName} is not running.", _a4["nonpositive trace startTime"] = "Trace {$traceName} startTime should be positive.", _a4["nonpositive trace duration"] = "Trace {$traceName} duration should be positive.", _a4["no window"] = "Window is not available.", _a4["no app id"] = "App id is not available.", _a4["no project id"] = "Project id is not available.", _a4["no api key"] = "Api key is not available.", _a4["invalid cc log"] = "Attempted to queue invalid cc event", _a4["FB not default"] = "Performance can only start when Firebase app instance is the default one.", _a4["RC response not ok"] = "RC response is not ok", _a4["invalid attribute name"] = "Attribute name {$attributeName} is invalid.", _a4["invalid attribute value"] = "Attribute value {$attributeValue} is invalid.", _a4["invalid custom metric name"] = "Custom metric name {$customMetricName} is invalid", _a4["invalid String merger input"] = "Input for String merger is invalid, contact support team to resolve.", _a4);
var ERROR_FACTORY3 = new ErrorFactory(SERVICE2, SERVICE_NAME2, ERROR_DESCRIPTION_MAP2);
var consoleLogger = new Logger(SERVICE_NAME2);
consoleLogger.logLevel = LogLevel.INFO;
var apiInstance;
var windowInstance;
var Api = function() {
  function Api2(window2) {
    this.window = window2;
    if (!window2) {
      throw ERROR_FACTORY3.create("no window");
    }
    this.performance = window2.performance;
    this.PerformanceObserver = window2.PerformanceObserver;
    this.windowLocation = window2.location;
    this.navigator = window2.navigator;
    this.document = window2.document;
    if (this.navigator && this.navigator.cookieEnabled) {
      this.localStorage = window2.localStorage;
    }
    if (window2.perfMetrics && window2.perfMetrics.onFirstInputDelay) {
      this.onFirstInputDelay = window2.perfMetrics.onFirstInputDelay;
    }
  }
  Api2.prototype.getUrl = function() {
    return this.windowLocation.href.split("?")[0];
  };
  Api2.prototype.mark = function(name10) {
    if (!this.performance || !this.performance.mark) {
      return;
    }
    this.performance.mark(name10);
  };
  Api2.prototype.measure = function(measureName, mark1, mark2) {
    if (!this.performance || !this.performance.measure) {
      return;
    }
    this.performance.measure(measureName, mark1, mark2);
  };
  Api2.prototype.getEntriesByType = function(type) {
    if (!this.performance || !this.performance.getEntriesByType) {
      return [];
    }
    return this.performance.getEntriesByType(type);
  };
  Api2.prototype.getEntriesByName = function(name10) {
    if (!this.performance || !this.performance.getEntriesByName) {
      return [];
    }
    return this.performance.getEntriesByName(name10);
  };
  Api2.prototype.getTimeOrigin = function() {
    return this.performance && (this.performance.timeOrigin || this.performance.timing.navigationStart);
  };
  Api2.prototype.requiredApisAvailable = function() {
    if (!fetch || !Promise || !this.navigator || !this.navigator.cookieEnabled) {
      consoleLogger.info("Firebase Performance cannot start if browser does not support fetch and Promise or cookie is disabled.");
      return false;
    }
    if (!isIndexedDBAvailable()) {
      consoleLogger.info("IndexedDB is not supported by current browswer");
      return false;
    }
    return true;
  };
  Api2.prototype.setupObserver = function(entryType, callback) {
    if (!this.PerformanceObserver) {
      return;
    }
    var observer = new this.PerformanceObserver(function(list2) {
      for (var _i2 = 0, _a8 = list2.getEntries(); _i2 < _a8.length; _i2++) {
        var entry = _a8[_i2];
        callback(entry);
      }
    });
    observer.observe({ entryTypes: [entryType] });
  };
  Api2.getInstance = function() {
    if (apiInstance === void 0) {
      apiInstance = new Api2(windowInstance);
    }
    return apiInstance;
  };
  return Api2;
}();
function setupApi(window2) {
  windowInstance = window2;
}
function mergeStrings(part1, part2) {
  var sizeDiff = part1.length - part2.length;
  if (sizeDiff < 0 || sizeDiff > 1) {
    throw ERROR_FACTORY3.create("invalid String merger input");
  }
  var resultArray = [];
  for (var i = 0; i < part1.length; i++) {
    resultArray.push(part1.charAt(i));
    if (part2.length > i) {
      resultArray.push(part2.charAt(i));
    }
  }
  return resultArray.join("");
}
var settingsServiceInstance;
var SettingsService = function() {
  function SettingsService2() {
    this.instrumentationEnabled = true;
    this.dataCollectionEnabled = true;
    this.loggingEnabled = false;
    this.tracesSamplingRate = 1;
    this.networkRequestsSamplingRate = 1;
    this.logEndPointUrl = "https://firebaselogging.googleapis.com/v0cc/log?format=json_proto";
    this.flTransportEndpointUrl = mergeStrings("hts/frbslgigp.ogepscmv/ieo/eaylg", "tp:/ieaeogn-agolai.o/1frlglgc/o");
    this.transportKey = mergeStrings("AzSC8r6ReiGqFMyfvgow", "Iayx0u-XT3vksVM-pIV");
    this.logSource = 462;
    this.logTraceAfterSampling = false;
    this.logNetworkAfterSampling = false;
    this.configTimeToLive = 12;
  }
  SettingsService2.prototype.getAppId = function() {
    var appId = this.firebaseAppInstance && this.firebaseAppInstance.options && this.firebaseAppInstance.options.appId;
    if (!appId) {
      throw ERROR_FACTORY3.create("no app id");
    }
    return appId;
  };
  SettingsService2.prototype.getProjectId = function() {
    var projectId = this.firebaseAppInstance && this.firebaseAppInstance.options && this.firebaseAppInstance.options.projectId;
    if (!projectId) {
      throw ERROR_FACTORY3.create("no project id");
    }
    return projectId;
  };
  SettingsService2.prototype.getApiKey = function() {
    var apiKey = this.firebaseAppInstance && this.firebaseAppInstance.options && this.firebaseAppInstance.options.apiKey;
    if (!apiKey) {
      throw ERROR_FACTORY3.create("no api key");
    }
    return apiKey;
  };
  SettingsService2.prototype.getFlTransportFullUrl = function() {
    return this.flTransportEndpointUrl.concat("?key=", this.transportKey);
  };
  SettingsService2.getInstance = function() {
    if (settingsServiceInstance === void 0) {
      settingsServiceInstance = new SettingsService2();
    }
    return settingsServiceInstance;
  };
  return SettingsService2;
}();
var iid;
function getIidPromise() {
  var iidPromise = SettingsService.getInstance().installationsService.getId();
  iidPromise.then(function(iidVal) {
    iid = iidVal;
  });
  return iidPromise;
}
function getIid() {
  return iid;
}
function getAuthTokenPromise() {
  var authTokenPromise = SettingsService.getInstance().installationsService.getToken();
  authTokenPromise.then(function(authTokenVal) {
  });
  return authTokenPromise;
}
var VisibilityState;
(function(VisibilityState2) {
  VisibilityState2[VisibilityState2["UNKNOWN"] = 0] = "UNKNOWN";
  VisibilityState2[VisibilityState2["VISIBLE"] = 1] = "VISIBLE";
  VisibilityState2[VisibilityState2["HIDDEN"] = 2] = "HIDDEN";
})(VisibilityState || (VisibilityState = {}));
var RESERVED_ATTRIBUTE_PREFIXES = ["firebase_", "google_", "ga_"];
var ATTRIBUTE_FORMAT_REGEX = new RegExp("^[a-zA-Z]\\w*$");
var MAX_ATTRIBUTE_NAME_LENGTH = 40;
var MAX_ATTRIBUTE_VALUE_LENGTH = 100;
function getServiceWorkerStatus() {
  var navigator2 = Api.getInstance().navigator;
  if ("serviceWorker" in navigator2) {
    if (navigator2.serviceWorker.controller) {
      return 2;
    } else {
      return 3;
    }
  } else {
    return 1;
  }
}
function getVisibilityState() {
  var document2 = Api.getInstance().document;
  var visibilityState = document2.visibilityState;
  switch (visibilityState) {
    case "visible":
      return VisibilityState.VISIBLE;
    case "hidden":
      return VisibilityState.HIDDEN;
    default:
      return VisibilityState.UNKNOWN;
  }
}
function getEffectiveConnectionType() {
  var navigator2 = Api.getInstance().navigator;
  var navigatorConnection = navigator2.connection;
  var effectiveType = navigatorConnection && navigatorConnection.effectiveType;
  switch (effectiveType) {
    case "slow-2g":
      return 1;
    case "2g":
      return 2;
    case "3g":
      return 3;
    case "4g":
      return 4;
    default:
      return 0;
  }
}
function isValidCustomAttributeName(name10) {
  if (name10.length === 0 || name10.length > MAX_ATTRIBUTE_NAME_LENGTH) {
    return false;
  }
  var matchesReservedPrefix = RESERVED_ATTRIBUTE_PREFIXES.some(function(prefix) {
    return name10.startsWith(prefix);
  });
  return !matchesReservedPrefix && !!name10.match(ATTRIBUTE_FORMAT_REGEX);
}
function isValidCustomAttributeValue(value) {
  return value.length !== 0 && value.length <= MAX_ATTRIBUTE_VALUE_LENGTH;
}
var REMOTE_CONFIG_SDK_VERSION = "0.0.1";
var DEFAULT_CONFIGS = {
  loggingEnabled: true
};
var FIS_AUTH_PREFIX = "FIREBASE_INSTALLATIONS_AUTH";
function getConfig(iid2) {
  var config = getStoredConfig();
  if (config) {
    processConfig(config);
    return Promise.resolve();
  }
  return getRemoteConfig(iid2).then(processConfig).then(function(config2) {
    return storeConfig(config2);
  }, function() {
  });
}
function getStoredConfig() {
  var localStorage = Api.getInstance().localStorage;
  if (!localStorage) {
    return;
  }
  var expiryString = localStorage.getItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY);
  if (!expiryString || !configValid(expiryString)) {
    return;
  }
  var configStringified = localStorage.getItem(CONFIG_LOCAL_STORAGE_KEY);
  if (!configStringified) {
    return;
  }
  try {
    var configResponse = JSON.parse(configStringified);
    return configResponse;
  } catch (_a8) {
    return;
  }
}
function storeConfig(config) {
  var localStorage = Api.getInstance().localStorage;
  if (!config || !localStorage) {
    return;
  }
  localStorage.setItem(CONFIG_LOCAL_STORAGE_KEY, JSON.stringify(config));
  localStorage.setItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY, String(Date.now() + SettingsService.getInstance().configTimeToLive * 60 * 60 * 1e3));
}
var COULD_NOT_GET_CONFIG_MSG = "Could not fetch config, will use default configs";
function getRemoteConfig(iid2) {
  return getAuthTokenPromise().then(function(authToken) {
    var projectId = SettingsService.getInstance().getProjectId();
    var configEndPoint = "https://firebaseremoteconfig.googleapis.com/v1/projects/" + projectId + "/namespaces/fireperf:fetch?key=" + SettingsService.getInstance().getApiKey();
    var request = new Request(configEndPoint, {
      method: "POST",
      headers: { Authorization: FIS_AUTH_PREFIX + " " + authToken },
      body: JSON.stringify({
        app_instance_id: iid2,
        app_instance_id_token: authToken,
        app_id: SettingsService.getInstance().getAppId(),
        app_version: SDK_VERSION2,
        sdk_version: REMOTE_CONFIG_SDK_VERSION
      })
    });
    return fetch(request).then(function(response) {
      if (response.ok) {
        return response.json();
      }
      throw ERROR_FACTORY3.create("RC response not ok");
    });
  }).catch(function() {
    consoleLogger.info(COULD_NOT_GET_CONFIG_MSG);
    return void 0;
  });
}
function processConfig(config) {
  if (!config) {
    return config;
  }
  var settingsServiceInstance2 = SettingsService.getInstance();
  var entries = config.entries || {};
  if (entries.fpr_enabled !== void 0) {
    settingsServiceInstance2.loggingEnabled = String(entries.fpr_enabled) === "true";
  } else {
    settingsServiceInstance2.loggingEnabled = DEFAULT_CONFIGS.loggingEnabled;
  }
  if (entries.fpr_log_source) {
    settingsServiceInstance2.logSource = Number(entries.fpr_log_source);
  }
  if (entries.fpr_log_endpoint_url) {
    settingsServiceInstance2.logEndPointUrl = entries.fpr_log_endpoint_url;
  }
  if (entries.fpr_log_transport_key) {
    settingsServiceInstance2.transportKey = entries.fpr_log_transport_key;
  }
  if (entries.fpr_vc_network_request_sampling_rate !== void 0) {
    settingsServiceInstance2.networkRequestsSamplingRate = Number(entries.fpr_vc_network_request_sampling_rate);
  }
  if (entries.fpr_vc_trace_sampling_rate !== void 0) {
    settingsServiceInstance2.tracesSamplingRate = Number(entries.fpr_vc_trace_sampling_rate);
  }
  settingsServiceInstance2.logTraceAfterSampling = shouldLogAfterSampling(settingsServiceInstance2.tracesSamplingRate);
  settingsServiceInstance2.logNetworkAfterSampling = shouldLogAfterSampling(settingsServiceInstance2.networkRequestsSamplingRate);
  return config;
}
function configValid(expiry) {
  return Number(expiry) > Date.now();
}
function shouldLogAfterSampling(samplingRate) {
  return Math.random() <= samplingRate;
}
var initializationStatus = 1;
var initializationPromise;
function getInitializationPromise() {
  initializationStatus = 2;
  initializationPromise = initializationPromise || initializePerf();
  return initializationPromise;
}
function isPerfInitialized() {
  return initializationStatus === 3;
}
function initializePerf() {
  return getDocumentReadyComplete().then(function() {
    return getIidPromise();
  }).then(function(iid2) {
    return getConfig(iid2);
  }).then(function() {
    return changeInitializationStatus();
  }, function() {
    return changeInitializationStatus();
  });
}
function getDocumentReadyComplete() {
  var document2 = Api.getInstance().document;
  return new Promise(function(resolve) {
    if (document2 && document2.readyState !== "complete") {
      var handler_1 = function() {
        if (document2.readyState === "complete") {
          document2.removeEventListener("readystatechange", handler_1);
          resolve();
        }
      };
      document2.addEventListener("readystatechange", handler_1);
    } else {
      resolve();
    }
  });
}
function changeInitializationStatus() {
  initializationStatus = 3;
}
var DEFAULT_SEND_INTERVAL_MS = 10 * 1e3;
var INITIAL_SEND_TIME_DELAY_MS = 5.5 * 1e3;
var DEFAULT_REMAINING_TRIES = 3;
var MAX_EVENT_COUNT_PER_REQUEST = 1e3;
var remainingTries = DEFAULT_REMAINING_TRIES;
var queue = [];
var isTransportSetup = false;
function setupTransportService() {
  if (!isTransportSetup) {
    processQueue(INITIAL_SEND_TIME_DELAY_MS);
    isTransportSetup = true;
  }
}
function processQueue(timeOffset) {
  setTimeout(function() {
    if (remainingTries === 0) {
      return;
    }
    if (!queue.length) {
      return processQueue(DEFAULT_SEND_INTERVAL_MS);
    }
    dispatchQueueEvents();
  }, timeOffset);
}
function dispatchQueueEvents() {
  var staged = queue.splice(0, MAX_EVENT_COUNT_PER_REQUEST);
  var log_event = staged.map(function(evt) {
    return {
      source_extension_json_proto3: evt.message,
      event_time_ms: String(evt.eventTime)
    };
  });
  var data = {
    request_time_ms: String(Date.now()),
    client_info: {
      client_type: 1,
      js_client_info: {}
    },
    log_source: SettingsService.getInstance().logSource,
    log_event
  };
  sendEventsToFl(data, staged).catch(function() {
    queue = __spreadArray(__spreadArray([], staged), queue);
    remainingTries--;
    consoleLogger.info("Tries left: " + remainingTries + ".");
    processQueue(DEFAULT_SEND_INTERVAL_MS);
  });
}
function sendEventsToFl(data, staged) {
  return postToFlEndpoint(data).then(function(res) {
    if (!res.ok) {
      consoleLogger.info("Call to Firebase backend failed.");
    }
    return res.json();
  }).then(function(res) {
    var transportWait = Number(res.nextRequestWaitMillis);
    var requestOffset = DEFAULT_SEND_INTERVAL_MS;
    if (!isNaN(transportWait)) {
      requestOffset = Math.max(transportWait, requestOffset);
    }
    var logResponseDetails = res.logResponseDetails;
    if (Array.isArray(logResponseDetails) && logResponseDetails.length > 0 && logResponseDetails[0].responseAction === "RETRY_REQUEST_LATER") {
      queue = __spreadArray(__spreadArray([], staged), queue);
      consoleLogger.info("Retry transport request later.");
    }
    remainingTries = DEFAULT_REMAINING_TRIES;
    processQueue(requestOffset);
  });
}
function postToFlEndpoint(data) {
  var flTransportFullUrl = SettingsService.getInstance().getFlTransportFullUrl();
  return fetch(flTransportFullUrl, {
    method: "POST",
    body: JSON.stringify(data)
  });
}
function addToQueue(evt) {
  if (!evt.eventTime || !evt.message) {
    throw ERROR_FACTORY3.create("invalid cc log");
  }
  queue = __spreadArray(__spreadArray([], queue), [evt]);
}
function transportHandler(serializer2) {
  return function() {
    var args = [];
    for (var _i2 = 0; _i2 < arguments.length; _i2++) {
      args[_i2] = arguments[_i2];
    }
    var message = serializer2.apply(void 0, args);
    addToQueue({
      message,
      eventTime: Date.now()
    });
  };
}
var logger2;
function sendLog(resource, resourceType) {
  if (!logger2) {
    logger2 = transportHandler(serializer);
  }
  logger2(resource, resourceType);
}
function logTrace(trace) {
  var settingsService = SettingsService.getInstance();
  if (!settingsService.instrumentationEnabled && trace.isAuto) {
    return;
  }
  if (!settingsService.dataCollectionEnabled && !trace.isAuto) {
    return;
  }
  if (!Api.getInstance().requiredApisAvailable()) {
    return;
  }
  if (trace.isAuto && getVisibilityState() !== VisibilityState.VISIBLE) {
    return;
  }
  if (isPerfInitialized()) {
    sendTraceLog(trace);
  } else {
    getInitializationPromise().then(function() {
      return sendTraceLog(trace);
    }, function() {
      return sendTraceLog(trace);
    });
  }
}
function sendTraceLog(trace) {
  if (!getIid()) {
    return;
  }
  var settingsService = SettingsService.getInstance();
  if (!settingsService.loggingEnabled || !settingsService.logTraceAfterSampling) {
    return;
  }
  setTimeout(function() {
    return sendLog(trace, 1);
  }, 0);
}
function logNetworkRequest(networkRequest) {
  var settingsService = SettingsService.getInstance();
  if (!settingsService.instrumentationEnabled) {
    return;
  }
  var networkRequestUrl = networkRequest.url;
  var logEndpointUrl = settingsService.logEndPointUrl.split("?")[0];
  var flEndpointUrl = settingsService.flTransportEndpointUrl.split("?")[0];
  if (networkRequestUrl === logEndpointUrl || networkRequestUrl === flEndpointUrl) {
    return;
  }
  if (!settingsService.loggingEnabled || !settingsService.logNetworkAfterSampling) {
    return;
  }
  setTimeout(function() {
    return sendLog(networkRequest, 0);
  }, 0);
}
function serializer(resource, resourceType) {
  if (resourceType === 0) {
    return serializeNetworkRequest(resource);
  }
  return serializeTrace(resource);
}
function serializeNetworkRequest(networkRequest) {
  var networkRequestMetric = {
    url: networkRequest.url,
    http_method: networkRequest.httpMethod || 0,
    http_response_code: 200,
    response_payload_bytes: networkRequest.responsePayloadBytes,
    client_start_time_us: networkRequest.startTimeUs,
    time_to_response_initiated_us: networkRequest.timeToResponseInitiatedUs,
    time_to_response_completed_us: networkRequest.timeToResponseCompletedUs
  };
  var perfMetric = {
    application_info: getApplicationInfo(),
    network_request_metric: networkRequestMetric
  };
  return JSON.stringify(perfMetric);
}
function serializeTrace(trace) {
  var traceMetric = {
    name: trace.name,
    is_auto: trace.isAuto,
    client_start_time_us: trace.startTimeUs,
    duration_us: trace.durationUs
  };
  if (Object.keys(trace.counters).length !== 0) {
    traceMetric.counters = trace.counters;
  }
  var customAttributes = trace.getAttributes();
  if (Object.keys(customAttributes).length !== 0) {
    traceMetric.custom_attributes = customAttributes;
  }
  var perfMetric = {
    application_info: getApplicationInfo(),
    trace_metric: traceMetric
  };
  return JSON.stringify(perfMetric);
}
function getApplicationInfo() {
  return {
    google_app_id: SettingsService.getInstance().getAppId(),
    app_instance_id: getIid(),
    web_app_info: {
      sdk_version: SDK_VERSION2,
      page_url: Api.getInstance().getUrl(),
      service_worker_status: getServiceWorkerStatus(),
      visibility_state: getVisibilityState(),
      effective_connection_type: getEffectiveConnectionType()
    },
    application_process_state: 0
  };
}
var MAX_METRIC_NAME_LENGTH = 100;
var RESERVED_AUTO_PREFIX = "_";
var oobMetrics = [
  FIRST_PAINT_COUNTER_NAME,
  FIRST_CONTENTFUL_PAINT_COUNTER_NAME,
  FIRST_INPUT_DELAY_COUNTER_NAME
];
function isValidMetricName(name10, traceName) {
  if (name10.length === 0 || name10.length > MAX_METRIC_NAME_LENGTH) {
    return false;
  }
  return traceName && traceName.startsWith(OOB_TRACE_PAGE_LOAD_PREFIX) && oobMetrics.indexOf(name10) > -1 || !name10.startsWith(RESERVED_AUTO_PREFIX);
}
function convertMetricValueToInteger(providedValue) {
  var valueAsInteger = Math.floor(providedValue);
  if (valueAsInteger < providedValue) {
    consoleLogger.info("Metric value should be an Integer, setting the value as : " + valueAsInteger + ".");
  }
  return valueAsInteger;
}
var Trace = function() {
  function Trace2(name10, isAuto, traceMeasureName) {
    if (isAuto === void 0) {
      isAuto = false;
    }
    this.name = name10;
    this.isAuto = isAuto;
    this.state = 1;
    this.customAttributes = {};
    this.counters = {};
    this.api = Api.getInstance();
    this.randomId = Math.floor(Math.random() * 1e6);
    if (!this.isAuto) {
      this.traceStartMark = TRACE_START_MARK_PREFIX + "-" + this.randomId + "-" + this.name;
      this.traceStopMark = TRACE_STOP_MARK_PREFIX + "-" + this.randomId + "-" + this.name;
      this.traceMeasure = traceMeasureName || TRACE_MEASURE_PREFIX + "-" + this.randomId + "-" + this.name;
      if (traceMeasureName) {
        this.calculateTraceMetrics();
      }
    }
  }
  Trace2.prototype.start = function() {
    if (this.state !== 1) {
      throw ERROR_FACTORY3.create("trace started", {
        traceName: this.name
      });
    }
    this.api.mark(this.traceStartMark);
    this.state = 2;
  };
  Trace2.prototype.stop = function() {
    if (this.state !== 2) {
      throw ERROR_FACTORY3.create("trace stopped", {
        traceName: this.name
      });
    }
    this.state = 3;
    this.api.mark(this.traceStopMark);
    this.api.measure(this.traceMeasure, this.traceStartMark, this.traceStopMark);
    this.calculateTraceMetrics();
    logTrace(this);
  };
  Trace2.prototype.record = function(startTime, duration, options) {
    if (startTime <= 0) {
      throw ERROR_FACTORY3.create("nonpositive trace startTime", {
        traceName: this.name
      });
    }
    if (duration <= 0) {
      throw ERROR_FACTORY3.create("nonpositive trace duration", {
        traceName: this.name
      });
    }
    this.durationUs = Math.floor(duration * 1e3);
    this.startTimeUs = Math.floor(startTime * 1e3);
    if (options && options.attributes) {
      this.customAttributes = __assign({}, options.attributes);
    }
    if (options && options.metrics) {
      for (var _i2 = 0, _a8 = Object.keys(options.metrics); _i2 < _a8.length; _i2++) {
        var metric = _a8[_i2];
        if (!isNaN(Number(options.metrics[metric]))) {
          this.counters[metric] = Number(Math.floor(options.metrics[metric]));
        }
      }
    }
    logTrace(this);
  };
  Trace2.prototype.incrementMetric = function(counter, numAsInteger) {
    if (numAsInteger === void 0) {
      numAsInteger = 1;
    }
    if (this.counters[counter] === void 0) {
      this.putMetric(counter, numAsInteger);
    } else {
      this.putMetric(counter, this.counters[counter] + numAsInteger);
    }
  };
  Trace2.prototype.putMetric = function(counter, numAsInteger) {
    if (isValidMetricName(counter, this.name)) {
      this.counters[counter] = convertMetricValueToInteger(numAsInteger);
    } else {
      throw ERROR_FACTORY3.create("invalid custom metric name", {
        customMetricName: counter
      });
    }
  };
  Trace2.prototype.getMetric = function(counter) {
    return this.counters[counter] || 0;
  };
  Trace2.prototype.putAttribute = function(attr, value) {
    var isValidName = isValidCustomAttributeName(attr);
    var isValidValue = isValidCustomAttributeValue(value);
    if (isValidName && isValidValue) {
      this.customAttributes[attr] = value;
      return;
    }
    if (!isValidName) {
      throw ERROR_FACTORY3.create("invalid attribute name", {
        attributeName: attr
      });
    }
    if (!isValidValue) {
      throw ERROR_FACTORY3.create("invalid attribute value", {
        attributeValue: value
      });
    }
  };
  Trace2.prototype.getAttribute = function(attr) {
    return this.customAttributes[attr];
  };
  Trace2.prototype.removeAttribute = function(attr) {
    if (this.customAttributes[attr] === void 0) {
      return;
    }
    delete this.customAttributes[attr];
  };
  Trace2.prototype.getAttributes = function() {
    return __assign({}, this.customAttributes);
  };
  Trace2.prototype.setStartTime = function(startTime) {
    this.startTimeUs = startTime;
  };
  Trace2.prototype.setDuration = function(duration) {
    this.durationUs = duration;
  };
  Trace2.prototype.calculateTraceMetrics = function() {
    var perfMeasureEntries = this.api.getEntriesByName(this.traceMeasure);
    var perfMeasureEntry = perfMeasureEntries && perfMeasureEntries[0];
    if (perfMeasureEntry) {
      this.durationUs = Math.floor(perfMeasureEntry.duration * 1e3);
      this.startTimeUs = Math.floor((perfMeasureEntry.startTime + this.api.getTimeOrigin()) * 1e3);
    }
  };
  Trace2.createOobTrace = function(navigationTimings, paintTimings, firstInputDelay) {
    var route = Api.getInstance().getUrl();
    if (!route) {
      return;
    }
    var trace = new Trace2(OOB_TRACE_PAGE_LOAD_PREFIX + route, true);
    var timeOriginUs = Math.floor(Api.getInstance().getTimeOrigin() * 1e3);
    trace.setStartTime(timeOriginUs);
    if (navigationTimings && navigationTimings[0]) {
      trace.setDuration(Math.floor(navigationTimings[0].duration * 1e3));
      trace.putMetric("domInteractive", Math.floor(navigationTimings[0].domInteractive * 1e3));
      trace.putMetric("domContentLoadedEventEnd", Math.floor(navigationTimings[0].domContentLoadedEventEnd * 1e3));
      trace.putMetric("loadEventEnd", Math.floor(navigationTimings[0].loadEventEnd * 1e3));
    }
    var FIRST_PAINT = "first-paint";
    var FIRST_CONTENTFUL_PAINT = "first-contentful-paint";
    if (paintTimings) {
      var firstPaint = paintTimings.find(function(paintObject) {
        return paintObject.name === FIRST_PAINT;
      });
      if (firstPaint && firstPaint.startTime) {
        trace.putMetric(FIRST_PAINT_COUNTER_NAME, Math.floor(firstPaint.startTime * 1e3));
      }
      var firstContentfulPaint = paintTimings.find(function(paintObject) {
        return paintObject.name === FIRST_CONTENTFUL_PAINT;
      });
      if (firstContentfulPaint && firstContentfulPaint.startTime) {
        trace.putMetric(FIRST_CONTENTFUL_PAINT_COUNTER_NAME, Math.floor(firstContentfulPaint.startTime * 1e3));
      }
      if (firstInputDelay) {
        trace.putMetric(FIRST_INPUT_DELAY_COUNTER_NAME, Math.floor(firstInputDelay * 1e3));
      }
    }
    logTrace(trace);
  };
  Trace2.createUserTimingTrace = function(measureName) {
    var trace = new Trace2(measureName, false, measureName);
    logTrace(trace);
  };
  return Trace2;
}();
function createNetworkRequestEntry(entry) {
  var performanceEntry = entry;
  if (!performanceEntry || performanceEntry.responseStart === void 0) {
    return;
  }
  var timeOrigin = Api.getInstance().getTimeOrigin();
  var startTimeUs = Math.floor((performanceEntry.startTime + timeOrigin) * 1e3);
  var timeToResponseInitiatedUs = performanceEntry.responseStart ? Math.floor((performanceEntry.responseStart - performanceEntry.startTime) * 1e3) : void 0;
  var timeToResponseCompletedUs = Math.floor((performanceEntry.responseEnd - performanceEntry.startTime) * 1e3);
  var url = performanceEntry.name && performanceEntry.name.split("?")[0];
  var networkRequest = {
    url,
    responsePayloadBytes: performanceEntry.transferSize,
    startTimeUs,
    timeToResponseInitiatedUs,
    timeToResponseCompletedUs
  };
  logNetworkRequest(networkRequest);
}
var FID_WAIT_TIME_MS = 5e3;
function setupOobResources() {
  if (!getIid()) {
    return;
  }
  setTimeout(function() {
    return setupOobTraces();
  }, 0);
  setTimeout(function() {
    return setupNetworkRequests();
  }, 0);
  setTimeout(function() {
    return setupUserTimingTraces();
  }, 0);
}
function setupNetworkRequests() {
  var api = Api.getInstance();
  var resources = api.getEntriesByType("resource");
  for (var _i2 = 0, resources_1 = resources; _i2 < resources_1.length; _i2++) {
    var resource = resources_1[_i2];
    createNetworkRequestEntry(resource);
  }
  api.setupObserver("resource", createNetworkRequestEntry);
}
function setupOobTraces() {
  var api = Api.getInstance();
  var navigationTimings = api.getEntriesByType("navigation");
  var paintTimings = api.getEntriesByType("paint");
  if (api.onFirstInputDelay) {
    var timeoutId_1 = setTimeout(function() {
      Trace.createOobTrace(navigationTimings, paintTimings);
      timeoutId_1 = void 0;
    }, FID_WAIT_TIME_MS);
    api.onFirstInputDelay(function(fid) {
      if (timeoutId_1) {
        clearTimeout(timeoutId_1);
        Trace.createOobTrace(navigationTimings, paintTimings, fid);
      }
    });
  } else {
    Trace.createOobTrace(navigationTimings, paintTimings);
  }
}
function setupUserTimingTraces() {
  var api = Api.getInstance();
  var measures = api.getEntriesByType("measure");
  for (var _i2 = 0, measures_1 = measures; _i2 < measures_1.length; _i2++) {
    var measure = measures_1[_i2];
    createUserTimingTrace(measure);
  }
  api.setupObserver("measure", createUserTimingTrace);
}
function createUserTimingTrace(measure) {
  var measureName = measure.name;
  if (measureName.substring(0, TRACE_MEASURE_PREFIX.length) === TRACE_MEASURE_PREFIX) {
    return;
  }
  Trace.createUserTimingTrace(measureName);
}
var PerformanceController = function() {
  function PerformanceController2(app) {
    this.app = app;
    if (Api.getInstance().requiredApisAvailable()) {
      validateIndexedDBOpenable().then(function(isAvailable) {
        if (isAvailable) {
          setupTransportService();
          getInitializationPromise().then(setupOobResources, setupOobResources);
        }
      }).catch(function(error2) {
        consoleLogger.info("Environment doesn't support IndexedDB: " + error2);
      });
    }
  }
  PerformanceController2.prototype.trace = function(name10) {
    return new Trace(name10);
  };
  Object.defineProperty(PerformanceController2.prototype, "instrumentationEnabled", {
    get: function() {
      return SettingsService.getInstance().instrumentationEnabled;
    },
    set: function(val) {
      SettingsService.getInstance().instrumentationEnabled = val;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(PerformanceController2.prototype, "dataCollectionEnabled", {
    get: function() {
      return SettingsService.getInstance().dataCollectionEnabled;
    },
    set: function(val) {
      SettingsService.getInstance().dataCollectionEnabled = val;
    },
    enumerable: false,
    configurable: true
  });
  return PerformanceController2;
}();
var DEFAULT_ENTRY_NAME = "[DEFAULT]";
function registerPerformance(instance) {
  var factoryMethod2 = function(app, installations) {
    if (app.name !== DEFAULT_ENTRY_NAME) {
      throw ERROR_FACTORY3.create("FB not default");
    }
    if (typeof window === "undefined") {
      throw ERROR_FACTORY3.create("no window");
    }
    setupApi(window);
    SettingsService.getInstance().firebaseAppInstance = app;
    SettingsService.getInstance().installationsService = installations;
    return new PerformanceController(app);
  };
  instance.INTERNAL.registerComponent(new Component("performance", function(container) {
    var app = container.getProvider("app").getImmediate();
    var installations = container.getProvider("installations").getImmediate();
    return factoryMethod2(app, installations);
  }, "PUBLIC"));
  instance.registerVersion(name5, version5);
}
registerPerformance(index_esm_default);

// node_modules/@firebase/analytics/dist/index.esm.js
var GA_FID_KEY = "firebase_id";
var ORIGIN_KEY = "origin";
var FETCH_TIMEOUT_MILLIS = 60 * 1e3;
var DYNAMIC_CONFIG_URL = "https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig";
var GTAG_URL = "https://www.googletagmanager.com/gtag/js";
var GtagCommand;
(function(GtagCommand2) {
  GtagCommand2["EVENT"] = "event";
  GtagCommand2["SET"] = "set";
  GtagCommand2["CONFIG"] = "config";
})(GtagCommand || (GtagCommand = {}));
var EventName;
(function(EventName2) {
  EventName2["ADD_SHIPPING_INFO"] = "add_shipping_info";
  EventName2["ADD_PAYMENT_INFO"] = "add_payment_info";
  EventName2["ADD_TO_CART"] = "add_to_cart";
  EventName2["ADD_TO_WISHLIST"] = "add_to_wishlist";
  EventName2["BEGIN_CHECKOUT"] = "begin_checkout";
  EventName2["CHECKOUT_PROGRESS"] = "checkout_progress";
  EventName2["EXCEPTION"] = "exception";
  EventName2["GENERATE_LEAD"] = "generate_lead";
  EventName2["LOGIN"] = "login";
  EventName2["PAGE_VIEW"] = "page_view";
  EventName2["PURCHASE"] = "purchase";
  EventName2["REFUND"] = "refund";
  EventName2["REMOVE_FROM_CART"] = "remove_from_cart";
  EventName2["SCREEN_VIEW"] = "screen_view";
  EventName2["SEARCH"] = "search";
  EventName2["SELECT_CONTENT"] = "select_content";
  EventName2["SELECT_ITEM"] = "select_item";
  EventName2["SELECT_PROMOTION"] = "select_promotion";
  EventName2["SET_CHECKOUT_OPTION"] = "set_checkout_option";
  EventName2["SHARE"] = "share";
  EventName2["SIGN_UP"] = "sign_up";
  EventName2["TIMING_COMPLETE"] = "timing_complete";
  EventName2["VIEW_CART"] = "view_cart";
  EventName2["VIEW_ITEM"] = "view_item";
  EventName2["VIEW_ITEM_LIST"] = "view_item_list";
  EventName2["VIEW_PROMOTION"] = "view_promotion";
  EventName2["VIEW_SEARCH_RESULTS"] = "view_search_results";
})(EventName || (EventName = {}));
function logEvent(gtagFunction, initializationPromise2, eventName, eventParams, options) {
  return __awaiter(this, void 0, void 0, function() {
    var measurementId, params;
    return __generator(this, function(_a8) {
      switch (_a8.label) {
        case 0:
          if (!(options && options.global))
            return [3, 1];
          gtagFunction(GtagCommand.EVENT, eventName, eventParams);
          return [2];
        case 1:
          return [4, initializationPromise2];
        case 2:
          measurementId = _a8.sent();
          params = __assign(__assign({}, eventParams), { "send_to": measurementId });
          gtagFunction(GtagCommand.EVENT, eventName, params);
          _a8.label = 3;
        case 3:
          return [2];
      }
    });
  });
}
function setCurrentScreen(gtagFunction, initializationPromise2, screenName, options) {
  return __awaiter(this, void 0, void 0, function() {
    var measurementId;
    return __generator(this, function(_a8) {
      switch (_a8.label) {
        case 0:
          if (!(options && options.global))
            return [3, 1];
          gtagFunction(GtagCommand.SET, { "screen_name": screenName });
          return [2, Promise.resolve()];
        case 1:
          return [4, initializationPromise2];
        case 2:
          measurementId = _a8.sent();
          gtagFunction(GtagCommand.CONFIG, measurementId, {
            update: true,
            "screen_name": screenName
          });
          _a8.label = 3;
        case 3:
          return [2];
      }
    });
  });
}
function setUserId(gtagFunction, initializationPromise2, id2, options) {
  return __awaiter(this, void 0, void 0, function() {
    var measurementId;
    return __generator(this, function(_a8) {
      switch (_a8.label) {
        case 0:
          if (!(options && options.global))
            return [3, 1];
          gtagFunction(GtagCommand.SET, { "user_id": id2 });
          return [2, Promise.resolve()];
        case 1:
          return [4, initializationPromise2];
        case 2:
          measurementId = _a8.sent();
          gtagFunction(GtagCommand.CONFIG, measurementId, {
            update: true,
            "user_id": id2
          });
          _a8.label = 3;
        case 3:
          return [2];
      }
    });
  });
}
function setUserProperties(gtagFunction, initializationPromise2, properties, options) {
  return __awaiter(this, void 0, void 0, function() {
    var flatProperties, _i2, _a8, key, measurementId;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          if (!(options && options.global))
            return [3, 1];
          flatProperties = {};
          for (_i2 = 0, _a8 = Object.keys(properties); _i2 < _a8.length; _i2++) {
            key = _a8[_i2];
            flatProperties["user_properties." + key] = properties[key];
          }
          gtagFunction(GtagCommand.SET, flatProperties);
          return [2, Promise.resolve()];
        case 1:
          return [4, initializationPromise2];
        case 2:
          measurementId = _b.sent();
          gtagFunction(GtagCommand.CONFIG, measurementId, {
            update: true,
            "user_properties": properties
          });
          _b.label = 3;
        case 3:
          return [2];
      }
    });
  });
}
function setAnalyticsCollectionEnabled(initializationPromise2, enabled) {
  return __awaiter(this, void 0, void 0, function() {
    var measurementId;
    return __generator(this, function(_a8) {
      switch (_a8.label) {
        case 0:
          return [4, initializationPromise2];
        case 1:
          measurementId = _a8.sent();
          window["ga-disable-" + measurementId] = !enabled;
          return [2];
      }
    });
  });
}
var logger3 = new Logger("@firebase/analytics");
function insertScriptTag(dataLayerName2, measurementId) {
  var script = document.createElement("script");
  script.src = GTAG_URL + "?l=" + dataLayerName2 + "&id=" + measurementId;
  script.async = true;
  document.head.appendChild(script);
}
function getOrCreateDataLayer(dataLayerName2) {
  var dataLayer = [];
  if (Array.isArray(window[dataLayerName2])) {
    dataLayer = window[dataLayerName2];
  } else {
    window[dataLayerName2] = dataLayer;
  }
  return dataLayer;
}
function gtagOnConfig(gtagCore, initializationPromisesMap2, dynamicConfigPromisesList2, measurementIdToAppId2, measurementId, gtagParams) {
  return __awaiter(this, void 0, void 0, function() {
    var correspondingAppId, dynamicConfigResults, foundConfig, e_1;
    return __generator(this, function(_a8) {
      switch (_a8.label) {
        case 0:
          correspondingAppId = measurementIdToAppId2[measurementId];
          _a8.label = 1;
        case 1:
          _a8.trys.push([1, 7, , 8]);
          if (!correspondingAppId)
            return [3, 3];
          return [4, initializationPromisesMap2[correspondingAppId]];
        case 2:
          _a8.sent();
          return [3, 6];
        case 3:
          return [4, Promise.all(dynamicConfigPromisesList2)];
        case 4:
          dynamicConfigResults = _a8.sent();
          foundConfig = dynamicConfigResults.find(function(config) {
            return config.measurementId === measurementId;
          });
          if (!foundConfig)
            return [3, 6];
          return [4, initializationPromisesMap2[foundConfig.appId]];
        case 5:
          _a8.sent();
          _a8.label = 6;
        case 6:
          return [3, 8];
        case 7:
          e_1 = _a8.sent();
          logger3.error(e_1);
          return [3, 8];
        case 8:
          gtagCore(GtagCommand.CONFIG, measurementId, gtagParams);
          return [2];
      }
    });
  });
}
function gtagOnEvent(gtagCore, initializationPromisesMap2, dynamicConfigPromisesList2, measurementId, gtagParams) {
  return __awaiter(this, void 0, void 0, function() {
    var initializationPromisesToWaitFor, gaSendToList, dynamicConfigResults, _loop_1, _i2, gaSendToList_1, sendToId, state_1, e_2;
    return __generator(this, function(_a8) {
      switch (_a8.label) {
        case 0:
          _a8.trys.push([0, 4, , 5]);
          initializationPromisesToWaitFor = [];
          if (!(gtagParams && gtagParams["send_to"]))
            return [3, 2];
          gaSendToList = gtagParams["send_to"];
          if (!Array.isArray(gaSendToList)) {
            gaSendToList = [gaSendToList];
          }
          return [4, Promise.all(dynamicConfigPromisesList2)];
        case 1:
          dynamicConfigResults = _a8.sent();
          _loop_1 = function(sendToId2) {
            var foundConfig = dynamicConfigResults.find(function(config) {
              return config.measurementId === sendToId2;
            });
            var initializationPromise2 = foundConfig && initializationPromisesMap2[foundConfig.appId];
            if (initializationPromise2) {
              initializationPromisesToWaitFor.push(initializationPromise2);
            } else {
              initializationPromisesToWaitFor = [];
              return "break";
            }
          };
          for (_i2 = 0, gaSendToList_1 = gaSendToList; _i2 < gaSendToList_1.length; _i2++) {
            sendToId = gaSendToList_1[_i2];
            state_1 = _loop_1(sendToId);
            if (state_1 === "break")
              break;
          }
          _a8.label = 2;
        case 2:
          if (initializationPromisesToWaitFor.length === 0) {
            initializationPromisesToWaitFor = Object.values(initializationPromisesMap2);
          }
          return [4, Promise.all(initializationPromisesToWaitFor)];
        case 3:
          _a8.sent();
          gtagCore(GtagCommand.EVENT, measurementId, gtagParams || {});
          return [3, 5];
        case 4:
          e_2 = _a8.sent();
          logger3.error(e_2);
          return [3, 5];
        case 5:
          return [2];
      }
    });
  });
}
function wrapGtag(gtagCore, initializationPromisesMap2, dynamicConfigPromisesList2, measurementIdToAppId2) {
  function gtagWrapper(command, idOrNameOrParams, gtagParams) {
    return __awaiter(this, void 0, void 0, function() {
      var e_3;
      return __generator(this, function(_a8) {
        switch (_a8.label) {
          case 0:
            _a8.trys.push([0, 6, , 7]);
            if (!(command === GtagCommand.EVENT))
              return [3, 2];
            return [4, gtagOnEvent(gtagCore, initializationPromisesMap2, dynamicConfigPromisesList2, idOrNameOrParams, gtagParams)];
          case 1:
            _a8.sent();
            return [3, 5];
          case 2:
            if (!(command === GtagCommand.CONFIG))
              return [3, 4];
            return [4, gtagOnConfig(gtagCore, initializationPromisesMap2, dynamicConfigPromisesList2, measurementIdToAppId2, idOrNameOrParams, gtagParams)];
          case 3:
            _a8.sent();
            return [3, 5];
          case 4:
            gtagCore(GtagCommand.SET, idOrNameOrParams);
            _a8.label = 5;
          case 5:
            return [3, 7];
          case 6:
            e_3 = _a8.sent();
            logger3.error(e_3);
            return [3, 7];
          case 7:
            return [2];
        }
      });
    });
  }
  return gtagWrapper;
}
function wrapOrCreateGtag(initializationPromisesMap2, dynamicConfigPromisesList2, measurementIdToAppId2, dataLayerName2, gtagFunctionName) {
  var gtagCore = function() {
    var _args = [];
    for (var _i2 = 0; _i2 < arguments.length; _i2++) {
      _args[_i2] = arguments[_i2];
    }
    window[dataLayerName2].push(arguments);
  };
  if (window[gtagFunctionName] && typeof window[gtagFunctionName] === "function") {
    gtagCore = window[gtagFunctionName];
  }
  window[gtagFunctionName] = wrapGtag(gtagCore, initializationPromisesMap2, dynamicConfigPromisesList2, measurementIdToAppId2);
  return {
    gtagCore,
    wrappedGtag: window[gtagFunctionName]
  };
}
function findGtagScriptOnPage() {
  var scriptTags = window.document.getElementsByTagName("script");
  for (var _i2 = 0, _a8 = Object.values(scriptTags); _i2 < _a8.length; _i2++) {
    var tag = _a8[_i2];
    if (tag.src && tag.src.includes(GTAG_URL)) {
      return tag;
    }
  }
  return null;
}
var _a5;
var ERRORS = (_a5 = {}, _a5["already-exists"] = "A Firebase Analytics instance with the appId {$id}  already exists. Only one Firebase Analytics instance can be created for each appId.", _a5["already-initialized"] = "Firebase Analytics has already been initialized.settings() must be called before initializing any Analytics instanceor it will have no effect.", _a5["interop-component-reg-failed"] = "Firebase Analytics Interop Component failed to instantiate: {$reason}", _a5["invalid-analytics-context"] = "Firebase Analytics is not supported in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}", _a5["indexeddb-unavailable"] = "IndexedDB unavailable or restricted in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}", _a5["fetch-throttle"] = "The config fetch request timed out while in an exponential backoff state. Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.", _a5["config-fetch-failed"] = "Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}", _a5["no-api-key"] = 'The "apiKey" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid API key.', _a5["no-app-id"] = 'The "appId" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid app ID.', _a5);
var ERROR_FACTORY4 = new ErrorFactory("analytics", "Analytics", ERRORS);
var LONG_RETRY_FACTOR = 30;
var BASE_INTERVAL_MILLIS = 1e3;
var RetryData = function() {
  function RetryData2(throttleMetadata, intervalMillis) {
    if (throttleMetadata === void 0) {
      throttleMetadata = {};
    }
    if (intervalMillis === void 0) {
      intervalMillis = BASE_INTERVAL_MILLIS;
    }
    this.throttleMetadata = throttleMetadata;
    this.intervalMillis = intervalMillis;
  }
  RetryData2.prototype.getThrottleMetadata = function(appId) {
    return this.throttleMetadata[appId];
  };
  RetryData2.prototype.setThrottleMetadata = function(appId, metadata) {
    this.throttleMetadata[appId] = metadata;
  };
  RetryData2.prototype.deleteThrottleMetadata = function(appId) {
    delete this.throttleMetadata[appId];
  };
  return RetryData2;
}();
var defaultRetryData = new RetryData();
function getHeaders3(apiKey) {
  return new Headers({
    Accept: "application/json",
    "x-goog-api-key": apiKey
  });
}
function fetchDynamicConfig(appFields) {
  var _a8;
  return __awaiter(this, void 0, void 0, function() {
    var appId, apiKey, request, appUrl, response, errorMessage, jsonResponse;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          appId = appFields.appId, apiKey = appFields.apiKey;
          request = {
            method: "GET",
            headers: getHeaders3(apiKey)
          };
          appUrl = DYNAMIC_CONFIG_URL.replace("{app-id}", appId);
          return [4, fetch(appUrl, request)];
        case 1:
          response = _b.sent();
          if (!(response.status !== 200 && response.status !== 304))
            return [3, 6];
          errorMessage = "";
          _b.label = 2;
        case 2:
          _b.trys.push([2, 4, , 5]);
          return [4, response.json()];
        case 3:
          jsonResponse = _b.sent();
          if ((_a8 = jsonResponse.error) === null || _a8 === void 0 ? void 0 : _a8.message) {
            errorMessage = jsonResponse.error.message;
          }
          return [3, 5];
        case 4:
          _b.sent();
          return [3, 5];
        case 5:
          throw ERROR_FACTORY4.create("config-fetch-failed", {
            httpStatus: response.status,
            responseMessage: errorMessage
          });
        case 6:
          return [2, response.json()];
      }
    });
  });
}
function fetchDynamicConfigWithRetry(app, retryData, timeoutMillis) {
  if (retryData === void 0) {
    retryData = defaultRetryData;
  }
  return __awaiter(this, void 0, void 0, function() {
    var _a8, appId, apiKey, measurementId, throttleMetadata, signal;
    var _this = this;
    return __generator(this, function(_b) {
      _a8 = app.options, appId = _a8.appId, apiKey = _a8.apiKey, measurementId = _a8.measurementId;
      if (!appId) {
        throw ERROR_FACTORY4.create("no-app-id");
      }
      if (!apiKey) {
        if (measurementId) {
          return [2, {
            measurementId,
            appId
          }];
        }
        throw ERROR_FACTORY4.create("no-api-key");
      }
      throttleMetadata = retryData.getThrottleMetadata(appId) || {
        backoffCount: 0,
        throttleEndTimeMillis: Date.now()
      };
      signal = new AnalyticsAbortSignal();
      setTimeout(function() {
        return __awaiter(_this, void 0, void 0, function() {
          return __generator(this, function(_a9) {
            signal.abort();
            return [2];
          });
        });
      }, timeoutMillis !== void 0 ? timeoutMillis : FETCH_TIMEOUT_MILLIS);
      return [2, attemptFetchDynamicConfigWithRetry({ appId, apiKey, measurementId }, throttleMetadata, signal, retryData)];
    });
  });
}
function attemptFetchDynamicConfigWithRetry(appFields, _a8, signal, retryData) {
  var throttleEndTimeMillis = _a8.throttleEndTimeMillis, backoffCount = _a8.backoffCount;
  if (retryData === void 0) {
    retryData = defaultRetryData;
  }
  return __awaiter(this, void 0, void 0, function() {
    var appId, measurementId, e_1, response, e_2, backoffMillis, throttleMetadata;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          appId = appFields.appId, measurementId = appFields.measurementId;
          _b.label = 1;
        case 1:
          _b.trys.push([1, 3, , 4]);
          return [4, setAbortableTimeout(signal, throttleEndTimeMillis)];
        case 2:
          _b.sent();
          return [3, 4];
        case 3:
          e_1 = _b.sent();
          if (measurementId) {
            logger3.warn("Timed out fetching this Firebase app's measurement ID from the server." + (" Falling back to the measurement ID " + measurementId) + (' provided in the "measurementId" field in the local Firebase config. [' + e_1.message + "]"));
            return [2, { appId, measurementId }];
          }
          throw e_1;
        case 4:
          _b.trys.push([4, 6, , 7]);
          return [4, fetchDynamicConfig(appFields)];
        case 5:
          response = _b.sent();
          retryData.deleteThrottleMetadata(appId);
          return [2, response];
        case 6:
          e_2 = _b.sent();
          if (!isRetriableError(e_2)) {
            retryData.deleteThrottleMetadata(appId);
            if (measurementId) {
              logger3.warn("Failed to fetch this Firebase app's measurement ID from the server." + (" Falling back to the measurement ID " + measurementId) + (' provided in the "measurementId" field in the local Firebase config. [' + e_2.message + "]"));
              return [2, { appId, measurementId }];
            } else {
              throw e_2;
            }
          }
          backoffMillis = Number(e_2.customData.httpStatus) === 503 ? calculateBackoffMillis(backoffCount, retryData.intervalMillis, LONG_RETRY_FACTOR) : calculateBackoffMillis(backoffCount, retryData.intervalMillis);
          throttleMetadata = {
            throttleEndTimeMillis: Date.now() + backoffMillis,
            backoffCount: backoffCount + 1
          };
          retryData.setThrottleMetadata(appId, throttleMetadata);
          logger3.debug("Calling attemptFetch again in " + backoffMillis + " millis");
          return [2, attemptFetchDynamicConfigWithRetry(appFields, throttleMetadata, signal, retryData)];
        case 7:
          return [2];
      }
    });
  });
}
function setAbortableTimeout(signal, throttleEndTimeMillis) {
  return new Promise(function(resolve, reject) {
    var backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);
    var timeout = setTimeout(resolve, backoffMillis);
    signal.addEventListener(function() {
      clearTimeout(timeout);
      reject(ERROR_FACTORY4.create("fetch-throttle", {
        throttleEndTimeMillis
      }));
    });
  });
}
function isRetriableError(e) {
  if (!(e instanceof FirebaseError) || !e.customData) {
    return false;
  }
  var httpStatus = Number(e.customData["httpStatus"]);
  return httpStatus === 429 || httpStatus === 500 || httpStatus === 503 || httpStatus === 504;
}
var AnalyticsAbortSignal = function() {
  function AnalyticsAbortSignal2() {
    this.listeners = [];
  }
  AnalyticsAbortSignal2.prototype.addEventListener = function(listener) {
    this.listeners.push(listener);
  };
  AnalyticsAbortSignal2.prototype.abort = function() {
    this.listeners.forEach(function(listener) {
      return listener();
    });
  };
  return AnalyticsAbortSignal2;
}();
function validateIndexedDB() {
  return __awaiter(this, void 0, void 0, function() {
    var e_1;
    return __generator(this, function(_a8) {
      switch (_a8.label) {
        case 0:
          if (!!isIndexedDBAvailable())
            return [3, 1];
          logger3.warn(ERROR_FACTORY4.create("indexeddb-unavailable", {
            errorInfo: "IndexedDB is not available in this environment."
          }).message);
          return [2, false];
        case 1:
          _a8.trys.push([1, 3, , 4]);
          return [4, validateIndexedDBOpenable()];
        case 2:
          _a8.sent();
          return [3, 4];
        case 3:
          e_1 = _a8.sent();
          logger3.warn(ERROR_FACTORY4.create("indexeddb-unavailable", {
            errorInfo: e_1
          }).message);
          return [2, false];
        case 4:
          return [2, true];
      }
    });
  });
}
function initializeIds(app, dynamicConfigPromisesList2, measurementIdToAppId2, installations, gtagCore, dataLayerName2) {
  return __awaiter(this, void 0, void 0, function() {
    var dynamicConfigPromise, fidPromise, _a8, dynamicConfig, fid, configProperties;
    var _b;
    return __generator(this, function(_c2) {
      switch (_c2.label) {
        case 0:
          dynamicConfigPromise = fetchDynamicConfigWithRetry(app);
          dynamicConfigPromise.then(function(config) {
            measurementIdToAppId2[config.measurementId] = config.appId;
            if (app.options.measurementId && config.measurementId !== app.options.measurementId) {
              logger3.warn("The measurement ID in the local Firebase config (" + app.options.measurementId + ")" + (" does not match the measurement ID fetched from the server (" + config.measurementId + ").") + " To ensure analytics events are always sent to the correct Analytics property, update the measurement ID field in the local config or remove it from the local config.");
            }
          }).catch(function(e) {
            return logger3.error(e);
          });
          dynamicConfigPromisesList2.push(dynamicConfigPromise);
          fidPromise = validateIndexedDB().then(function(envIsValid) {
            if (envIsValid) {
              return installations.getId();
            } else {
              return void 0;
            }
          });
          return [4, Promise.all([
            dynamicConfigPromise,
            fidPromise
          ])];
        case 1:
          _a8 = _c2.sent(), dynamicConfig = _a8[0], fid = _a8[1];
          if (!findGtagScriptOnPage()) {
            insertScriptTag(dataLayerName2, dynamicConfig.measurementId);
          }
          gtagCore("js", new Date());
          configProperties = (_b = {}, _b[ORIGIN_KEY] = "firebase", _b.update = true, _b);
          if (fid != null) {
            configProperties[GA_FID_KEY] = fid;
          }
          gtagCore(GtagCommand.CONFIG, dynamicConfig.measurementId, configProperties);
          return [2, dynamicConfig.measurementId];
      }
    });
  });
}
var initializationPromisesMap = {};
var dynamicConfigPromisesList = [];
var measurementIdToAppId = {};
var dataLayerName = "dataLayer";
var gtagName = "gtag";
var gtagCoreFunction;
var wrappedGtagFunction;
var globalInitDone = false;
function settings(options) {
  if (globalInitDone) {
    throw ERROR_FACTORY4.create("already-initialized");
  }
  if (options.dataLayerName) {
    dataLayerName = options.dataLayerName;
  }
  if (options.gtagName) {
    gtagName = options.gtagName;
  }
}
function warnOnBrowserContextMismatch() {
  var mismatchedEnvMessages = [];
  if (isBrowserExtension()) {
    mismatchedEnvMessages.push("This is a browser extension environment.");
  }
  if (!areCookiesEnabled()) {
    mismatchedEnvMessages.push("Cookies are not available.");
  }
  if (mismatchedEnvMessages.length > 0) {
    var details = mismatchedEnvMessages.map(function(message, index) {
      return "(" + (index + 1) + ") " + message;
    }).join(" ");
    var err = ERROR_FACTORY4.create("invalid-analytics-context", {
      errorInfo: details
    });
    logger3.warn(err.message);
  }
}
function factory2(app, installations) {
  warnOnBrowserContextMismatch();
  var appId = app.options.appId;
  if (!appId) {
    throw ERROR_FACTORY4.create("no-app-id");
  }
  if (!app.options.apiKey) {
    if (app.options.measurementId) {
      logger3.warn('The "apiKey" field is empty in the local Firebase config. This is needed to fetch the latest' + (" measurement ID for this Firebase app. Falling back to the measurement ID " + app.options.measurementId) + ' provided in the "measurementId" field in the local Firebase config.');
    } else {
      throw ERROR_FACTORY4.create("no-api-key");
    }
  }
  if (initializationPromisesMap[appId] != null) {
    throw ERROR_FACTORY4.create("already-exists", {
      id: appId
    });
  }
  if (!globalInitDone) {
    getOrCreateDataLayer(dataLayerName);
    var _a8 = wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagName), wrappedGtag = _a8.wrappedGtag, gtagCore = _a8.gtagCore;
    wrappedGtagFunction = wrappedGtag;
    gtagCoreFunction = gtagCore;
    globalInitDone = true;
  }
  initializationPromisesMap[appId] = initializeIds(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCoreFunction, dataLayerName);
  var analyticsInstance = {
    app,
    logEvent: function(eventName, eventParams, options) {
      logEvent(wrappedGtagFunction, initializationPromisesMap[appId], eventName, eventParams, options).catch(function(e) {
        return logger3.error(e);
      });
    },
    setCurrentScreen: function(screenName, options) {
      setCurrentScreen(wrappedGtagFunction, initializationPromisesMap[appId], screenName, options).catch(function(e) {
        return logger3.error(e);
      });
    },
    setUserId: function(id2, options) {
      setUserId(wrappedGtagFunction, initializationPromisesMap[appId], id2, options).catch(function(e) {
        return logger3.error(e);
      });
    },
    setUserProperties: function(properties, options) {
      setUserProperties(wrappedGtagFunction, initializationPromisesMap[appId], properties, options).catch(function(e) {
        return logger3.error(e);
      });
    },
    setAnalyticsCollectionEnabled: function(enabled) {
      setAnalyticsCollectionEnabled(initializationPromisesMap[appId], enabled).catch(function(e) {
        return logger3.error(e);
      });
    },
    INTERNAL: {
      delete: function() {
        delete initializationPromisesMap[appId];
        return Promise.resolve();
      }
    }
  };
  return analyticsInstance;
}
var name6 = "@firebase/analytics";
var version6 = "0.6.18";
var ANALYTICS_TYPE = "analytics";
function registerAnalytics(instance) {
  instance.INTERNAL.registerComponent(new Component(ANALYTICS_TYPE, function(container) {
    var app = container.getProvider("app").getImmediate();
    var installations = container.getProvider("installations").getImmediate();
    return factory2(app, installations);
  }, "PUBLIC").setServiceProps({
    settings,
    EventName,
    isSupported: isSupported2
  }));
  instance.INTERNAL.registerComponent(new Component("analytics-internal", internalFactory2, "PRIVATE"));
  instance.registerVersion(name6, version6);
  function internalFactory2(container) {
    try {
      var analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();
      return {
        logEvent: analytics.logEvent
      };
    } catch (e) {
      throw ERROR_FACTORY4.create("interop-component-reg-failed", {
        reason: e
      });
    }
  }
}
registerAnalytics(index_esm_default);
function isSupported2() {
  return __awaiter(this, void 0, void 0, function() {
    var isDBOpenable;
    return __generator(this, function(_a8) {
      switch (_a8.label) {
        case 0:
          if (isBrowserExtension()) {
            return [2, false];
          }
          if (!areCookiesEnabled()) {
            return [2, false];
          }
          if (!isIndexedDBAvailable()) {
            return [2, false];
          }
          _a8.label = 1;
        case 1:
          _a8.trys.push([1, 3, , 4]);
          return [4, validateIndexedDBOpenable()];
        case 2:
          isDBOpenable = _a8.sent();
          return [2, isDBOpenable];
        case 3:
          _a8.sent();
          return [2, false];
        case 4:
          return [2];
      }
    });
  });
}

// node_modules/@firebase/remote-config/dist/index.esm.js
var CachingClient = function() {
  function CachingClient2(client, storage, storageCache, logger5) {
    this.client = client;
    this.storage = storage;
    this.storageCache = storageCache;
    this.logger = logger5;
  }
  CachingClient2.prototype.isCachedDataFresh = function(cacheMaxAgeMillis, lastSuccessfulFetchTimestampMillis) {
    if (!lastSuccessfulFetchTimestampMillis) {
      this.logger.debug("Config fetch cache check. Cache unpopulated.");
      return false;
    }
    var cacheAgeMillis = Date.now() - lastSuccessfulFetchTimestampMillis;
    var isCachedDataFresh = cacheAgeMillis <= cacheMaxAgeMillis;
    this.logger.debug("Config fetch cache check." + (" Cache age millis: " + cacheAgeMillis + ".") + (" Cache max age millis (minimumFetchIntervalMillis setting): " + cacheMaxAgeMillis + ".") + (" Is cache hit: " + isCachedDataFresh + "."));
    return isCachedDataFresh;
  };
  CachingClient2.prototype.fetch = function(request) {
    return __awaiter(this, void 0, void 0, function() {
      var _a8, lastSuccessfulFetchTimestampMillis, lastSuccessfulFetchResponse, response, storageOperations;
      return __generator(this, function(_b) {
        switch (_b.label) {
          case 0:
            return [4, Promise.all([
              this.storage.getLastSuccessfulFetchTimestampMillis(),
              this.storage.getLastSuccessfulFetchResponse()
            ])];
          case 1:
            _a8 = _b.sent(), lastSuccessfulFetchTimestampMillis = _a8[0], lastSuccessfulFetchResponse = _a8[1];
            if (lastSuccessfulFetchResponse && this.isCachedDataFresh(request.cacheMaxAgeMillis, lastSuccessfulFetchTimestampMillis)) {
              return [2, lastSuccessfulFetchResponse];
            }
            request.eTag = lastSuccessfulFetchResponse && lastSuccessfulFetchResponse.eTag;
            return [4, this.client.fetch(request)];
          case 2:
            response = _b.sent();
            storageOperations = [
              this.storageCache.setLastSuccessfulFetchTimestampMillis(Date.now())
            ];
            if (response.status === 200) {
              storageOperations.push(this.storage.setLastSuccessfulFetchResponse(response));
            }
            return [4, Promise.all(storageOperations)];
          case 3:
            _b.sent();
            return [2, response];
        }
      });
    });
  };
  return CachingClient2;
}();
var _a6;
var ERROR_DESCRIPTION_MAP3 = (_a6 = {}, _a6["registration-window"] = "Undefined window object. This SDK only supports usage in a browser environment.", _a6["registration-project-id"] = "Undefined project identifier. Check Firebase app initialization.", _a6["registration-api-key"] = "Undefined API key. Check Firebase app initialization.", _a6["registration-app-id"] = "Undefined app identifier. Check Firebase app initialization.", _a6["storage-open"] = "Error thrown when opening storage. Original error: {$originalErrorMessage}.", _a6["storage-get"] = "Error thrown when reading from storage. Original error: {$originalErrorMessage}.", _a6["storage-set"] = "Error thrown when writing to storage. Original error: {$originalErrorMessage}.", _a6["storage-delete"] = "Error thrown when deleting from storage. Original error: {$originalErrorMessage}.", _a6["fetch-client-network"] = "Fetch client failed to connect to a network. Check Internet connection. Original error: {$originalErrorMessage}.", _a6["fetch-timeout"] = 'The config fetch request timed out.  Configure timeout using "fetchTimeoutMillis" SDK setting.', _a6["fetch-throttle"] = 'The config fetch request timed out while in an exponential backoff state. Configure timeout using "fetchTimeoutMillis" SDK setting. Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.', _a6["fetch-client-parse"] = "Fetch client could not parse response. Original error: {$originalErrorMessage}.", _a6["fetch-status"] = "Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.", _a6);
var ERROR_FACTORY5 = new ErrorFactory("remoteconfig", "Remote Config", ERROR_DESCRIPTION_MAP3);
function hasErrorCode(e, errorCode) {
  return e instanceof FirebaseError && e.code.indexOf(errorCode) !== -1;
}
function getUserLanguage(navigatorLanguage) {
  if (navigatorLanguage === void 0) {
    navigatorLanguage = navigator;
  }
  return navigatorLanguage.languages && navigatorLanguage.languages[0] || navigatorLanguage.language;
}
var RestClient = function() {
  function RestClient2(firebaseInstallations, sdkVersion, namespace, projectId, apiKey, appId) {
    this.firebaseInstallations = firebaseInstallations;
    this.sdkVersion = sdkVersion;
    this.namespace = namespace;
    this.projectId = projectId;
    this.apiKey = apiKey;
    this.appId = appId;
  }
  RestClient2.prototype.fetch = function(request) {
    return __awaiter(this, void 0, void 0, function() {
      var _a8, installationId, installationToken, urlBase, url, headers, requestBody, options, fetchPromise, timeoutPromise, response, originalError_1, errorCode, status, responseEtag, config, state, responseBody, originalError_2;
      return __generator(this, function(_b) {
        switch (_b.label) {
          case 0:
            return [4, Promise.all([
              this.firebaseInstallations.getId(),
              this.firebaseInstallations.getToken()
            ])];
          case 1:
            _a8 = _b.sent(), installationId = _a8[0], installationToken = _a8[1];
            urlBase = window.FIREBASE_REMOTE_CONFIG_URL_BASE || "https://firebaseremoteconfig.googleapis.com";
            url = urlBase + "/v1/projects/" + this.projectId + "/namespaces/" + this.namespace + ":fetch?key=" + this.apiKey;
            headers = {
              "Content-Type": "application/json",
              "Content-Encoding": "gzip",
              "If-None-Match": request.eTag || "*"
            };
            requestBody = {
              sdk_version: this.sdkVersion,
              app_instance_id: installationId,
              app_instance_id_token: installationToken,
              app_id: this.appId,
              language_code: getUserLanguage()
            };
            options = {
              method: "POST",
              headers,
              body: JSON.stringify(requestBody)
            };
            fetchPromise = fetch(url, options);
            timeoutPromise = new Promise(function(_resolve, reject) {
              request.signal.addEventListener(function() {
                var error2 = new Error("The operation was aborted.");
                error2.name = "AbortError";
                reject(error2);
              });
            });
            _b.label = 2;
          case 2:
            _b.trys.push([2, 5, , 6]);
            return [4, Promise.race([fetchPromise, timeoutPromise])];
          case 3:
            _b.sent();
            return [4, fetchPromise];
          case 4:
            response = _b.sent();
            return [3, 6];
          case 5:
            originalError_1 = _b.sent();
            errorCode = "fetch-client-network";
            if (originalError_1.name === "AbortError") {
              errorCode = "fetch-timeout";
            }
            throw ERROR_FACTORY5.create(errorCode, {
              originalErrorMessage: originalError_1.message
            });
          case 6:
            status = response.status;
            responseEtag = response.headers.get("ETag") || void 0;
            if (!(response.status === 200))
              return [3, 11];
            responseBody = void 0;
            _b.label = 7;
          case 7:
            _b.trys.push([7, 9, , 10]);
            return [4, response.json()];
          case 8:
            responseBody = _b.sent();
            return [3, 10];
          case 9:
            originalError_2 = _b.sent();
            throw ERROR_FACTORY5.create("fetch-client-parse", {
              originalErrorMessage: originalError_2.message
            });
          case 10:
            config = responseBody["entries"];
            state = responseBody["state"];
            _b.label = 11;
          case 11:
            if (state === "INSTANCE_STATE_UNSPECIFIED") {
              status = 500;
            } else if (state === "NO_CHANGE") {
              status = 304;
            } else if (state === "NO_TEMPLATE" || state === "EMPTY_CONFIG") {
              config = {};
            }
            if (status !== 304 && status !== 200) {
              throw ERROR_FACTORY5.create("fetch-status", {
                httpStatus: status
              });
            }
            return [2, { status, eTag: responseEtag, config }];
        }
      });
    });
  };
  return RestClient2;
}();
var RemoteConfigAbortSignal = function() {
  function RemoteConfigAbortSignal2() {
    this.listeners = [];
  }
  RemoteConfigAbortSignal2.prototype.addEventListener = function(listener) {
    this.listeners.push(listener);
  };
  RemoteConfigAbortSignal2.prototype.abort = function() {
    this.listeners.forEach(function(listener) {
      return listener();
    });
  };
  return RemoteConfigAbortSignal2;
}();
var DEFAULT_VALUE_FOR_BOOLEAN = false;
var DEFAULT_VALUE_FOR_STRING = "";
var DEFAULT_VALUE_FOR_NUMBER = 0;
var BOOLEAN_TRUTHY_VALUES = ["1", "true", "t", "yes", "y", "on"];
var Value = function() {
  function Value2(_source, _value) {
    if (_value === void 0) {
      _value = DEFAULT_VALUE_FOR_STRING;
    }
    this._source = _source;
    this._value = _value;
  }
  Value2.prototype.asString = function() {
    return this._value;
  };
  Value2.prototype.asBoolean = function() {
    if (this._source === "static") {
      return DEFAULT_VALUE_FOR_BOOLEAN;
    }
    return BOOLEAN_TRUTHY_VALUES.indexOf(this._value.toLowerCase()) >= 0;
  };
  Value2.prototype.asNumber = function() {
    if (this._source === "static") {
      return DEFAULT_VALUE_FOR_NUMBER;
    }
    var num = Number(this._value);
    if (isNaN(num)) {
      num = DEFAULT_VALUE_FOR_NUMBER;
    }
    return num;
  };
  Value2.prototype.getSource = function() {
    return this._source;
  };
  return Value2;
}();
var DEFAULT_FETCH_TIMEOUT_MILLIS = 60 * 1e3;
var DEFAULT_CACHE_MAX_AGE_MILLIS = 12 * 60 * 60 * 1e3;
var RemoteConfig = function() {
  function RemoteConfig2(app, _client, _storageCache, _storage, _logger) {
    this.app = app;
    this._client = _client;
    this._storageCache = _storageCache;
    this._storage = _storage;
    this._logger = _logger;
    this._isInitializationComplete = false;
    this.settings = {
      fetchTimeoutMillis: DEFAULT_FETCH_TIMEOUT_MILLIS,
      minimumFetchIntervalMillis: DEFAULT_CACHE_MAX_AGE_MILLIS
    };
    this.defaultConfig = {};
  }
  RemoteConfig2.prototype.setLogLevel = function(logLevel) {
    switch (logLevel) {
      case "debug":
        this._logger.logLevel = LogLevel.DEBUG;
        break;
      case "silent":
        this._logger.logLevel = LogLevel.SILENT;
        break;
      default:
        this._logger.logLevel = LogLevel.ERROR;
    }
  };
  Object.defineProperty(RemoteConfig2.prototype, "fetchTimeMillis", {
    get: function() {
      return this._storageCache.getLastSuccessfulFetchTimestampMillis() || -1;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(RemoteConfig2.prototype, "lastFetchStatus", {
    get: function() {
      return this._storageCache.getLastFetchStatus() || "no-fetch-yet";
    },
    enumerable: false,
    configurable: true
  });
  RemoteConfig2.prototype.activate = function() {
    return __awaiter(this, void 0, void 0, function() {
      var _a8, lastSuccessfulFetchResponse, activeConfigEtag;
      return __generator(this, function(_b) {
        switch (_b.label) {
          case 0:
            return [4, Promise.all([
              this._storage.getLastSuccessfulFetchResponse(),
              this._storage.getActiveConfigEtag()
            ])];
          case 1:
            _a8 = _b.sent(), lastSuccessfulFetchResponse = _a8[0], activeConfigEtag = _a8[1];
            if (!lastSuccessfulFetchResponse || !lastSuccessfulFetchResponse.config || !lastSuccessfulFetchResponse.eTag || lastSuccessfulFetchResponse.eTag === activeConfigEtag) {
              return [2, false];
            }
            return [4, Promise.all([
              this._storageCache.setActiveConfig(lastSuccessfulFetchResponse.config),
              this._storage.setActiveConfigEtag(lastSuccessfulFetchResponse.eTag)
            ])];
          case 2:
            _b.sent();
            return [2, true];
        }
      });
    });
  };
  RemoteConfig2.prototype.ensureInitialized = function() {
    var _this = this;
    if (!this._initializePromise) {
      this._initializePromise = this._storageCache.loadFromStorage().then(function() {
        _this._isInitializationComplete = true;
      });
    }
    return this._initializePromise;
  };
  RemoteConfig2.prototype.fetch = function() {
    return __awaiter(this, void 0, void 0, function() {
      var abortSignal, e_1, lastFetchStatus;
      var _this = this;
      return __generator(this, function(_a8) {
        switch (_a8.label) {
          case 0:
            abortSignal = new RemoteConfigAbortSignal();
            setTimeout(function() {
              return __awaiter(_this, void 0, void 0, function() {
                return __generator(this, function(_a9) {
                  abortSignal.abort();
                  return [2];
                });
              });
            }, this.settings.fetchTimeoutMillis);
            _a8.label = 1;
          case 1:
            _a8.trys.push([1, 4, , 6]);
            return [4, this._client.fetch({
              cacheMaxAgeMillis: this.settings.minimumFetchIntervalMillis,
              signal: abortSignal
            })];
          case 2:
            _a8.sent();
            return [4, this._storageCache.setLastFetchStatus("success")];
          case 3:
            _a8.sent();
            return [3, 6];
          case 4:
            e_1 = _a8.sent();
            lastFetchStatus = hasErrorCode(e_1, "fetch-throttle") ? "throttle" : "failure";
            return [4, this._storageCache.setLastFetchStatus(lastFetchStatus)];
          case 5:
            _a8.sent();
            throw e_1;
          case 6:
            return [2];
        }
      });
    });
  };
  RemoteConfig2.prototype.fetchAndActivate = function() {
    return __awaiter(this, void 0, void 0, function() {
      return __generator(this, function(_a8) {
        switch (_a8.label) {
          case 0:
            return [4, this.fetch()];
          case 1:
            _a8.sent();
            return [2, this.activate()];
        }
      });
    });
  };
  RemoteConfig2.prototype.getAll = function() {
    var _this = this;
    return getAllKeys(this._storageCache.getActiveConfig(), this.defaultConfig).reduce(function(allConfigs, key) {
      allConfigs[key] = _this.getValue(key);
      return allConfigs;
    }, {});
  };
  RemoteConfig2.prototype.getBoolean = function(key) {
    return this.getValue(key).asBoolean();
  };
  RemoteConfig2.prototype.getNumber = function(key) {
    return this.getValue(key).asNumber();
  };
  RemoteConfig2.prototype.getString = function(key) {
    return this.getValue(key).asString();
  };
  RemoteConfig2.prototype.getValue = function(key) {
    if (!this._isInitializationComplete) {
      this._logger.debug('A value was requested for key "' + key + '" before SDK initialization completed. Await on ensureInitialized if the intent was to get a previously activated value.');
    }
    var activeConfig = this._storageCache.getActiveConfig();
    if (activeConfig && activeConfig[key] !== void 0) {
      return new Value("remote", activeConfig[key]);
    } else if (this.defaultConfig && this.defaultConfig[key] !== void 0) {
      return new Value("default", String(this.defaultConfig[key]));
    }
    this._logger.debug('Returning static value for key "' + key + '". Define a default or remote value if this is unintentional.');
    return new Value("static");
  };
  return RemoteConfig2;
}();
function getAllKeys(obj1, obj2) {
  if (obj1 === void 0) {
    obj1 = {};
  }
  if (obj2 === void 0) {
    obj2 = {};
  }
  return Object.keys(__assign(__assign({}, obj1), obj2));
}
function toFirebaseError(event, errorCode) {
  var originalError = event.target.error || void 0;
  return ERROR_FACTORY5.create(errorCode, {
    originalErrorMessage: originalError && originalError.message
  });
}
var APP_NAMESPACE_STORE = "app_namespace_store";
var DB_NAME = "firebase_remote_config";
var DB_VERSION = 1;
function openDatabase() {
  return new Promise(function(resolve, reject) {
    var request = indexedDB.open(DB_NAME, DB_VERSION);
    request.onerror = function(event) {
      reject(toFirebaseError(event, "storage-open"));
    };
    request.onsuccess = function(event) {
      resolve(event.target.result);
    };
    request.onupgradeneeded = function(event) {
      var db2 = event.target.result;
      switch (event.oldVersion) {
        case 0:
          db2.createObjectStore(APP_NAMESPACE_STORE, {
            keyPath: "compositeKey"
          });
      }
    };
  });
}
var Storage = function() {
  function Storage2(appId, appName, namespace, openDbPromise) {
    if (openDbPromise === void 0) {
      openDbPromise = openDatabase();
    }
    this.appId = appId;
    this.appName = appName;
    this.namespace = namespace;
    this.openDbPromise = openDbPromise;
  }
  Storage2.prototype.getLastFetchStatus = function() {
    return this.get("last_fetch_status");
  };
  Storage2.prototype.setLastFetchStatus = function(status) {
    return this.set("last_fetch_status", status);
  };
  Storage2.prototype.getLastSuccessfulFetchTimestampMillis = function() {
    return this.get("last_successful_fetch_timestamp_millis");
  };
  Storage2.prototype.setLastSuccessfulFetchTimestampMillis = function(timestamp) {
    return this.set("last_successful_fetch_timestamp_millis", timestamp);
  };
  Storage2.prototype.getLastSuccessfulFetchResponse = function() {
    return this.get("last_successful_fetch_response");
  };
  Storage2.prototype.setLastSuccessfulFetchResponse = function(response) {
    return this.set("last_successful_fetch_response", response);
  };
  Storage2.prototype.getActiveConfig = function() {
    return this.get("active_config");
  };
  Storage2.prototype.setActiveConfig = function(config) {
    return this.set("active_config", config);
  };
  Storage2.prototype.getActiveConfigEtag = function() {
    return this.get("active_config_etag");
  };
  Storage2.prototype.setActiveConfigEtag = function(etag) {
    return this.set("active_config_etag", etag);
  };
  Storage2.prototype.getThrottleMetadata = function() {
    return this.get("throttle_metadata");
  };
  Storage2.prototype.setThrottleMetadata = function(metadata) {
    return this.set("throttle_metadata", metadata);
  };
  Storage2.prototype.deleteThrottleMetadata = function() {
    return this.delete("throttle_metadata");
  };
  Storage2.prototype.get = function(key) {
    return __awaiter(this, void 0, void 0, function() {
      var db2;
      var _this = this;
      return __generator(this, function(_a8) {
        switch (_a8.label) {
          case 0:
            return [4, this.openDbPromise];
          case 1:
            db2 = _a8.sent();
            return [2, new Promise(function(resolve, reject) {
              var transaction = db2.transaction([APP_NAMESPACE_STORE], "readonly");
              var objectStore = transaction.objectStore(APP_NAMESPACE_STORE);
              var compositeKey = _this.createCompositeKey(key);
              try {
                var request = objectStore.get(compositeKey);
                request.onerror = function(event) {
                  reject(toFirebaseError(event, "storage-get"));
                };
                request.onsuccess = function(event) {
                  var result = event.target.result;
                  if (result) {
                    resolve(result.value);
                  } else {
                    resolve(void 0);
                  }
                };
              } catch (e) {
                reject(ERROR_FACTORY5.create("storage-get", {
                  originalErrorMessage: e && e.message
                }));
              }
            })];
        }
      });
    });
  };
  Storage2.prototype.set = function(key, value) {
    return __awaiter(this, void 0, void 0, function() {
      var db2;
      var _this = this;
      return __generator(this, function(_a8) {
        switch (_a8.label) {
          case 0:
            return [4, this.openDbPromise];
          case 1:
            db2 = _a8.sent();
            return [2, new Promise(function(resolve, reject) {
              var transaction = db2.transaction([APP_NAMESPACE_STORE], "readwrite");
              var objectStore = transaction.objectStore(APP_NAMESPACE_STORE);
              var compositeKey = _this.createCompositeKey(key);
              try {
                var request = objectStore.put({
                  compositeKey,
                  value
                });
                request.onerror = function(event) {
                  reject(toFirebaseError(event, "storage-set"));
                };
                request.onsuccess = function() {
                  resolve();
                };
              } catch (e) {
                reject(ERROR_FACTORY5.create("storage-set", {
                  originalErrorMessage: e && e.message
                }));
              }
            })];
        }
      });
    });
  };
  Storage2.prototype.delete = function(key) {
    return __awaiter(this, void 0, void 0, function() {
      var db2;
      var _this = this;
      return __generator(this, function(_a8) {
        switch (_a8.label) {
          case 0:
            return [4, this.openDbPromise];
          case 1:
            db2 = _a8.sent();
            return [2, new Promise(function(resolve, reject) {
              var transaction = db2.transaction([APP_NAMESPACE_STORE], "readwrite");
              var objectStore = transaction.objectStore(APP_NAMESPACE_STORE);
              var compositeKey = _this.createCompositeKey(key);
              try {
                var request = objectStore.delete(compositeKey);
                request.onerror = function(event) {
                  reject(toFirebaseError(event, "storage-delete"));
                };
                request.onsuccess = function() {
                  resolve();
                };
              } catch (e) {
                reject(ERROR_FACTORY5.create("storage-delete", {
                  originalErrorMessage: e && e.message
                }));
              }
            })];
        }
      });
    });
  };
  Storage2.prototype.createCompositeKey = function(key) {
    return [this.appId, this.appName, this.namespace, key].join();
  };
  return Storage2;
}();
var StorageCache = function() {
  function StorageCache2(storage) {
    this.storage = storage;
  }
  StorageCache2.prototype.getLastFetchStatus = function() {
    return this.lastFetchStatus;
  };
  StorageCache2.prototype.getLastSuccessfulFetchTimestampMillis = function() {
    return this.lastSuccessfulFetchTimestampMillis;
  };
  StorageCache2.prototype.getActiveConfig = function() {
    return this.activeConfig;
  };
  StorageCache2.prototype.loadFromStorage = function() {
    return __awaiter(this, void 0, void 0, function() {
      var lastFetchStatusPromise, lastSuccessfulFetchTimestampMillisPromise, activeConfigPromise, lastFetchStatus, lastSuccessfulFetchTimestampMillis, activeConfig;
      return __generator(this, function(_a8) {
        switch (_a8.label) {
          case 0:
            lastFetchStatusPromise = this.storage.getLastFetchStatus();
            lastSuccessfulFetchTimestampMillisPromise = this.storage.getLastSuccessfulFetchTimestampMillis();
            activeConfigPromise = this.storage.getActiveConfig();
            return [4, lastFetchStatusPromise];
          case 1:
            lastFetchStatus = _a8.sent();
            if (lastFetchStatus) {
              this.lastFetchStatus = lastFetchStatus;
            }
            return [4, lastSuccessfulFetchTimestampMillisPromise];
          case 2:
            lastSuccessfulFetchTimestampMillis = _a8.sent();
            if (lastSuccessfulFetchTimestampMillis) {
              this.lastSuccessfulFetchTimestampMillis = lastSuccessfulFetchTimestampMillis;
            }
            return [4, activeConfigPromise];
          case 3:
            activeConfig = _a8.sent();
            if (activeConfig) {
              this.activeConfig = activeConfig;
            }
            return [2];
        }
      });
    });
  };
  StorageCache2.prototype.setLastFetchStatus = function(status) {
    this.lastFetchStatus = status;
    return this.storage.setLastFetchStatus(status);
  };
  StorageCache2.prototype.setLastSuccessfulFetchTimestampMillis = function(timestampMillis) {
    this.lastSuccessfulFetchTimestampMillis = timestampMillis;
    return this.storage.setLastSuccessfulFetchTimestampMillis(timestampMillis);
  };
  StorageCache2.prototype.setActiveConfig = function(activeConfig) {
    this.activeConfig = activeConfig;
    return this.storage.setActiveConfig(activeConfig);
  };
  return StorageCache2;
}();
function setAbortableTimeout2(signal, throttleEndTimeMillis) {
  return new Promise(function(resolve, reject) {
    var backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);
    var timeout = setTimeout(resolve, backoffMillis);
    signal.addEventListener(function() {
      clearTimeout(timeout);
      reject(ERROR_FACTORY5.create("fetch-throttle", {
        throttleEndTimeMillis
      }));
    });
  });
}
function isRetriableError2(e) {
  if (!(e instanceof FirebaseError) || !e.customData) {
    return false;
  }
  var httpStatus = Number(e.customData["httpStatus"]);
  return httpStatus === 429 || httpStatus === 500 || httpStatus === 503 || httpStatus === 504;
}
var RetryingClient = function() {
  function RetryingClient2(client, storage) {
    this.client = client;
    this.storage = storage;
  }
  RetryingClient2.prototype.fetch = function(request) {
    return __awaiter(this, void 0, void 0, function() {
      var throttleMetadata;
      return __generator(this, function(_a8) {
        switch (_a8.label) {
          case 0:
            return [4, this.storage.getThrottleMetadata()];
          case 1:
            throttleMetadata = _a8.sent() || {
              backoffCount: 0,
              throttleEndTimeMillis: Date.now()
            };
            return [2, this.attemptFetch(request, throttleMetadata)];
        }
      });
    });
  };
  RetryingClient2.prototype.attemptFetch = function(request, _a8) {
    var throttleEndTimeMillis = _a8.throttleEndTimeMillis, backoffCount = _a8.backoffCount;
    return __awaiter(this, void 0, void 0, function() {
      var response, e_1, throttleMetadata;
      return __generator(this, function(_b) {
        switch (_b.label) {
          case 0:
            return [4, setAbortableTimeout2(request.signal, throttleEndTimeMillis)];
          case 1:
            _b.sent();
            _b.label = 2;
          case 2:
            _b.trys.push([2, 5, , 7]);
            return [4, this.client.fetch(request)];
          case 3:
            response = _b.sent();
            return [4, this.storage.deleteThrottleMetadata()];
          case 4:
            _b.sent();
            return [2, response];
          case 5:
            e_1 = _b.sent();
            if (!isRetriableError2(e_1)) {
              throw e_1;
            }
            throttleMetadata = {
              throttleEndTimeMillis: Date.now() + calculateBackoffMillis(backoffCount),
              backoffCount: backoffCount + 1
            };
            return [4, this.storage.setThrottleMetadata(throttleMetadata)];
          case 6:
            _b.sent();
            return [2, this.attemptFetch(request, throttleMetadata)];
          case 7:
            return [2];
        }
      });
    });
  };
  return RetryingClient2;
}();
var name7 = "@firebase/remote-config";
var version7 = "0.1.43";
function registerRemoteConfig(firebaseInstance) {
  firebaseInstance.INTERNAL.registerComponent(new Component("remoteConfig", remoteConfigFactory, "PUBLIC").setMultipleInstances(true));
  firebaseInstance.registerVersion(name7, version7);
  function remoteConfigFactory(container, _a8) {
    var namespace = _a8.instanceIdentifier;
    var app = container.getProvider("app").getImmediate();
    var installations = container.getProvider("installations").getImmediate();
    if (typeof window === "undefined") {
      throw ERROR_FACTORY5.create("registration-window");
    }
    var _b = app.options, projectId = _b.projectId, apiKey = _b.apiKey, appId = _b.appId;
    if (!projectId) {
      throw ERROR_FACTORY5.create("registration-project-id");
    }
    if (!apiKey) {
      throw ERROR_FACTORY5.create("registration-api-key");
    }
    if (!appId) {
      throw ERROR_FACTORY5.create("registration-app-id");
    }
    namespace = namespace || "firebase";
    var storage = new Storage(appId, app.name, namespace);
    var storageCache = new StorageCache(storage);
    var logger5 = new Logger(name7);
    logger5.logLevel = LogLevel.ERROR;
    var restClient = new RestClient(installations, firebaseInstance.SDK_VERSION, namespace, projectId, apiKey, appId);
    var retryingClient = new RetryingClient(restClient, storage);
    var cachingClient = new CachingClient(retryingClient, storage, storageCache, logger5);
    var remoteConfigInstance = new RemoteConfig(app, cachingClient, storageCache, storage, logger5);
    remoteConfigInstance.ensureInitialized();
    return remoteConfigInstance;
  }
}
registerRemoteConfig(index_esm_default);

// node_modules/@firebase/app-check/dist/index.esm.js
var _a7;
var ERRORS2 = (_a7 = {}, _a7["already-activated"] = "You are trying to activate AppCheck for FirebaseApp {$appName}, while it is already activated. AppCheck can only be activated once.", _a7["use-before-activation"] = "AppCheck is being used before activate() is called for FirebaseApp {$appName}. Please make sure you call activate() before instantiating other Firebase services.", _a7["fetch-network-error"] = "Fetch failed to connect to a network. Check Internet connection. Original error: {$originalErrorMessage}.", _a7["fetch-parse-error"] = "Fetch client could not parse response. Original error: {$originalErrorMessage}.", _a7["fetch-status-error"] = "Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.", _a7["storage-open"] = "Error thrown when opening storage. Original error: {$originalErrorMessage}.", _a7["storage-get"] = "Error thrown when reading from storage. Original error: {$originalErrorMessage}.", _a7["storage-set"] = "Error thrown when writing to storage. Original error: {$originalErrorMessage}.", _a7["recaptcha-error"] = "ReCAPTCHA error.", _a7);
var ERROR_FACTORY6 = new ErrorFactory("appCheck", "AppCheck", ERRORS2);
var APP_CHECK_STATES = new Map();
var DEFAULT_STATE = {
  activated: false,
  tokenObservers: []
};
var DEBUG_STATE = {
  enabled: false
};
function getState(app) {
  return APP_CHECK_STATES.get(app) || DEFAULT_STATE;
}
function setState(app, state) {
  APP_CHECK_STATES.set(app, state);
}
function getDebugState() {
  return DEBUG_STATE;
}
var BASE_ENDPOINT = "https://content-firebaseappcheck.googleapis.com/v1beta";
var EXCHANGE_RECAPTCHA_TOKEN_METHOD = "exchangeRecaptchaToken";
var EXCHANGE_DEBUG_TOKEN_METHOD = "exchangeDebugToken";
var TOKEN_REFRESH_TIME = {
  OFFSET_DURATION: 5 * 60 * 1e3,
  RETRIAL_MIN_WAIT: 30 * 1e3,
  RETRIAL_MAX_WAIT: 16 * 60 * 1e3
};
var Refresher = function() {
  function Refresher2(operation, retryPolicy, getWaitDuration, lowerBound, upperBound) {
    this.operation = operation;
    this.retryPolicy = retryPolicy;
    this.getWaitDuration = getWaitDuration;
    this.lowerBound = lowerBound;
    this.upperBound = upperBound;
    this.pending = null;
    this.nextErrorWaitInterval = lowerBound;
    if (lowerBound > upperBound) {
      throw new Error("Proactive refresh lower bound greater than upper bound!");
    }
  }
  Refresher2.prototype.start = function() {
    this.nextErrorWaitInterval = this.lowerBound;
    this.process(true).catch(function() {
    });
  };
  Refresher2.prototype.stop = function() {
    if (this.pending) {
      this.pending.reject("cancelled");
      this.pending = null;
    }
  };
  Refresher2.prototype.isRunning = function() {
    return !!this.pending;
  };
  Refresher2.prototype.process = function(hasSucceeded) {
    return __awaiter(this, void 0, void 0, function() {
      var error_1;
      return __generator(this, function(_a8) {
        switch (_a8.label) {
          case 0:
            this.stop();
            _a8.label = 1;
          case 1:
            _a8.trys.push([1, 6, , 7]);
            this.pending = new Deferred();
            return [4, sleep3(this.getNextRun(hasSucceeded))];
          case 2:
            _a8.sent();
            this.pending.resolve();
            return [4, this.pending.promise];
          case 3:
            _a8.sent();
            this.pending = new Deferred();
            return [4, this.operation()];
          case 4:
            _a8.sent();
            this.pending.resolve();
            return [4, this.pending.promise];
          case 5:
            _a8.sent();
            this.process(true).catch(function() {
            });
            return [3, 7];
          case 6:
            error_1 = _a8.sent();
            if (this.retryPolicy(error_1)) {
              this.process(false).catch(function() {
              });
            } else {
              this.stop();
            }
            return [3, 7];
          case 7:
            return [2];
        }
      });
    });
  };
  Refresher2.prototype.getNextRun = function(hasSucceeded) {
    if (hasSucceeded) {
      this.nextErrorWaitInterval = this.lowerBound;
      return this.getWaitDuration();
    } else {
      var currentErrorWaitInterval = this.nextErrorWaitInterval;
      this.nextErrorWaitInterval *= 2;
      if (this.nextErrorWaitInterval > this.upperBound) {
        this.nextErrorWaitInterval = this.upperBound;
      }
      return currentErrorWaitInterval;
    }
  };
  return Refresher2;
}();
function sleep3(ms2) {
  return new Promise(function(resolve) {
    setTimeout(resolve, ms2);
  });
}
function getRecaptcha() {
  return self.grecaptcha;
}
function ensureActivated(app) {
  if (!getState(app).activated) {
    throw ERROR_FACTORY6.create("use-before-activation", {
      appName: app.name
    });
  }
}
function uuidv4() {
  return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c) {
    var r = Math.random() * 16 | 0, v2 = c === "x" ? r : r & 3 | 8;
    return v2.toString(16);
  });
}
function formatDummyToken(tokenErrorData) {
  return base64.encodeString(JSON.stringify(tokenErrorData), false);
}
function exchangeToken(_a8, platformLoggerProvider) {
  var url = _a8.url, body = _a8.body;
  return __awaiter(this, void 0, void 0, function() {
    var headers, platformLogger, options, response, originalError_1, responseBody, originalError_2, match, timeToLiveAsNumber, now;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          headers = {
            "Content-Type": "application/json"
          };
          platformLogger = platformLoggerProvider.getImmediate({
            optional: true
          });
          if (platformLogger) {
            headers["X-Firebase-Client"] = platformLogger.getPlatformInfoString();
          }
          options = {
            method: "POST",
            body: JSON.stringify(body),
            headers
          };
          _b.label = 1;
        case 1:
          _b.trys.push([1, 3, , 4]);
          return [4, fetch(url, options)];
        case 2:
          response = _b.sent();
          return [3, 4];
        case 3:
          originalError_1 = _b.sent();
          throw ERROR_FACTORY6.create("fetch-network-error", {
            originalErrorMessage: originalError_1.message
          });
        case 4:
          if (response.status !== 200) {
            throw ERROR_FACTORY6.create("fetch-status-error", {
              httpStatus: response.status
            });
          }
          _b.label = 5;
        case 5:
          _b.trys.push([5, 7, , 8]);
          return [4, response.json()];
        case 6:
          responseBody = _b.sent();
          return [3, 8];
        case 7:
          originalError_2 = _b.sent();
          throw ERROR_FACTORY6.create("fetch-parse-error", {
            originalErrorMessage: originalError_2.message
          });
        case 8:
          match = responseBody.ttl.match(/^([\d.]+)(s)$/);
          if (!match || !match[2] || isNaN(Number(match[1]))) {
            throw ERROR_FACTORY6.create("fetch-parse-error", {
              originalErrorMessage: "ttl field (timeToLive) is not in standard Protobuf Duration " + ("format: " + responseBody.ttl)
            });
          }
          timeToLiveAsNumber = Number(match[1]) * 1e3;
          now = Date.now();
          return [2, {
            token: responseBody.attestationToken,
            expireTimeMillis: now + timeToLiveAsNumber,
            issuedAtTimeMillis: now
          }];
      }
    });
  });
}
function getExchangeRecaptchaTokenRequest(app, reCAPTCHAToken) {
  var _a8 = app.options, projectId = _a8.projectId, appId = _a8.appId, apiKey = _a8.apiKey;
  return {
    url: BASE_ENDPOINT + "/projects/" + projectId + "/apps/" + appId + ":" + EXCHANGE_RECAPTCHA_TOKEN_METHOD + "?key=" + apiKey,
    body: {
      recaptcha_token: reCAPTCHAToken
    }
  };
}
function getExchangeDebugTokenRequest(app, debugToken) {
  var _a8 = app.options, projectId = _a8.projectId, appId = _a8.appId, apiKey = _a8.apiKey;
  return {
    url: BASE_ENDPOINT + "/projects/" + projectId + "/apps/" + appId + ":" + EXCHANGE_DEBUG_TOKEN_METHOD + "?key=" + apiKey,
    body: {
      debug_token: debugToken
    }
  };
}
var DB_NAME2 = "firebase-app-check-database";
var DB_VERSION2 = 1;
var STORE_NAME = "firebase-app-check-store";
var DEBUG_TOKEN_KEY = "debug-token";
var dbPromise3 = null;
function getDBPromise() {
  if (dbPromise3) {
    return dbPromise3;
  }
  dbPromise3 = new Promise(function(resolve, reject) {
    try {
      var request = indexedDB.open(DB_NAME2, DB_VERSION2);
      request.onsuccess = function(event) {
        resolve(event.target.result);
      };
      request.onerror = function(event) {
        var _a8;
        reject(ERROR_FACTORY6.create("storage-open", {
          originalErrorMessage: (_a8 = event.target.error) === null || _a8 === void 0 ? void 0 : _a8.message
        }));
      };
      request.onupgradeneeded = function(event) {
        var db2 = event.target.result;
        switch (event.oldVersion) {
          case 0:
            db2.createObjectStore(STORE_NAME, {
              keyPath: "compositeKey"
            });
        }
      };
    } catch (e) {
      reject(ERROR_FACTORY6.create("storage-open", {
        originalErrorMessage: e.message
      }));
    }
  });
  return dbPromise3;
}
function readTokenFromIndexedDB(app) {
  return read(computeKey(app));
}
function writeTokenToIndexedDB(app, token) {
  return write(computeKey(app), token);
}
function writeDebugTokenToIndexedDB(token) {
  return write(DEBUG_TOKEN_KEY, token);
}
function readDebugTokenFromIndexedDB() {
  return read(DEBUG_TOKEN_KEY);
}
function write(key, value) {
  return __awaiter(this, void 0, void 0, function() {
    var db2, transaction, store, request;
    return __generator(this, function(_a8) {
      switch (_a8.label) {
        case 0:
          return [4, getDBPromise()];
        case 1:
          db2 = _a8.sent();
          transaction = db2.transaction(STORE_NAME, "readwrite");
          store = transaction.objectStore(STORE_NAME);
          request = store.put({
            compositeKey: key,
            value
          });
          return [2, new Promise(function(resolve, reject) {
            request.onsuccess = function(_event) {
              resolve();
            };
            transaction.onerror = function(event) {
              var _a9;
              reject(ERROR_FACTORY6.create("storage-set", {
                originalErrorMessage: (_a9 = event.target.error) === null || _a9 === void 0 ? void 0 : _a9.message
              }));
            };
          })];
      }
    });
  });
}
function read(key) {
  return __awaiter(this, void 0, void 0, function() {
    var db2, transaction, store, request;
    return __generator(this, function(_a8) {
      switch (_a8.label) {
        case 0:
          return [4, getDBPromise()];
        case 1:
          db2 = _a8.sent();
          transaction = db2.transaction(STORE_NAME, "readonly");
          store = transaction.objectStore(STORE_NAME);
          request = store.get(key);
          return [2, new Promise(function(resolve, reject) {
            request.onsuccess = function(event) {
              var result = event.target.result;
              if (result) {
                resolve(result.value);
              } else {
                resolve(void 0);
              }
            };
            transaction.onerror = function(event) {
              var _a9;
              reject(ERROR_FACTORY6.create("storage-get", {
                originalErrorMessage: (_a9 = event.target.error) === null || _a9 === void 0 ? void 0 : _a9.message
              }));
            };
          })];
      }
    });
  });
}
function computeKey(app) {
  return app.options.appId + "-" + app.name;
}
var logger4 = new Logger("@firebase/app-check");
function readTokenFromStorage(app) {
  return __awaiter(this, void 0, void 0, function() {
    var token, e_1;
    return __generator(this, function(_a8) {
      switch (_a8.label) {
        case 0:
          if (!isIndexedDBAvailable())
            return [3, 5];
          token = void 0;
          _a8.label = 1;
        case 1:
          _a8.trys.push([1, 3, , 4]);
          return [4, readTokenFromIndexedDB(app)];
        case 2:
          token = _a8.sent();
          return [3, 4];
        case 3:
          e_1 = _a8.sent();
          logger4.warn("Failed to read token from indexeddb. Error: " + e_1);
          return [3, 4];
        case 4:
          return [2, token];
        case 5:
          return [2, void 0];
      }
    });
  });
}
function writeTokenToStorage(app, token) {
  if (isIndexedDBAvailable()) {
    return writeTokenToIndexedDB(app, token).catch(function(e) {
      logger4.warn("Failed to write token to indexeddb. Error: " + e);
    });
  }
  return Promise.resolve();
}
function readOrCreateDebugTokenFromStorage() {
  return __awaiter(this, void 0, void 0, function() {
    var existingDebugToken, newToken;
    return __generator(this, function(_a8) {
      switch (_a8.label) {
        case 0:
          existingDebugToken = void 0;
          _a8.label = 1;
        case 1:
          _a8.trys.push([1, 3, , 4]);
          return [4, readDebugTokenFromIndexedDB()];
        case 2:
          existingDebugToken = _a8.sent();
          return [3, 4];
        case 3:
          _a8.sent();
          return [3, 4];
        case 4:
          if (!existingDebugToken) {
            newToken = uuidv4();
            writeDebugTokenToIndexedDB(newToken).catch(function(e) {
              return logger4.warn("Failed to persist debug token to indexeddb. Error: " + e);
            });
            console.log("AppCheck debug token: " + newToken + ". You will need to whitelist it in the Firebase console for it to work");
            return [2, newToken];
          } else {
            return [2, existingDebugToken];
          }
      }
    });
  });
}
function isDebugMode() {
  var debugState = getDebugState();
  return debugState.enabled;
}
function getDebugToken() {
  return __awaiter(this, void 0, void 0, function() {
    var state;
    return __generator(this, function(_a8) {
      state = getDebugState();
      if (state.enabled && state.token) {
        return [2, state.token.promise];
      } else {
        throw Error("\n            Can't get debug token in production mode.\n        ");
      }
    });
  });
}
function initializeDebugMode() {
  var globals = getGlobal();
  if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== "string" && globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== true) {
    return;
  }
  var debugState = getDebugState();
  debugState.enabled = true;
  var deferredToken = new Deferred();
  debugState.token = deferredToken;
  if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN === "string") {
    deferredToken.resolve(globals.FIREBASE_APPCHECK_DEBUG_TOKEN);
  } else {
    deferredToken.resolve(readOrCreateDebugTokenFromStorage());
  }
}
var defaultTokenErrorData = { error: "UNKNOWN_ERROR" };
function getToken$2(app, platformLoggerProvider, forceRefresh) {
  if (forceRefresh === void 0) {
    forceRefresh = false;
  }
  return __awaiter(this, void 0, void 0, function() {
    var state, token, error2, cachedToken, tokenFromDebugExchange, _a8, _b, _c2, e_1, interopTokenResult;
    return __generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          ensureActivated(app);
          state = getState(app);
          token = state.token;
          error2 = void 0;
          if (!!token)
            return [3, 2];
          return [4, state.cachedTokenPromise];
        case 1:
          cachedToken = _d.sent();
          if (cachedToken && isValid(cachedToken)) {
            token = cachedToken;
            setState(app, __assign(__assign({}, state), { token }));
            notifyTokenListeners(app, { token: token.token });
          }
          _d.label = 2;
        case 2:
          if (!forceRefresh && token && isValid(token)) {
            return [2, {
              token: token.token
            }];
          }
          if (!isDebugMode())
            return [3, 6];
          _a8 = exchangeToken;
          _b = getExchangeDebugTokenRequest;
          _c2 = [app];
          return [4, getDebugToken()];
        case 3:
          return [4, _a8.apply(void 0, [_b.apply(void 0, _c2.concat([_d.sent()])), platformLoggerProvider])];
        case 4:
          tokenFromDebugExchange = _d.sent();
          return [4, writeTokenToStorage(app, tokenFromDebugExchange)];
        case 5:
          _d.sent();
          setState(app, __assign(__assign({}, state), { token: tokenFromDebugExchange }));
          return [2, { token: tokenFromDebugExchange.token }];
        case 6:
          _d.trys.push([6, 8, , 9]);
          return [4, state.provider.getToken()];
        case 7:
          token = _d.sent();
          return [3, 9];
        case 8:
          e_1 = _d.sent();
          logger4.error(e_1);
          error2 = e_1;
          return [3, 9];
        case 9:
          if (!!token)
            return [3, 10];
          interopTokenResult = makeDummyTokenResult(error2);
          return [3, 12];
        case 10:
          interopTokenResult = {
            token: token.token
          };
          setState(app, __assign(__assign({}, state), { token }));
          return [4, writeTokenToStorage(app, token)];
        case 11:
          _d.sent();
          _d.label = 12;
        case 12:
          notifyTokenListeners(app, interopTokenResult);
          return [2, interopTokenResult];
      }
    });
  });
}
function addTokenListener(app, platformLoggerProvider, type, listener, onError) {
  var state = getState(app);
  var tokenListener = {
    next: listener,
    error: onError,
    type
  };
  var newState = __assign(__assign({}, state), { tokenObservers: __spreadArray(__spreadArray([], state.tokenObservers), [tokenListener]) });
  if (!newState.tokenRefresher) {
    var tokenRefresher = createTokenRefresher(app, platformLoggerProvider);
    newState.tokenRefresher = tokenRefresher;
  }
  if (!newState.tokenRefresher.isRunning() && state.isTokenAutoRefreshEnabled) {
    newState.tokenRefresher.start();
  }
  if (state.token && isValid(state.token)) {
    var validToken_1 = state.token;
    Promise.resolve().then(function() {
      return listener({ token: validToken_1.token });
    }).catch(function() {
    });
  } else if (state.token == null) {
    void state.cachedTokenPromise.then(function(cachedToken) {
      if (cachedToken && isValid(cachedToken)) {
        listener({ token: cachedToken.token });
      }
    }).catch(function() {
    });
  }
  setState(app, newState);
}
function removeTokenListener(app, listener) {
  var state = getState(app);
  var newObservers = state.tokenObservers.filter(function(tokenObserver) {
    return tokenObserver.next !== listener;
  });
  if (newObservers.length === 0 && state.tokenRefresher && state.tokenRefresher.isRunning()) {
    state.tokenRefresher.stop();
  }
  setState(app, __assign(__assign({}, state), { tokenObservers: newObservers }));
}
function createTokenRefresher(app, platformLoggerProvider) {
  var _this = this;
  return new Refresher(function() {
    return __awaiter(_this, void 0, void 0, function() {
      var state, result;
      return __generator(this, function(_a8) {
        switch (_a8.label) {
          case 0:
            state = getState(app);
            if (!!state.token)
              return [3, 2];
            return [4, getToken$2(app, platformLoggerProvider)];
          case 1:
            result = _a8.sent();
            return [3, 4];
          case 2:
            return [4, getToken$2(app, platformLoggerProvider, true)];
          case 3:
            result = _a8.sent();
            _a8.label = 4;
          case 4:
            if (result.error) {
              throw result.error;
            }
            return [2];
        }
      });
    });
  }, function() {
    return true;
  }, function() {
    var state = getState(app);
    if (state.token) {
      var nextRefreshTimeMillis = state.token.issuedAtTimeMillis + (state.token.expireTimeMillis - state.token.issuedAtTimeMillis) * 0.5 + 5 * 60 * 1e3;
      var latestAllowableRefresh = state.token.expireTimeMillis - 5 * 60 * 1e3;
      nextRefreshTimeMillis = Math.min(nextRefreshTimeMillis, latestAllowableRefresh);
      return Math.max(0, nextRefreshTimeMillis - Date.now());
    } else {
      return 0;
    }
  }, TOKEN_REFRESH_TIME.RETRIAL_MIN_WAIT, TOKEN_REFRESH_TIME.RETRIAL_MAX_WAIT);
}
function notifyTokenListeners(app, token) {
  var observers = getState(app).tokenObservers;
  for (var _i2 = 0, observers_1 = observers; _i2 < observers_1.length; _i2++) {
    var observer = observers_1[_i2];
    try {
      if (observer.type === "EXTERNAL" && token.error != null) {
        observer.error(token.error);
      } else {
        observer.next(token);
      }
    } catch (ignored) {
    }
  }
}
function isValid(token) {
  return token.expireTimeMillis - Date.now() > 0;
}
function makeDummyTokenResult(error2) {
  return {
    token: formatDummyToken(defaultTokenErrorData),
    error: error2
  };
}
var RECAPTCHA_URL = "https://www.google.com/recaptcha/api.js";
function initialize(app, siteKey) {
  var state = getState(app);
  var initialized = new Deferred();
  setState(app, __assign(__assign({}, state), { reCAPTCHAState: { initialized } }));
  var divId = "fire_app_check_" + app.name;
  var invisibleDiv = document.createElement("div");
  invisibleDiv.id = divId;
  invisibleDiv.style.display = "none";
  document.body.appendChild(invisibleDiv);
  var grecaptcha = getRecaptcha();
  if (!grecaptcha) {
    loadReCAPTCHAScript(function() {
      var grecaptcha2 = getRecaptcha();
      if (!grecaptcha2) {
        throw new Error("no recaptcha");
      }
      grecaptcha2.ready(function() {
        renderInvisibleWidget(app, siteKey, grecaptcha2, divId);
        initialized.resolve(grecaptcha2);
      });
    });
  } else {
    grecaptcha.ready(function() {
      renderInvisibleWidget(app, siteKey, grecaptcha, divId);
      initialized.resolve(grecaptcha);
    });
  }
  return initialized.promise;
}
function getToken$1(app) {
  return __awaiter(this, void 0, void 0, function() {
    var reCAPTCHAState, recaptcha;
    return __generator(this, function(_a8) {
      switch (_a8.label) {
        case 0:
          ensureActivated(app);
          reCAPTCHAState = getState(app).reCAPTCHAState;
          return [4, reCAPTCHAState.initialized.promise];
        case 1:
          recaptcha = _a8.sent();
          return [2, new Promise(function(resolve, _reject) {
            var reCAPTCHAState2 = getState(app).reCAPTCHAState;
            recaptcha.ready(function() {
              resolve(recaptcha.execute(reCAPTCHAState2.widgetId, {
                action: "fire_app_check"
              }));
            });
          })];
      }
    });
  });
}
function renderInvisibleWidget(app, siteKey, grecaptcha, container) {
  var widgetId = grecaptcha.render(container, {
    sitekey: siteKey,
    size: "invisible"
  });
  var state = getState(app);
  setState(app, __assign(__assign({}, state), { reCAPTCHAState: __assign(__assign({}, state.reCAPTCHAState), {
    widgetId
  }) }));
}
function loadReCAPTCHAScript(onload) {
  var script = document.createElement("script");
  script.src = "" + RECAPTCHA_URL;
  script.onload = onload;
  document.head.appendChild(script);
}
var ReCaptchaV3Provider = function() {
  function ReCaptchaV3Provider2(_siteKey) {
    this._siteKey = _siteKey;
  }
  ReCaptchaV3Provider2.prototype.getToken = function() {
    return __awaiter(this, void 0, void 0, function() {
      var attestedClaimsToken;
      return __generator(this, function(_a8) {
        switch (_a8.label) {
          case 0:
            if (!this._app || !this._platformLoggerProvider) {
              throw ERROR_FACTORY6.create("use-before-activation", {
                appName: ""
              });
            }
            _a8.label = 1;
          case 1:
            _a8.trys.push([1, 3, , 4]);
            return [4, getToken$1(this._app)];
          case 2:
            attestedClaimsToken = _a8.sent();
            return [3, 4];
          case 3:
            _a8.sent();
            throw ERROR_FACTORY6.create("recaptcha-error");
          case 4:
            return [2, exchangeToken(getExchangeRecaptchaTokenRequest(this._app, attestedClaimsToken), this._platformLoggerProvider)];
        }
      });
    });
  };
  ReCaptchaV3Provider2.prototype.initialize = function(app, platformLoggerProvider) {
    this._app = app;
    this._platformLoggerProvider = platformLoggerProvider;
    initialize(app, this._siteKey).catch(function() {
    });
  };
  return ReCaptchaV3Provider2;
}();
var CustomProvider = function() {
  function CustomProvider2(_customProviderOptions) {
    this._customProviderOptions = _customProviderOptions;
  }
  CustomProvider2.prototype.getToken = function() {
    return __awaiter(this, void 0, void 0, function() {
      var customToken, issuedAtTimeSeconds, issuedAtTimeMillis;
      return __generator(this, function(_a8) {
        switch (_a8.label) {
          case 0:
            if (!this._app) {
              throw ERROR_FACTORY6.create("use-before-activation", {
                appName: ""
              });
            }
            return [4, this._customProviderOptions.getToken()];
          case 1:
            customToken = _a8.sent();
            issuedAtTimeSeconds = issuedAtTime(customToken.token);
            issuedAtTimeMillis = issuedAtTimeSeconds !== null && issuedAtTimeSeconds < Date.now() && issuedAtTimeSeconds > 0 ? issuedAtTimeSeconds * 1e3 : Date.now();
            return [2, __assign(__assign({}, customToken), { issuedAtTimeMillis })];
        }
      });
    });
  };
  CustomProvider2.prototype.initialize = function(app) {
    this._app = app;
  };
  return CustomProvider2;
}();
function activate(app, siteKeyOrProvider, platformLoggerProvider, isTokenAutoRefreshEnabled) {
  var state = getState(app);
  if (state.activated) {
    throw ERROR_FACTORY6.create("already-activated", {
      appName: app.name
    });
  }
  var newState = __assign(__assign({}, state), { activated: true });
  newState.cachedTokenPromise = readTokenFromStorage(app).then(function(cachedToken) {
    if (cachedToken && isValid(cachedToken)) {
      setState(app, __assign(__assign({}, getState(app)), { token: cachedToken }));
    }
    return cachedToken;
  });
  if (typeof siteKeyOrProvider === "string") {
    newState.provider = new ReCaptchaV3Provider(siteKeyOrProvider);
  } else if (siteKeyOrProvider instanceof ReCaptchaV3Provider || siteKeyOrProvider instanceof CustomProvider) {
    newState.provider = siteKeyOrProvider;
  } else {
    newState.provider = new CustomProvider({
      getToken: siteKeyOrProvider.getToken
    });
  }
  newState.isTokenAutoRefreshEnabled = isTokenAutoRefreshEnabled === void 0 ? app.automaticDataCollectionEnabled : isTokenAutoRefreshEnabled;
  setState(app, newState);
  newState.provider.initialize(app, platformLoggerProvider);
}
function setTokenAutoRefreshEnabled(app, isTokenAutoRefreshEnabled) {
  var state = getState(app);
  if (state.tokenRefresher) {
    if (isTokenAutoRefreshEnabled === true) {
      state.tokenRefresher.start();
    } else {
      state.tokenRefresher.stop();
    }
  }
  setState(app, __assign(__assign({}, state), { isTokenAutoRefreshEnabled }));
}
function getToken3(app, platformLoggerProvider, forceRefresh) {
  return __awaiter(this, void 0, void 0, function() {
    var result;
    return __generator(this, function(_a8) {
      switch (_a8.label) {
        case 0:
          return [4, getToken$2(app, platformLoggerProvider, forceRefresh)];
        case 1:
          result = _a8.sent();
          if (result.error) {
            throw result.error;
          }
          return [2, { token: result.token }];
      }
    });
  });
}
function onTokenChanged(app, platformLoggerProvider, onNextOrObserver, onError, onCompletion) {
  var nextFn = function() {
  };
  var errorFn = function() {
  };
  if (onNextOrObserver.next != null) {
    nextFn = onNextOrObserver.next.bind(onNextOrObserver);
  } else {
    nextFn = onNextOrObserver;
  }
  if (onNextOrObserver.error != null) {
    errorFn = onNextOrObserver.error.bind(onNextOrObserver);
  } else if (onError) {
    errorFn = onError;
  }
  addTokenListener(app, platformLoggerProvider, "EXTERNAL", nextFn, errorFn);
  return function() {
    return removeTokenListener(app, nextFn);
  };
}
function factory3(app, platformLoggerProvider) {
  return {
    app,
    activate: function(siteKeyOrProvider, isTokenAutoRefreshEnabled) {
      return activate(app, siteKeyOrProvider, platformLoggerProvider, isTokenAutoRefreshEnabled);
    },
    setTokenAutoRefreshEnabled: function(isTokenAutoRefreshEnabled) {
      return setTokenAutoRefreshEnabled(app, isTokenAutoRefreshEnabled);
    },
    getToken: function(forceRefresh) {
      return getToken3(app, platformLoggerProvider, forceRefresh);
    },
    onTokenChanged: function(onNextOrObserver, onError, onCompletion) {
      return onTokenChanged(app, platformLoggerProvider, onNextOrObserver, onError);
    },
    INTERNAL: {
      delete: function() {
        var tokenObservers = getState(app).tokenObservers;
        for (var _i2 = 0, tokenObservers_1 = tokenObservers; _i2 < tokenObservers_1.length; _i2++) {
          var tokenObserver = tokenObservers_1[_i2];
          removeTokenListener(app, tokenObserver.next);
        }
        return Promise.resolve();
      }
    }
  };
}
function internalFactory(app, platformLoggerProvider) {
  return {
    getToken: function(forceRefresh) {
      return getToken$2(app, platformLoggerProvider, forceRefresh);
    },
    addTokenListener: function(listener) {
      return addTokenListener(app, platformLoggerProvider, "INTERNAL", listener);
    },
    removeTokenListener: function(listener) {
      return removeTokenListener(app, listener);
    }
  };
}
var name8 = "@firebase/app-check";
var version8 = "0.3.2";
var APP_CHECK_NAME = "appCheck";
var APP_CHECK_NAME_INTERNAL = "app-check-internal";
function registerAppCheck(firebase) {
  firebase.INTERNAL.registerComponent(new Component(APP_CHECK_NAME, function(container) {
    var app = container.getProvider("app").getImmediate();
    var platformLoggerProvider = container.getProvider("platform-logger");
    return factory3(app, platformLoggerProvider);
  }, "PUBLIC").setServiceProps({
    ReCaptchaV3Provider,
    CustomProvider
  }).setInstantiationMode("EXPLICIT").setInstanceCreatedCallback(function(container, _instanceIdentifier, _instance) {
    var appCheckInternalProvider = container.getProvider(APP_CHECK_NAME_INTERNAL);
    appCheckInternalProvider.initialize();
  }));
  firebase.INTERNAL.registerComponent(new Component(APP_CHECK_NAME_INTERNAL, function(container) {
    var app = container.getProvider("app").getImmediate();
    var platformLoggerProvider = container.getProvider("platform-logger");
    return internalFactory(app, platformLoggerProvider);
  }, "PUBLIC").setInstantiationMode("EXPLICIT"));
  firebase.registerVersion(name8, version8);
}
registerAppCheck(index_esm_default);
initializeDebugMode();

// node_modules/firebase/dist/index.esm.js
var name$1 = "firebase";
var version$1 = "8.10.0";
index_esm_default.registerVersion(name$1, version$1, "app");
index_esm_default.SDK_VERSION = version$1;
var name9 = "firebase";
var version9 = "8.10.0";
console.warn("\nIt looks like you're using the development build of the Firebase JS SDK.\nWhen deploying Firebase apps to production, it is advisable to only import\nthe individual SDK components you intend to use.\n\nFor the module builds, these are available in the following manner\n(replace <PACKAGE> with the name of a component - i.e. auth, database, etc):\n\nCommonJS Modules:\nconst firebase = require('firebase/app');\nrequire('firebase/<PACKAGE>');\n\nES Modules:\nimport firebase from 'firebase/app';\nimport 'firebase/<PACKAGE>';\n\nTypescript:\nimport firebase from 'firebase/app';\nimport 'firebase/<PACKAGE>';\n");
index_esm_default.registerVersion(name9, version9);

// dep:firebase
var firebase_default = index_esm_default;
export {
  firebase_default as default
};
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
//# sourceMappingURL=firebase.js.map
